
SCARA_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800a9a0  0800a9a0  0001a9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac48  0800ac48  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac48  0800ac48  0001ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac50  0800ac50  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800ac58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  200000b8  0800ad0c  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800ad0c  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fa2  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b97  00000000  00000000  00035086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00037c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00038cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229c5  00000000  00000000  00039c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015331  00000000  00000000  0005c61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b2a  00000000  00000000  0007194e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  001454cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000b8 	.word	0x200000b8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a984 	.word	0x0800a984

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000bc 	.word	0x200000bc
 8000204:	0800a984 	.word	0x0800a984

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96e 	b.w	8000ec4 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468c      	mov	ip, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8083 	bne.w	8000d16 <__udivmoddi4+0x116>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4617      	mov	r7, r2
 8000c14:	d947      	bls.n	8000ca6 <__udivmoddi4+0xa6>
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	b142      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1c:	f1c2 0020 	rsb	r0, r2, #32
 8000c20:	fa24 f000 	lsr.w	r0, r4, r0
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4097      	lsls	r7, r2
 8000c28:	ea40 0c01 	orr.w	ip, r0, r1
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbbc f6f8 	udiv	r6, ip, r8
 8000c38:	fa1f fe87 	uxth.w	lr, r7
 8000c3c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c44:	fb06 f10e 	mul.w	r1, r6, lr
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 8119 	bcs.w	8000e88 <__udivmoddi4+0x288>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8116 	bls.w	8000e88 <__udivmoddi4+0x288>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	443b      	add	r3, r7
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8105 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f240 8102 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c90:	eba4 040e 	sub.w	r4, r4, lr
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	b902      	cbnz	r2, 8000caa <__udivmoddi4+0xaa>
 8000ca8:	deff      	udf	#255	; 0xff
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d150      	bne.n	8000d54 <__udivmoddi4+0x154>
 8000cb2:	1bcb      	subs	r3, r1, r7
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f f887 	uxth.w	r8, r7
 8000cbc:	2601      	movs	r6, #1
 8000cbe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cc2:	0c21      	lsrs	r1, r4, #16
 8000cc4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000cd4:	1879      	adds	r1, r7, r1
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0xe2>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	f200 80e9 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1ac9      	subs	r1, r1, r3
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x10c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x10a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80d9 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e7bf      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x12e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80b1 	beq.w	8000e82 <__udivmoddi4+0x282>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x1cc>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0x140>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80b8 	bhi.w	8000eb0 <__udivmoddi4+0x2b0>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0103 	sbc.w	r1, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	468c      	mov	ip, r1
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0a8      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000d4e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f603 	lsr.w	r6, r0, r3
 8000d5c:	4097      	lsls	r7, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	4330      	orrs	r0, r6
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f108 	mul.w	r1, r6, r8
 8000d80:	4299      	cmp	r1, r3
 8000d82:	fa04 f402 	lsl.w	r4, r4, r2
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x19c>
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8e:	f080 808d 	bcs.w	8000eac <__udivmoddi4+0x2ac>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 808a 	bls.w	8000eac <__udivmoddi4+0x2ac>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	443b      	add	r3, r7
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b281      	uxth	r1, r0
 8000da0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb00 f308 	mul.w	r3, r0, r8
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x1c4>
 8000db4:	1879      	adds	r1, r7, r1
 8000db6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dba:	d273      	bcs.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d971      	bls.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4439      	add	r1, r7
 8000dc4:	1acb      	subs	r3, r1, r3
 8000dc6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dca:	e778      	b.n	8000cbe <__udivmoddi4+0xbe>
 8000dcc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dea:	431f      	orrs	r7, r3
 8000dec:	0c3b      	lsrs	r3, r7, #16
 8000dee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df2:	fa1f f884 	uxth.w	r8, r4
 8000df6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dfa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfe:	fb09 fa08 	mul.w	sl, r9, r8
 8000e02:	458a      	cmp	sl, r1
 8000e04:	fa02 f206 	lsl.w	r2, r2, r6
 8000e08:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x220>
 8000e0e:	1861      	adds	r1, r4, r1
 8000e10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e14:	d248      	bcs.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e16:	458a      	cmp	sl, r1
 8000e18:	d946      	bls.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4421      	add	r1, r4
 8000e20:	eba1 010a 	sub.w	r1, r1, sl
 8000e24:	b2bf      	uxth	r7, r7
 8000e26:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e2a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e32:	fb00 f808 	mul.w	r8, r0, r8
 8000e36:	45b8      	cmp	r8, r7
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x24a>
 8000e3a:	19e7      	adds	r7, r4, r7
 8000e3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e40:	d22e      	bcs.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d92c      	bls.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4427      	add	r7, r4
 8000e4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4e:	eba7 0708 	sub.w	r7, r7, r8
 8000e52:	fba0 8902 	umull	r8, r9, r0, r2
 8000e56:	454f      	cmp	r7, r9
 8000e58:	46c6      	mov	lr, r8
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	d31a      	bcc.n	8000e94 <__udivmoddi4+0x294>
 8000e5e:	d017      	beq.n	8000e90 <__udivmoddi4+0x290>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x27a>
 8000e62:	ebb3 020e 	subs.w	r2, r3, lr
 8000e66:	eb67 0701 	sbc.w	r7, r7, r1
 8000e6a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6e:	40f2      	lsrs	r2, r6
 8000e70:	ea4c 0202 	orr.w	r2, ip, r2
 8000e74:	40f7      	lsrs	r7, r6
 8000e76:	e9c5 2700 	strd	r2, r7, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	462e      	mov	r6, r5
 8000e84:	4628      	mov	r0, r5
 8000e86:	e70b      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fd      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e90:	4543      	cmp	r3, r8
 8000e92:	d2e5      	bcs.n	8000e60 <__udivmoddi4+0x260>
 8000e94:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e98:	eb69 0104 	sbc.w	r1, r9, r4
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	e7df      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e7d2      	b.n	8000e4a <__udivmoddi4+0x24a>
 8000ea4:	4660      	mov	r0, ip
 8000ea6:	e78d      	b.n	8000dc4 <__udivmoddi4+0x1c4>
 8000ea8:	4681      	mov	r9, r0
 8000eaa:	e7b9      	b.n	8000e20 <__udivmoddi4+0x220>
 8000eac:	4666      	mov	r6, ip
 8000eae:	e775      	b.n	8000d9c <__udivmoddi4+0x19c>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e74a      	b.n	8000d4a <__udivmoddi4+0x14a>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	4439      	add	r1, r7
 8000eba:	e713      	b.n	8000ce4 <__udivmoddi4+0xe4>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	e724      	b.n	8000d0c <__udivmoddi4+0x10c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <AMT21_initialize>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialize(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8b3a      	ldrh	r2, [r7, #24]
 8000ee8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	81da      	strh	r2, [r3, #14]
	dev->k0 = 0;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2200      	movs	r2, #0
 8000f00:	741a      	strb	r2, [r3, #16]
	dev->k1 = 0;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	745a      	strb	r2, [r3, #17]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6858      	ldr	r0, [r3, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	891b      	ldrh	r3, [r3, #8]
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	f004 fa24 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f103 010a 	add.w	r1, r3, #10
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f006 fa86 	bl	800744a <HAL_UART_Transmit>
			sizeof(dev->address), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6858      	ldr	r0, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	891b      	ldrh	r3, [r3, #8]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f004 fa13 	bl	8005374 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f103 010c 	add.w	r1, r3, #12
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f006 fb07 	bl	800756e <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x400) == 0x400;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	899b      	ldrh	r3, [r3, #12]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf14      	ite	ne
 8000f6c:	2301      	movne	r3, #1
 8000f6e:	2300      	moveq	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	741a      	strb	r2, [r3, #16]
	dev->k1 = (dev->uart_buf & 0x800) == 0x800;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	899b      	ldrh	r3, [r3, #12]
 8000f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	745a      	strb	r2, [r3, #17]
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = (dev->uart_buf & 0x3FFF) >> 2;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	899b      	ldrh	r3, [r3, #12]
 8000fa4:	109b      	asrs	r3, r3, #2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	899b      	ldrh	r3, [r3, #12]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	899b      	ldrh	r3, [r3, #12]
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	737b      	strb	r3, [r7, #13]
 8000fce:	e020      	b.n	8001012 <AMT21_check_value+0x7a>
		dev->uart_buf = dev->uart_buf >> 2;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	899b      	ldrh	r3, [r3, #12]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	899b      	ldrh	r3, [r3, #12]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	4053      	eors	r3, r2
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	899b      	ldrh	r3, [r3, #12]
 8000ff6:	085b      	lsrs	r3, r3, #1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b25a      	sxtb	r2, r3
 8001002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001006:	4053      	eors	r3, r2
 8001008:	b25b      	sxtb	r3, r3
 800100a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	3301      	adds	r3, #1
 8001010:	737b      	strb	r3, [r7, #13]
 8001012:	7b7b      	ldrb	r3, [r7, #13]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d9db      	bls.n	8000fd0 <AMT21_check_value+0x38>
	}
	k0_check = !k0_check;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7c1b      	ldrb	r3, [r3, #16]
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	429a      	cmp	r2, r3
 800103c:	d109      	bne.n	8001052 <AMT21_check_value+0xba>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7c5b      	ldrb	r3, [r3, #17]
 8001042:	7bba      	ldrb	r2, [r7, #14]
 8001044:	429a      	cmp	r2, r3
 8001046:	d104      	bne.n	8001052 <AMT21_check_value+0xba>
		dev->position = position_temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	897a      	ldrh	r2, [r7, #10]
 800104c:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <AMT21_check_value+0xbc>
	} else {
//		dev->position = 0;
		return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
	}
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <Motor_Initialize>:
 */

#include "Motor.h"

void Motor_Initialize (Motor *M, TIM_HandleTypeDef *Timer, uint32_t Channel,
		GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin, int16_t min, int16_t max) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
	M->Timer = Timer;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	601a      	str	r2, [r3, #0]
	M->Channel = Channel;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	605a      	str	r2, [r3, #4]
	M->GPIO_Port = GPIO_Port;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	609a      	str	r2, [r3, #8]
	M->GPIO_Pin = GPIO_Pin;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8b3a      	ldrh	r2, [r7, #24]
 8001084:	819a      	strh	r2, [r3, #12]
	M->min = min;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	8bba      	ldrh	r2, [r7, #28]
 800108a:	81da      	strh	r2, [r3, #14]
	M->max = max;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8c3a      	ldrh	r2, [r7, #32]
 8001090:	821a      	strh	r2, [r3, #16]
	HAL_TIM_PWM_Start(Timer, Channel);
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f005 f8e3 	bl	8006260 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, 0);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d105      	bne.n	80010ae <Motor_Initialize+0x4e>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010ac:	e018      	b.n	80010e0 <Motor_Initialize+0x80>
	__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, 0);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d105      	bne.n	80010c2 <Motor_Initialize+0x62>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010c0:	e00e      	b.n	80010e0 <Motor_Initialize+0x80>
	__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, 0);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d105      	bne.n	80010d6 <Motor_Initialize+0x76>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010d4:	e004      	b.n	80010e0 <Motor_Initialize+0x80>
	__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, 0);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <Drive_Motor>:

void Drive_Motor (Motor *M, int16_t Hz) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
	if (Hz == 0) {
 80010f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d123      	bne.n	8001144 <Drive_Motor+0x5c>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, 0);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <Drive_Motor+0x28>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
		else if (-Hz > M->max) {Hz = -M->max;}
		M->Timer->Instance->ARR	= (60000/-Hz)-1;
		HAL_GPIO_WritePin(M->GPIO_Port, M->GPIO_Pin, 0);
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, (M->Timer->Instance->ARR+1)/2);
	}
}
 800110e:	e0ea      	b.n	80012e6 <Drive_Motor+0x1fe>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, 0);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b04      	cmp	r3, #4
 8001116:	d105      	bne.n	8001124 <Drive_Motor+0x3c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	6393      	str	r3, [r2, #56]	; 0x38
 8001122:	e0e0      	b.n	80012e6 <Drive_Motor+0x1fe>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b08      	cmp	r3, #8
 800112a:	d105      	bne.n	8001138 <Drive_Motor+0x50>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001136:	e0d6      	b.n	80012e6 <Drive_Motor+0x1fe>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001142:	e0d0      	b.n	80012e6 <Drive_Motor+0x1fe>
	else if (Hz > 0) {
 8001144:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd5f      	ble.n	800120c <Drive_Motor+0x124>
		if (Hz > M->max) {Hz = M->max;}
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001152:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001156:	429a      	cmp	r2, r3
 8001158:	dd03      	ble.n	8001162 <Drive_Motor+0x7a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	8a1b      	ldrh	r3, [r3, #16]
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	e009      	b.n	8001176 <Drive_Motor+0x8e>
		else if (Hz < M->min) {Hz = M->min;}
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001168:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800116c:	429a      	cmp	r2, r3
 800116e:	da02      	bge.n	8001176 <Drive_Motor+0x8e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	89db      	ldrh	r3, [r3, #14]
 8001174:	807b      	strh	r3, [r7, #2]
		M->Timer->Instance->ARR	= (60000/Hz)-1;
 8001176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800117a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800117e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(M->GPIO_Port, M->GPIO_Pin, 1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6898      	ldr	r0, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	899b      	ldrh	r3, [r3, #12]
 8001194:	2201      	movs	r2, #1
 8001196:	4619      	mov	r1, r3
 8001198:	f004 f8ec 	bl	8005374 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, (M->Timer->Instance->ARR+1)/2);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10a      	bne.n	80011ba <Drive_Motor+0xd2>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0852      	lsrs	r2, r2, #1
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011b8:	e095      	b.n	80012e6 <Drive_Motor+0x1fe>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, (M->Timer->Instance->ARR+1)/2);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d10a      	bne.n	80011d8 <Drive_Motor+0xf0>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	3301      	adds	r3, #1
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	6393      	str	r3, [r2, #56]	; 0x38
 80011d6:	e086      	b.n	80012e6 <Drive_Motor+0x1fe>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d10a      	bne.n	80011f6 <Drive_Motor+0x10e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	3301      	adds	r3, #1
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011f4:	e077      	b.n	80012e6 <Drive_Motor+0x1fe>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	3301      	adds	r3, #1
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
}
 800120a:	e06c      	b.n	80012e6 <Drive_Motor+0x1fe>
	else if (Hz < 0){
 800120c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001210:	2b00      	cmp	r3, #0
 8001212:	da68      	bge.n	80012e6 <Drive_Motor+0x1fe>
		if (-Hz < M->min) {Hz = -M->min;}
 8001214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001218:	425b      	negs	r3, r3
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001220:	4293      	cmp	r3, r2
 8001222:	da07      	bge.n	8001234 <Drive_Motor+0x14c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800122a:	b29b      	uxth	r3, r3
 800122c:	425b      	negs	r3, r3
 800122e:	b29b      	uxth	r3, r3
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	e00e      	b.n	8001252 <Drive_Motor+0x16a>
		else if (-Hz > M->max) {Hz = -M->max;}
 8001234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001238:	425b      	negs	r3, r3
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001240:	4293      	cmp	r3, r2
 8001242:	dd06      	ble.n	8001252 <Drive_Motor+0x16a>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800124a:	b29b      	uxth	r3, r3
 800124c:	425b      	negs	r3, r3
 800124e:	b29b      	uxth	r3, r3
 8001250:	807b      	strh	r3, [r7, #2]
		M->Timer->Instance->ARR	= (60000/-Hz)-1;
 8001252:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <Drive_Motor+0x208>)
 8001258:	fb92 f3f3 	sdiv	r3, r2, r3
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_GPIO_WritePin(M->GPIO_Port, M->GPIO_Pin, 0);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6898      	ldr	r0, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	899b      	ldrh	r3, [r3, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	f004 f87f 	bl	8005374 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, (M->Timer->Instance->ARR+1)/2);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10a      	bne.n	8001294 <Drive_Motor+0x1ac>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0852      	lsrs	r2, r2, #1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001292:	e028      	b.n	80012e6 <Drive_Motor+0x1fe>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, (M->Timer->Instance->ARR+1)/2);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d10a      	bne.n	80012b2 <Drive_Motor+0x1ca>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	3301      	adds	r3, #1
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012b0:	e019      	b.n	80012e6 <Drive_Motor+0x1fe>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, (M->Timer->Instance->ARR+1)/2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d10a      	bne.n	80012d0 <Drive_Motor+0x1e8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	3301      	adds	r3, #1
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012ce:	e00a      	b.n	80012e6 <Drive_Motor+0x1fe>
		__HAL_TIM_SET_COMPARE(M->Timer, M->Channel, (M->Timer->Instance->ARR+1)/2);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	3301      	adds	r3, #1
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012e4:	e7ff      	b.n	80012e6 <Drive_Motor+0x1fe>
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	ffff15a0 	.word	0xffff15a0

080012f4 <Motor_Stop_All>:

void Motor_Stop_All (void) {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <Motor_Stop_All+0x28>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = 0;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <Motor_Stop_All+0x2c>)
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR3 = 0;
 8001304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001308:	2200      	movs	r2, #0
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR2 = 0;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <Motor_Stop_All+0x30>)
 800130e:	2200      	movs	r2, #0
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40000400 	.word	0x40000400
 8001320:	40000800 	.word	0x40000800
 8001324:	40010000 	.word	0x40010000

08001328 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB8   ------> S_TIM10_CH1
*/
void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a56      	ldr	r2, [pc, #344]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <MX_GPIO_Init+0x178>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <MX_GPIO_Init+0x178>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <MX_GPIO_Init+0x178>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a41      	ldr	r2, [pc, #260]	; (80014a0 <MX_GPIO_Init+0x178>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <MX_GPIO_Init+0x178>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|DIR_M4_Pin|MAX485_CONTROL_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f241 1101 	movw	r1, #4353	; 0x1101
 80013b4:	483b      	ldr	r0, [pc, #236]	; (80014a4 <MX_GPIO_Init+0x17c>)
 80013b6:	f003 ffdd 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|DIR_M1_Pin|DIR_M2_Pin|DIR_M3_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80013c0:	4839      	ldr	r0, [pc, #228]	; (80014a8 <MX_GPIO_Init+0x180>)
 80013c2:	f003 ffd7 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SPI2_SS_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2103      	movs	r1, #3
 80013ca:	4838      	ldr	r0, [pc, #224]	; (80014ac <MX_GPIO_Init+0x184>)
 80013cc:	f003 ffd2 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	482f      	ldr	r0, [pc, #188]	; (80014a4 <MX_GPIO_Init+0x17c>)
 80013e8:	f003 fe18 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|DIR_M4_Pin|MAX485_CONTROL_Pin;
 80013ec:	f241 1301 	movw	r3, #4353	; 0x1101
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001406:	f003 fe09 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Limit_M1_Pin|SW_Pin|Limit_M3_Pin|Limit_M2_Pin;
 800140a:	2336      	movs	r3, #54	; 0x36
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4821      	ldr	r0, [pc, #132]	; (80014a4 <MX_GPIO_Init+0x17c>)
 800141e:	f003 fdfd 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Current_sensor_Pin;
 8001422:	2308      	movs	r3, #8
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	481b      	ldr	r0, [pc, #108]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001436:	f003 fdf1 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|DIR_M1_Pin|DIR_M2_Pin|DIR_M3_Pin;
 800143a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4815      	ldr	r0, [pc, #84]	; (80014a8 <MX_GPIO_Init+0x180>)
 8001454:	f003 fde2 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|SPI2_SS_Pin;
 8001458:	2303      	movs	r3, #3
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	480f      	ldr	r0, [pc, #60]	; (80014ac <MX_GPIO_Init+0x184>)
 8001470:	f003 fdd4 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = servo_Pin;
 8001474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001486:	2303      	movs	r3, #3
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_GPIO_Init+0x184>)
 8001492:	f003 fdc3 	bl	800501c <HAL_GPIO_Init>

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400

080014b0 <HAL_UART_RxCpltCallback>:

// ##############################################################   Aon  Create Function Interrupt   #######################//


// ##############################################################   Klui Create Function Interrupt   #######################//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	uart_flag = 1;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_UART_RxCpltCallback+0x30>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
	memcpy(package,RX_Buffer,12);
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_UART_RxCpltCallback+0x34>)
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_UART_RxCpltCallback+0x38>)
 80014c2:	4614      	mov	r4, r2
 80014c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014c6:	6020      	str	r0, [r4, #0]
 80014c8:	6061      	str	r1, [r4, #4]
 80014ca:	60a2      	str	r2, [r4, #8]
	HAL_UART_Receive_IT(&huart2, RX_Buffer, 12);
 80014cc:	220c      	movs	r2, #12
 80014ce:	4906      	ldr	r1, [pc, #24]	; (80014e8 <HAL_UART_RxCpltCallback+0x38>)
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_UART_RxCpltCallback+0x3c>)
 80014d2:	f006 f8ee 	bl	80076b2 <HAL_UART_Receive_IT>
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001b8 	.word	0x200001b8
 80014e4:	2000036c 	.word	0x2000036c
 80014e8:	200000d4 	.word	0x200000d4
 80014ec:	20000668 	.word	0x20000668

080014f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
// #################################   Aon  Call Timer Interrupt   ################################# //

// #################################   Klui Call Timer Interrupt   ################################# //
  if (htim == &htim6 )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  control_flag = 1;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000054c 	.word	0x2000054c
 8001518:	20000324 	.word	0x20000324

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001522:	f003 fb41 	bl	8004ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001526:	f000 f903 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152a:	f7ff fefd 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800152e:	f003 fa37 	bl	80049a0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001532:	f002 fd15 	bl	8003f60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001536:	f002 fdb3 	bl	80040a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800153a:	f002 fe27 	bl	800418c <MX_TIM3_Init>
  MX_TIM4_Init();
 800153e:	f002 fe9b 	bl	8004278 <MX_TIM4_Init>
  MX_SPI2_Init();
 8001542:	f002 fc09 	bl	8003d58 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001546:	f003 fa55 	bl	80049f4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800154a:	f002 ff5f 	bl	800440c <MX_TIM6_Init>
  MX_TIM8_Init();
 800154e:	f002 ff93 	bl	8004478 <MX_TIM8_Init>
  MX_TIM5_Init();
 8001552:	f002 ff07 	bl	8004364 <MX_TIM5_Init>
  MX_TIM11_Init();
 8001556:	f002 ffe7 	bl	8004528 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  // #################################################################   Aon  Initialize   ################//
  Motor_Initialize(&motor1, &htim3, TIM_CHANNEL_1, DIR_M1_GPIO_Port, DIR_M1_Pin, 15, 150); //M1
 800155a:	2396      	movs	r3, #150	; 0x96
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	230f      	movs	r3, #15
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2320      	movs	r3, #32
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <main+0x198>)
 8001568:	2200      	movs	r2, #0
 800156a:	4953      	ldr	r1, [pc, #332]	; (80016b8 <main+0x19c>)
 800156c:	4853      	ldr	r0, [pc, #332]	; (80016bc <main+0x1a0>)
 800156e:	f7ff fd77 	bl	8001060 <Motor_Initialize>
  Motor_Initialize(&motor2, &htim4, TIM_CHANNEL_1, DIR_M2_GPIO_Port, DIR_M2_Pin, 5, 1300); //M2
 8001572:	f240 5314 	movw	r3, #1300	; 0x514
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	2305      	movs	r3, #5
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <main+0x198>)
 8001582:	2200      	movs	r2, #0
 8001584:	494e      	ldr	r1, [pc, #312]	; (80016c0 <main+0x1a4>)
 8001586:	484f      	ldr	r0, [pc, #316]	; (80016c4 <main+0x1a8>)
 8001588:	f7ff fd6a 	bl	8001060 <Motor_Initialize>
  Motor_Initialize(&motor3, &htim2, TIM_CHANNEL_3, DIR_M3_GPIO_Port, DIR_M3_Pin, 0, 700); //M3
 800158c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001590:	9302      	str	r3, [sp, #8]
 8001592:	2300      	movs	r3, #0
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <main+0x198>)
 800159e:	2208      	movs	r2, #8
 80015a0:	4949      	ldr	r1, [pc, #292]	; (80016c8 <main+0x1ac>)
 80015a2:	484a      	ldr	r0, [pc, #296]	; (80016cc <main+0x1b0>)
 80015a4:	f7ff fd5c 	bl	8001060 <Motor_Initialize>
  Motor_Initialize(&motor4, &htim1, TIM_CHANNEL_2, DIR_M4_GPIO_Port, DIR_M4_Pin, 10, 500); //M4
 80015a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	230a      	movs	r3, #10
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <main+0x1b4>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	4945      	ldr	r1, [pc, #276]	; (80016d4 <main+0x1b8>)
 80015be:	4846      	ldr	r0, [pc, #280]	; (80016d8 <main+0x1bc>)
 80015c0:	f7ff fd4e 	bl	8001060 <Motor_Initialize>
//  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);

  // #################################################################   Klui Initialize   ################//
  HAL_TIM_Base_Start_IT(&htim6);
 80015c4:	4845      	ldr	r0, [pc, #276]	; (80016dc <main+0x1c0>)
 80015c6:	f004 fd81 	bl	80060cc <HAL_TIM_Base_Start_IT>

  AMT21_initialize(&encoder_3, &huart3, 0x34, MAX485_CONTROL_GPIO_Port, MAX485_CONTROL_Pin);
 80015ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <main+0x1b4>)
 80015d2:	2234      	movs	r2, #52	; 0x34
 80015d4:	4942      	ldr	r1, [pc, #264]	; (80016e0 <main+0x1c4>)
 80015d6:	4843      	ldr	r0, [pc, #268]	; (80016e4 <main+0x1c8>)
 80015d8:	f7ff fc76 	bl	8000ec8 <AMT21_initialize>
  AMT21_initialize(&encoder_4, &huart3, 0x04, MAX485_CONTROL_GPIO_Port, MAX485_CONTROL_Pin);
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <main+0x1b4>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	493e      	ldr	r1, [pc, #248]	; (80016e0 <main+0x1c4>)
 80015e8:	483f      	ldr	r0, [pc, #252]	; (80016e8 <main+0x1cc>)
 80015ea:	f7ff fc6d 	bl	8000ec8 <AMT21_initialize>

  HAL_UART_Receive_IT(&huart2, RX_Buffer, 12);
 80015ee:	220c      	movs	r2, #12
 80015f0:	493e      	ldr	r1, [pc, #248]	; (80016ec <main+0x1d0>)
 80015f2:	483f      	ldr	r0, [pc, #252]	; (80016f0 <main+0x1d4>)
 80015f4:	f006 f85d 	bl	80076b2 <HAL_UART_Receive_IT>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80015f8:	213c      	movs	r1, #60	; 0x3c
 80015fa:	483e      	ldr	r0, [pc, #248]	; (80016f4 <main+0x1d8>)
 80015fc:	f004 ff9e 	bl	800653c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001600:	213c      	movs	r1, #60	; 0x3c
 8001602:	483d      	ldr	r0, [pc, #244]	; (80016f8 <main+0x1dc>)
 8001604:	f004 ff9a 	bl	800653c <HAL_TIM_Encoder_Start>
  TIM5->CNT = 100; //en1 init
 8001608:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <main+0x1e0>)
 800160a:	2264      	movs	r2, #100	; 0x64
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM8->CNT = 1000; //en2 init
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <main+0x1e4>)
 8001610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
//  Drive_Motor(&motor1, 0);
//  Drive_Motor(&motor2, 0);
//  HAL_Delay(500);

// #########################   Klui  Variable   #########################//
  setHome();
 8001616:	f000 f8fd 	bl	8001814 <setHome>
//  Enc3_Pos = 0;
//  Enc4_Pos = 0;
  read_encoder();
 800161a:	f001 fddb 	bl	80031d4 <read_encoder>
  //init position
  q1 = -M_PI/2; //rad
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <main+0x1e8>)
 8001620:	4a39      	ldr	r2, [pc, #228]	; (8001708 <main+0x1ec>)
 8001622:	601a      	str	r2, [r3, #0]
  q2=0; //mm
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <main+0x1f0>)
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
  q3=(3*M_PI)/4; //rad
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <main+0x1f4>)
 800162e:	4a39      	ldr	r2, [pc, #228]	; (8001714 <main+0x1f8>)
 8001630:	601a      	str	r2, [r3, #0]
  q4=0; //rad
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <main+0x1fc>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
  enc2positionUnit();
 800163a:	f002 fafd 	bl	8003c38 <enc2positionUnit>
  for(int i = 0;i<=4;i++){
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	e00c      	b.n	800165e <main+0x142>
	  rpos_old[i]=rpos[i];
 8001644:	4a35      	ldr	r2, [pc, #212]	; (800171c <main+0x200>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4934      	ldr	r1, [pc, #208]	; (8001720 <main+0x204>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	601a      	str	r2, [r3, #0]
  for(int i = 0;i<=4;i++){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b04      	cmp	r3, #4
 8001662:	ddef      	ble.n	8001644 <main+0x128>
  }
  read_encoder_flag=0;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <main+0x208>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
//	  if (!HAL_GPIO_ReadPin(Limit_M2_GPIO_Port, Limit_M2_Pin)) {
//	  		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	  	  }

// #########################   Klui  #########################//
	  if (control_flag==1) {
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <main+0x20c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d115      	bne.n	800169e <main+0x182>
//		  package_state(&state_check,package,sizeof(package));
		  main_state();
 8001672:	f000 fa21 	bl	8001ab8 <main_state>
		  if(read_encoder_flag==0){
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <main+0x208>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <main+0x16e>
			  read_encoder();
 800167e:	f001 fda9 	bl	80031d4 <read_encoder>
			  read_encoder_flag=1;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <main+0x208>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e004      	b.n	8001694 <main+0x178>
		  }else{
			  read_encoder2();
 800168a:	f001 fdd3 	bl	8003234 <read_encoder2>
			  read_encoder_flag=0;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <main+0x208>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		  }
		  update_q();
 8001694:	f002 fa66 	bl	8003b64 <update_q>
		  control_flag = 0;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <main+0x20c>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	  }
	  if (uart_flag == 1) {
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <main+0x210>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d1e1      	bne.n	800166a <main+0x14e>
		  CheckState();
 80016a6:	f000 f9af 	bl	8001a08 <CheckState>
//		  if(state_check!=0){
//			  HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
//			  state_check=0;
//		  }
		  uart_flag = 0;
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <main+0x210>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
	  if (control_flag==1) {
 80016b0:	e7db      	b.n	800166a <main+0x14e>
 80016b2:	bf00      	nop
 80016b4:	40020000 	.word	0x40020000
 80016b8:	200004bc 	.word	0x200004bc
 80016bc:	200002fc 	.word	0x200002fc
 80016c0:	2000042c 	.word	0x2000042c
 80016c4:	2000016c 	.word	0x2000016c
 80016c8:	200005dc 	.word	0x200005dc
 80016cc:	20000350 	.word	0x20000350
 80016d0:	40020800 	.word	0x40020800
 80016d4:	20000594 	.word	0x20000594
 80016d8:	200002a8 	.word	0x200002a8
 80016dc:	2000054c 	.word	0x2000054c
 80016e0:	20000624 	.word	0x20000624
 80016e4:	20000158 	.word	0x20000158
 80016e8:	200001f0 	.word	0x200001f0
 80016ec:	200000d4 	.word	0x200000d4
 80016f0:	20000668 	.word	0x20000668
 80016f4:	20000474 	.word	0x20000474
 80016f8:	200003e4 	.word	0x200003e4
 80016fc:	40000c00 	.word	0x40000c00
 8001700:	40010400 	.word	0x40010400
 8001704:	200002dc 	.word	0x200002dc
 8001708:	bfc90fdb 	.word	0xbfc90fdb
 800170c:	200001e8 	.word	0x200001e8
 8001710:	200002d4 	.word	0x200002d4
 8001714:	4016cbe4 	.word	0x4016cbe4
 8001718:	20000378 	.word	0x20000378
 800171c:	2000033c 	.word	0x2000033c
 8001720:	200001bc 	.word	0x200001bc
 8001724:	200002f0 	.word	0x200002f0
 8001728:	20000324 	.word	0x20000324
 800172c:	200001b8 	.word	0x200001b8

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	2234      	movs	r2, #52	; 0x34
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f006 feca 	bl	80084d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4b2c      	ldr	r3, [pc, #176]	; (800180c <SystemClock_Config+0xdc>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a2b      	ldr	r2, [pc, #172]	; (800180c <SystemClock_Config+0xdc>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <SystemClock_Config+0xdc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <SystemClock_Config+0xe0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a25      	ldr	r2, [pc, #148]	; (8001810 <SystemClock_Config+0xe0>)
 800177a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <SystemClock_Config+0xe0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178c:	2302      	movs	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001794:	2310      	movs	r3, #16
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001798:	2302      	movs	r3, #2
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017a0:	2308      	movs	r3, #8
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017a4:	23b4      	movs	r3, #180	; 0xb4
 80017a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 f911 	bl	80059e0 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017c4:	f002 fac2 	bl	8003d4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017c8:	f003 fdee 	bl	80053a8 <HAL_PWREx_EnableOverDrive>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017d2:	f002 fabb 	bl	8003d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	230f      	movs	r3, #15
 80017d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2105      	movs	r1, #5
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fe27 	bl	8005448 <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001800:	f002 faa4 	bl	8003d4c <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3750      	adds	r7, #80	; 0x50
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <setHome>:

/* USER CODE BEGIN 4 */

// #########################   Aon   #########################//
void setHome (void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	while(1){
		if (control_flag==1) {
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <setHome+0x18c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d1fb      	bne.n	8001818 <setHome+0x4>
			if(read_encoder_flag==0){
 8001820:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <setHome+0x190>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <setHome+0x20>
				read_encoder();
 8001828:	f001 fcd4 	bl	80031d4 <read_encoder>
				read_encoder_flag=1;
 800182c:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <setHome+0x190>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e004      	b.n	800183e <setHome+0x2a>
			}else{
				read_encoder2();
 8001834:	f001 fcfe 	bl	8003234 <read_encoder2>
				read_encoder_flag=0;
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <setHome+0x190>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(Limit_M1_GPIO_Port, Limit_M1_Pin) &&
 800183e:	2102      	movs	r1, #2
 8001840:	4859      	ldr	r0, [pc, #356]	; (80019a8 <setHome+0x194>)
 8001842:	f003 fd7f 	bl	8005344 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d036      	beq.n	80018ba <setHome+0xa6>
				HAL_GPIO_ReadPin(Limit_M2_GPIO_Port, Limit_M2_Pin) &&
 800184c:	2120      	movs	r1, #32
 800184e:	4856      	ldr	r0, [pc, #344]	; (80019a8 <setHome+0x194>)
 8001850:	f003 fd78 	bl	8005344 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
			if (HAL_GPIO_ReadPin(Limit_M1_GPIO_Port, Limit_M1_Pin) &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d02f      	beq.n	80018ba <setHome+0xa6>
				(Enc3_Pos >= 3498 && Enc3_Pos <= 3502) &&
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <setHome+0x198>)
 800185c:	881b      	ldrh	r3, [r3, #0]
				HAL_GPIO_ReadPin(Limit_M2_GPIO_Port, Limit_M2_Pin) &&
 800185e:	f640 52a9 	movw	r2, #3497	; 0xda9
 8001862:	4293      	cmp	r3, r2
 8001864:	d929      	bls.n	80018ba <setHome+0xa6>
				(Enc3_Pos >= 3498 && Enc3_Pos <= 3502) &&
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <setHome+0x198>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f640 52ae 	movw	r2, #3502	; 0xdae
 800186e:	4293      	cmp	r3, r2
 8001870:	d823      	bhi.n	80018ba <setHome+0xa6>
				( Enc4_Pos >= 1387 && Enc4_Pos <= 1393)) {
 8001872:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <setHome+0x19c>)
 8001874:	881b      	ldrh	r3, [r3, #0]
				(Enc3_Pos >= 3498 && Enc3_Pos <= 3502) &&
 8001876:	f240 526a 	movw	r2, #1386	; 0x56a
 800187a:	4293      	cmp	r3, r2
 800187c:	d91d      	bls.n	80018ba <setHome+0xa6>
				( Enc4_Pos >= 1387 && Enc4_Pos <= 1393)) {
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <setHome+0x19c>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	f240 5271 	movw	r2, #1393	; 0x571
 8001886:	4293      	cmp	r3, r2
 8001888:	d817      	bhi.n	80018ba <setHome+0xa6>
				Drive_Motor(&motor1, 0);
 800188a:	2100      	movs	r1, #0
 800188c:	4849      	ldr	r0, [pc, #292]	; (80019b4 <setHome+0x1a0>)
 800188e:	f7ff fc2b 	bl	80010e8 <Drive_Motor>
				Drive_Motor(&motor2, 0);
 8001892:	2100      	movs	r1, #0
 8001894:	4848      	ldr	r0, [pc, #288]	; (80019b8 <setHome+0x1a4>)
 8001896:	f7ff fc27 	bl	80010e8 <Drive_Motor>
				Drive_Motor(&motor3, 0);
 800189a:	2100      	movs	r1, #0
 800189c:	4847      	ldr	r0, [pc, #284]	; (80019bc <setHome+0x1a8>)
 800189e:	f7ff fc23 	bl	80010e8 <Drive_Motor>
				Drive_Motor(&motor4, 0);
 80018a2:	2100      	movs	r1, #0
 80018a4:	4846      	ldr	r0, [pc, #280]	; (80019c0 <setHome+0x1ac>)
 80018a6:	f7ff fc1f 	bl	80010e8 <Drive_Motor>
				TIM5->CNT = 100;
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <setHome+0x1b0>)
 80018ac:	2264      	movs	r2, #100	; 0x64
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
				TIM8->CNT = 1000;
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <setHome+0x1b4>)
 80018b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80018b8:	e06f      	b.n	800199a <setHome+0x186>
			}
			if ( Enc3_Pos >= 3497 && Enc3_Pos <= 3503) {
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <setHome+0x198>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f640 52a8 	movw	r2, #3496	; 0xda8
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d909      	bls.n	80018da <setHome+0xc6>
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <setHome+0x198>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	f5b3 6f5b 	cmp.w	r3, #3504	; 0xdb0
 80018ce:	d204      	bcs.n	80018da <setHome+0xc6>
				Drive_Motor(&motor3, 0);
 80018d0:	2100      	movs	r1, #0
 80018d2:	483a      	ldr	r0, [pc, #232]	; (80019bc <setHome+0x1a8>)
 80018d4:	f7ff fc08 	bl	80010e8 <Drive_Motor>
 80018d8:	e014      	b.n	8001904 <setHome+0xf0>
			}
			else if (Enc3_Pos > 3503) {
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <setHome+0x198>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	f5b3 6f5b 	cmp.w	r3, #3504	; 0xdb0
 80018e2:	d304      	bcc.n	80018ee <setHome+0xda>
				Drive_Motor(&motor3, 55);
 80018e4:	2137      	movs	r1, #55	; 0x37
 80018e6:	4835      	ldr	r0, [pc, #212]	; (80019bc <setHome+0x1a8>)
 80018e8:	f7ff fbfe 	bl	80010e8 <Drive_Motor>
 80018ec:	e00a      	b.n	8001904 <setHome+0xf0>
			}
			else if (Enc3_Pos < 3497) {
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <setHome+0x198>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	f640 52a8 	movw	r2, #3496	; 0xda8
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d804      	bhi.n	8001904 <setHome+0xf0>
				Drive_Motor(&motor3, -55);
 80018fa:	f06f 0136 	mvn.w	r1, #54	; 0x36
 80018fe:	482f      	ldr	r0, [pc, #188]	; (80019bc <setHome+0x1a8>)
 8001900:	f7ff fbf2 	bl	80010e8 <Drive_Motor>
			}
			if ( Enc4_Pos >= 1387 && Enc4_Pos <= 1393) {
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <setHome+0x19c>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	f240 526a 	movw	r2, #1386	; 0x56a
 800190c:	4293      	cmp	r3, r2
 800190e:	d90a      	bls.n	8001926 <setHome+0x112>
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <setHome+0x19c>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f240 5271 	movw	r2, #1393	; 0x571
 8001918:	4293      	cmp	r3, r2
 800191a:	d804      	bhi.n	8001926 <setHome+0x112>
				Drive_Motor(&motor4, 0);
 800191c:	2100      	movs	r1, #0
 800191e:	4828      	ldr	r0, [pc, #160]	; (80019c0 <setHome+0x1ac>)
 8001920:	f7ff fbe2 	bl	80010e8 <Drive_Motor>
 8001924:	e015      	b.n	8001952 <setHome+0x13e>
			}
			else if (Enc4_Pos > 1393) {
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <setHome+0x19c>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	f240 5271 	movw	r2, #1393	; 0x571
 800192e:	4293      	cmp	r3, r2
 8001930:	d904      	bls.n	800193c <setHome+0x128>
				Drive_Motor(&motor4, 40);
 8001932:	2128      	movs	r1, #40	; 0x28
 8001934:	4822      	ldr	r0, [pc, #136]	; (80019c0 <setHome+0x1ac>)
 8001936:	f7ff fbd7 	bl	80010e8 <Drive_Motor>
 800193a:	e00a      	b.n	8001952 <setHome+0x13e>
			}
			else if (Enc4_Pos < 1387) {
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <setHome+0x19c>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	f240 526a 	movw	r2, #1386	; 0x56a
 8001944:	4293      	cmp	r3, r2
 8001946:	d804      	bhi.n	8001952 <setHome+0x13e>
				Drive_Motor(&motor4, -40);
 8001948:	f06f 0127 	mvn.w	r1, #39	; 0x27
 800194c:	481c      	ldr	r0, [pc, #112]	; (80019c0 <setHome+0x1ac>)
 800194e:	f7ff fbcb 	bl	80010e8 <Drive_Motor>
			}
			if (!HAL_GPIO_ReadPin(Limit_M1_GPIO_Port, Limit_M1_Pin)) {
 8001952:	2102      	movs	r1, #2
 8001954:	4814      	ldr	r0, [pc, #80]	; (80019a8 <setHome+0x194>)
 8001956:	f003 fcf5 	bl	8005344 <HAL_GPIO_ReadPin>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <setHome+0x156>
				Drive_Motor(&motor1, 70);
 8001960:	2146      	movs	r1, #70	; 0x46
 8001962:	4814      	ldr	r0, [pc, #80]	; (80019b4 <setHome+0x1a0>)
 8001964:	f7ff fbc0 	bl	80010e8 <Drive_Motor>
 8001968:	e003      	b.n	8001972 <setHome+0x15e>
			}
			else Drive_Motor(&motor1, 0);
 800196a:	2100      	movs	r1, #0
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <setHome+0x1a0>)
 800196e:	f7ff fbbb 	bl	80010e8 <Drive_Motor>
			if (!HAL_GPIO_ReadPin(Limit_M2_GPIO_Port, Limit_M2_Pin)) {
 8001972:	2120      	movs	r1, #32
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <setHome+0x194>)
 8001976:	f003 fce5 	bl	8005344 <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d104      	bne.n	800198a <setHome+0x176>
				Drive_Motor(&motor2, -1200);
 8001980:	4912      	ldr	r1, [pc, #72]	; (80019cc <setHome+0x1b8>)
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <setHome+0x1a4>)
 8001984:	f7ff fbb0 	bl	80010e8 <Drive_Motor>
 8001988:	e003      	b.n	8001992 <setHome+0x17e>
			}
			else Drive_Motor(&motor2, 0);
 800198a:	2100      	movs	r1, #0
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <setHome+0x1a4>)
 800198e:	f7ff fbab 	bl	80010e8 <Drive_Motor>
			control_flag = 0;
 8001992:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <setHome+0x18c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
		if (control_flag==1) {
 8001998:	e73e      	b.n	8001818 <setHome+0x4>
		}
	}
//	HAL_Delay(1000);
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000324 	.word	0x20000324
 80019a4:	200002f0 	.word	0x200002f0
 80019a8:	40020800 	.word	0x40020800
 80019ac:	20000208 	.word	0x20000208
 80019b0:	20000180 	.word	0x20000180
 80019b4:	200002fc 	.word	0x200002fc
 80019b8:	2000016c 	.word	0x2000016c
 80019bc:	20000350 	.word	0x20000350
 80019c0:	200002a8 	.word	0x200002a8
 80019c4:	40000c00 	.word	0x40000c00
 80019c8:	40010400 	.word	0x40010400
 80019cc:	fffffb50 	.word	0xfffffb50

080019d0 <Servo_Open>:

void Servo_Open () {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	TIM10->CCR1 = 205; //
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <Servo_Open+0x18>)
 80019d6:	22cd      	movs	r2, #205	; 0xcd
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80019da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019de:	f003 f955 	bl	8004c8c <HAL_Delay>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40014400 	.word	0x40014400

080019ec <Servo_Close>:

void Servo_Close () {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	TIM10->CCR1 = 165; //keep
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <Servo_Close+0x18>)
 80019f2:	22a5      	movs	r2, #165	; 0xa5
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80019f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019fa:	f003 f947 	bl	8004c8c <HAL_Delay>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40014400 	.word	0x40014400

08001a08 <CheckState>:

// #########################   Klui  #########################//
void CheckState(void) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
    for (int i = 1; i<12-1; i++) {
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e00c      	b.n	8001a2e <CheckState+0x26>
        sum_package += package[i];
 8001a14:	4a25      	ldr	r2, [pc, #148]	; (8001aac <CheckState+0xa4>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <CheckState+0xa8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <CheckState+0xa8>)
 8001a26:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i<12-1; i++) {
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b0a      	cmp	r3, #10
 8001a32:	ddef      	ble.n	8001a14 <CheckState+0xc>
    }
    if (package[0] == 255) { //header
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <CheckState+0xa4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2bff      	cmp	r3, #255	; 0xff
 8001a3a:	d11f      	bne.n	8001a7c <CheckState+0x74>
        if (package[11] == sum_package) { //checksum
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <CheckState+0xa4>)
 8001a3e:	7ada      	ldrb	r2, [r3, #11]
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <CheckState+0xa8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <CheckState+0x50>
            state_check = package[2];
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <CheckState+0xa4>)
 8001a4a:	789a      	ldrb	r2, [r3, #2]
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <CheckState+0xac>)
 8001a4e:	701a      	strb	r2, [r3, #0]
            sum_package = 0;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <CheckState+0xa8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
			package[i] = 0;
		}
    	sum_package = 0;
    }
    //memcpy(package,pack,size);
}
 8001a56:	e022      	b.n	8001a9e <CheckState+0x96>
        	for (int i = 0; i<12; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	e007      	b.n	8001a6e <CheckState+0x66>
				package[i] = 0;
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <CheckState+0xa4>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
        	for (int i = 0; i<12; i++) {
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b0b      	cmp	r3, #11
 8001a72:	ddf4      	ble.n	8001a5e <CheckState+0x56>
        	sum_package = 0;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <CheckState+0xa8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
}
 8001a7a:	e010      	b.n	8001a9e <CheckState+0x96>
    	for (int i = 0; i<12; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	e007      	b.n	8001a92 <CheckState+0x8a>
			package[i] = 0;
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <CheckState+0xa4>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i<12; i++) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0b      	cmp	r3, #11
 8001a96:	ddf4      	ble.n	8001a82 <CheckState+0x7a>
    	sum_package = 0;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <CheckState+0xa8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000036c 	.word	0x2000036c
 8001ab0:	200000e1 	.word	0x200000e1
 8001ab4:	200000e0 	.word	0x200000e0

08001ab8 <main_state>:

void main_state(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
	//state_check > 1
	if (state_check == 1){
 8001abe:	4b92      	ldr	r3, [pc, #584]	; (8001d08 <main_state+0x250>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10b      	bne.n	8001ade <main_state+0x26>
		jogging();
 8001ac6:	f000 f98d 	bl	8001de4 <jogging>
		HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	2204      	movs	r2, #4
 8001ace:	498f      	ldr	r1, [pc, #572]	; (8001d0c <main_state+0x254>)
 8001ad0:	488f      	ldr	r0, [pc, #572]	; (8001d10 <main_state+0x258>)
 8001ad2:	f005 fcba 	bl	800744a <HAL_UART_Transmit>
		state_check = 0;
 8001ad6:	4b8c      	ldr	r3, [pc, #560]	; (8001d08 <main_state+0x250>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
		state_check = 8;
	}
	else if (state_check == 8){
		runz();
	}
}
 8001adc:	e174      	b.n	8001dc8 <main_state+0x310>
	else if (state_check == 2){
 8001ade:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <main_state+0x250>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d153      	bne.n	8001b8e <main_state+0xd6>
		read_position_ref();
 8001ae6:	f000 fa2b 	bl	8001f40 <read_position_ref>
		IK();
 8001aea:	f001 fa31 	bl	8002f50 <IK>
		p_start[0]=q1;
 8001aee:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <main_state+0x25c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a89      	ldr	r2, [pc, #548]	; (8001d18 <main_state+0x260>)
 8001af4:	6013      	str	r3, [r2, #0]
		p_start[1]=q2;
 8001af6:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <main_state+0x264>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a87      	ldr	r2, [pc, #540]	; (8001d18 <main_state+0x260>)
 8001afc:	6053      	str	r3, [r2, #4]
		p_start[2]=q3;
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <main_state+0x268>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a85      	ldr	r2, [pc, #532]	; (8001d18 <main_state+0x260>)
 8001b04:	6093      	str	r3, [r2, #8]
		p_start[3]=q4;
 8001b06:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <main_state+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a83      	ldr	r2, [pc, #524]	; (8001d18 <main_state+0x260>)
 8001b0c:	60d3      	str	r3, [r2, #12]
		p_final[0]=q1_ref;
 8001b0e:	4b86      	ldr	r3, [pc, #536]	; (8001d28 <main_state+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a86      	ldr	r2, [pc, #536]	; (8001d2c <main_state+0x274>)
 8001b14:	6013      	str	r3, [r2, #0]
		p_final[1]=q2_ref;
 8001b16:	4b86      	ldr	r3, [pc, #536]	; (8001d30 <main_state+0x278>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a84      	ldr	r2, [pc, #528]	; (8001d2c <main_state+0x274>)
 8001b1c:	6053      	str	r3, [r2, #4]
		p_final[2]=q3_ref;
 8001b1e:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <main_state+0x27c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a82      	ldr	r2, [pc, #520]	; (8001d2c <main_state+0x274>)
 8001b24:	6093      	str	r3, [r2, #8]
		p_final[3]=q4_ref;
 8001b26:	4b84      	ldr	r3, [pc, #528]	; (8001d38 <main_state+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a80      	ldr	r2, [pc, #512]	; (8001d2c <main_state+0x274>)
 8001b2c:	60d3      	str	r3, [r2, #12]
		for(int i=0;i<4;i++){
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e01e      	b.n	8001b72 <main_state+0xba>
			v_start[i]=0;
 8001b34:	4a81      	ldr	r2, [pc, #516]	; (8001d3c <main_state+0x284>)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
			v_final[i]=0;
 8001b42:	4a7f      	ldr	r2, [pc, #508]	; (8001d40 <main_state+0x288>)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
			a_start[i]=0;
 8001b50:	4a7c      	ldr	r2, [pc, #496]	; (8001d44 <main_state+0x28c>)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
			a_final[i]=0;
 8001b5e:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <main_state+0x290>)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
		for(int i=0;i<4;i++){
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	dddd      	ble.n	8001b34 <main_state+0x7c>
		traj_gen(timetraj);
 8001b78:	4b74      	ldr	r3, [pc, #464]	; (8001d4c <main_state+0x294>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	f000 faf5 	bl	8002170 <traj_gen>
		state_check = 4;
 8001b86:	4b60      	ldr	r3, [pc, #384]	; (8001d08 <main_state+0x250>)
 8001b88:	2204      	movs	r2, #4
 8001b8a:	701a      	strb	r2, [r3, #0]
}
 8001b8c:	e11c      	b.n	8001dc8 <main_state+0x310>
	else if (state_check == 3){
 8001b8e:	4b5e      	ldr	r3, [pc, #376]	; (8001d08 <main_state+0x250>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d151      	bne.n	8001c3a <main_state+0x182>
		read_joint_ref();
 8001b96:	f000 fa6f 	bl	8002078 <read_joint_ref>
		p_start[0]=q1;
 8001b9a:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <main_state+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	; (8001d18 <main_state+0x260>)
 8001ba0:	6013      	str	r3, [r2, #0]
		p_start[1]=q2;
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <main_state+0x264>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5c      	ldr	r2, [pc, #368]	; (8001d18 <main_state+0x260>)
 8001ba8:	6053      	str	r3, [r2, #4]
		p_start[2]=q3;
 8001baa:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <main_state+0x268>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5a      	ldr	r2, [pc, #360]	; (8001d18 <main_state+0x260>)
 8001bb0:	6093      	str	r3, [r2, #8]
		p_start[3]=q4;
 8001bb2:	4b5c      	ldr	r3, [pc, #368]	; (8001d24 <main_state+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <main_state+0x260>)
 8001bb8:	60d3      	str	r3, [r2, #12]
		p_final[0]=q1_ref;
 8001bba:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <main_state+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	; (8001d2c <main_state+0x274>)
 8001bc0:	6013      	str	r3, [r2, #0]
		p_final[1]=q2_ref;
 8001bc2:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <main_state+0x278>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a59      	ldr	r2, [pc, #356]	; (8001d2c <main_state+0x274>)
 8001bc8:	6053      	str	r3, [r2, #4]
		p_final[2]=q3_ref;
 8001bca:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <main_state+0x27c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a57      	ldr	r2, [pc, #348]	; (8001d2c <main_state+0x274>)
 8001bd0:	6093      	str	r3, [r2, #8]
		p_final[3]=q4_ref;
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <main_state+0x280>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <main_state+0x274>)
 8001bd8:	60d3      	str	r3, [r2, #12]
		for(int i=0;i<4;i++){
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	e01e      	b.n	8001c1e <main_state+0x166>
			v_start[i]=0;
 8001be0:	4a56      	ldr	r2, [pc, #344]	; (8001d3c <main_state+0x284>)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
			v_final[i]=0;
 8001bee:	4a54      	ldr	r2, [pc, #336]	; (8001d40 <main_state+0x288>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
			a_start[i]=0;
 8001bfc:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <main_state+0x28c>)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
			a_final[i]=0;
 8001c0a:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <main_state+0x290>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
		for(int i=0;i<4;i++){
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	dddd      	ble.n	8001be0 <main_state+0x128>
		traj_gen(timetraj);
 8001c24:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <main_state+0x294>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	f000 fa9f 	bl	8002170 <traj_gen>
		state_check = 4;
 8001c32:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <main_state+0x250>)
 8001c34:	2204      	movs	r2, #4
 8001c36:	701a      	strb	r2, [r3, #0]
}
 8001c38:	e0c6      	b.n	8001dc8 <main_state+0x310>
	else if (state_check == 4){
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <main_state+0x250>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d102      	bne.n	8001c48 <main_state+0x190>
		run();
 8001c42:	f000 ff81 	bl	8002b48 <run>
}
 8001c46:	e0bf      	b.n	8001dc8 <main_state+0x310>
	else if (state_check == 5){
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <main_state+0x250>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d131      	bne.n	8001cb4 <main_state+0x1fc>
		setHome();
 8001c50:	f7ff fde0 	bl	8001814 <setHome>
		HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
 8001c54:	2364      	movs	r3, #100	; 0x64
 8001c56:	2204      	movs	r2, #4
 8001c58:	492c      	ldr	r1, [pc, #176]	; (8001d0c <main_state+0x254>)
 8001c5a:	482d      	ldr	r0, [pc, #180]	; (8001d10 <main_state+0x258>)
 8001c5c:	f005 fbf5 	bl	800744a <HAL_UART_Transmit>
		state_check = 0;
 8001c60:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <main_state+0x250>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
		q1 = -M_PI/2; //rad
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <main_state+0x25c>)
 8001c68:	4a39      	ldr	r2, [pc, #228]	; (8001d50 <main_state+0x298>)
 8001c6a:	601a      	str	r2, [r3, #0]
		q2=0; //mm
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <main_state+0x264>)
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
		q3=(3*M_PI)/4; //rad
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <main_state+0x268>)
 8001c76:	4a37      	ldr	r2, [pc, #220]	; (8001d54 <main_state+0x29c>)
 8001c78:	601a      	str	r2, [r3, #0]
		q4=0; //rad
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <main_state+0x26c>)
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
		enc2positionUnit();
 8001c82:	f001 ffd9 	bl	8003c38 <enc2positionUnit>
		for(int i = 0;i<=4;i++){
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	e00c      	b.n	8001ca6 <main_state+0x1ee>
		  rpos_old[i]=rpos[i];
 8001c8c:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <main_state+0x2a0>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4931      	ldr	r1, [pc, #196]	; (8001d5c <main_state+0x2a4>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	601a      	str	r2, [r3, #0]
		for(int i = 0;i<=4;i++){
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	ddef      	ble.n	8001c8c <main_state+0x1d4>
		read_encoder_flag=0;
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <main_state+0x2a8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	e089      	b.n	8001dc8 <main_state+0x310>
	else if (state_check == 6){
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <main_state+0x250>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d112      	bne.n	8001ce2 <main_state+0x22a>
		if(package[10] == 1){
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <main_state+0x2ac>)
 8001cbe:	7a9b      	ldrb	r3, [r3, #10]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <main_state+0x212>
			Servo_Close();
 8001cc4:	f7ff fe92 	bl	80019ec <Servo_Close>
 8001cc8:	e001      	b.n	8001cce <main_state+0x216>
			Servo_Open();
 8001cca:	f7ff fe81 	bl	80019d0 <Servo_Open>
		HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	490e      	ldr	r1, [pc, #56]	; (8001d0c <main_state+0x254>)
 8001cd4:	480e      	ldr	r0, [pc, #56]	; (8001d10 <main_state+0x258>)
 8001cd6:	f005 fbb8 	bl	800744a <HAL_UART_Transmit>
		state_check = 0;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <main_state+0x250>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
}
 8001ce0:	e072      	b.n	8001dc8 <main_state+0x310>
	else if (state_check == 7){
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <main_state+0x250>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b07      	cmp	r3, #7
 8001ce8:	d168      	bne.n	8001dbc <main_state+0x304>
		read_z_ref();
 8001cea:	f000 f9a1 	bl	8002030 <read_z_ref>
		IK();
 8001cee:	f001 f92f 	bl	8002f50 <IK>
		p_start[1]=q2;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <main_state+0x264>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <main_state+0x260>)
 8001cf8:	6053      	str	r3, [r2, #4]
		p_final[1]=q2_ref;
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <main_state+0x278>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <main_state+0x274>)
 8001d00:	6053      	str	r3, [r2, #4]
		for(int i=0;i<4;i++){
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	e04e      	b.n	8001da6 <main_state+0x2ee>
 8001d08:	200000e0 	.word	0x200000e0
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000668 	.word	0x20000668
 8001d14:	200002dc 	.word	0x200002dc
 8001d18:	200001a8 	.word	0x200001a8
 8001d1c:	200001e8 	.word	0x200001e8
 8001d20:	200002d4 	.word	0x200002d4
 8001d24:	20000378 	.word	0x20000378
 8001d28:	200001e4 	.word	0x200001e4
 8001d2c:	2000037c 	.word	0x2000037c
 8001d30:	20000320 	.word	0x20000320
 8001d34:	20000244 	.word	0x20000244
 8001d38:	200001a4 	.word	0x200001a4
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000018 	.word	0x20000018
 8001d44:	200000e8 	.word	0x200000e8
 8001d48:	200000f8 	.word	0x200000f8
 8001d4c:	2000003c 	.word	0x2000003c
 8001d50:	bfc90fdb 	.word	0xbfc90fdb
 8001d54:	4016cbe4 	.word	0x4016cbe4
 8001d58:	2000033c 	.word	0x2000033c
 8001d5c:	200001bc 	.word	0x200001bc
 8001d60:	200002f0 	.word	0x200002f0
 8001d64:	2000036c 	.word	0x2000036c
			v_start[i]=0;
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <main_state+0x318>)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
			v_final[i]=0;
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <main_state+0x31c>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
			a_start[i]=0;
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <main_state+0x320>)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
			a_final[i]=0;
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <main_state+0x324>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
		for(int i=0;i<4;i++){
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	dddd      	ble.n	8001d68 <main_state+0x2b0>
		traj_gen(5.0);
 8001dac:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001db0:	f000 f9de 	bl	8002170 <traj_gen>
		state_check = 8;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <main_state+0x328>)
 8001db6:	2208      	movs	r2, #8
 8001db8:	701a      	strb	r2, [r3, #0]
}
 8001dba:	e005      	b.n	8001dc8 <main_state+0x310>
	else if (state_check == 8){
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <main_state+0x328>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d101      	bne.n	8001dc8 <main_state+0x310>
		runz();
 8001dc4:	f000 fef4 	bl	8002bb0 <runz>
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000018 	.word	0x20000018
 8001dd8:	200000e8 	.word	0x200000e8
 8001ddc:	200000f8 	.word	0x200000f8
 8001de0:	200000e0 	.word	0x200000e0

08001de4 <jogging>:
void jogging (void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	switch (package[10]) {
 8001de8:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <jogging+0x12c>)
 8001dea:	7a9b      	ldrb	r3, [r3, #10]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	dc1f      	bgt.n	8001e30 <jogging+0x4c>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	dd7f      	ble.n	8001ef4 <jogging+0x110>
 8001df4:	3b01      	subs	r3, #1
 8001df6:	2b0b      	cmp	r3, #11
 8001df8:	d87c      	bhi.n	8001ef4 <jogging+0x110>
 8001dfa:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <jogging+0x1c>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e8f 	.word	0x08001e8f
 8001e04:	08001eb7 	.word	0x08001eb7
 8001e08:	08001ea3 	.word	0x08001ea3
 8001e0c:	08001ecb 	.word	0x08001ecb
 8001e10:	08001e37 	.word	0x08001e37
 8001e14:	08001e41 	.word	0x08001e41
 8001e18:	08001e4d 	.word	0x08001e4d
 8001e1c:	08001e57 	.word	0x08001e57
 8001e20:	08001e63 	.word	0x08001e63
 8001e24:	08001e6d 	.word	0x08001e6d
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08001e83 	.word	0x08001e83
 8001e30:	2bff      	cmp	r3, #255	; 0xff
 8001e32:	d054      	beq.n	8001ede <jogging+0xfa>
 8001e34:	e05e      	b.n	8001ef4 <jogging+0x110>
		case 5:
			Drive_Motor(&motor1, 60);
 8001e36:	213c      	movs	r1, #60	; 0x3c
 8001e38:	4836      	ldr	r0, [pc, #216]	; (8001f14 <jogging+0x130>)
 8001e3a:	f7ff f955 	bl	80010e8 <Drive_Motor>
			break;
 8001e3e:	e064      	b.n	8001f0a <jogging+0x126>

		case 6 :
			Drive_Motor(&motor1, -60);
 8001e40:	f06f 013b 	mvn.w	r1, #59	; 0x3b
 8001e44:	4833      	ldr	r0, [pc, #204]	; (8001f14 <jogging+0x130>)
 8001e46:	f7ff f94f 	bl	80010e8 <Drive_Motor>
			break;
 8001e4a:	e05e      	b.n	8001f0a <jogging+0x126>
		case 7 :
			Drive_Motor(&motor2, -1200);
 8001e4c:	4932      	ldr	r1, [pc, #200]	; (8001f18 <jogging+0x134>)
 8001e4e:	4833      	ldr	r0, [pc, #204]	; (8001f1c <jogging+0x138>)
 8001e50:	f7ff f94a 	bl	80010e8 <Drive_Motor>
			break;
 8001e54:	e059      	b.n	8001f0a <jogging+0x126>

		case 8 :
			Drive_Motor(&motor2, 1200);
 8001e56:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001e5a:	4830      	ldr	r0, [pc, #192]	; (8001f1c <jogging+0x138>)
 8001e5c:	f7ff f944 	bl	80010e8 <Drive_Motor>
			break;
 8001e60:	e053      	b.n	8001f0a <jogging+0x126>

		case 9 :
			Drive_Motor(&motor3, 100);
 8001e62:	2164      	movs	r1, #100	; 0x64
 8001e64:	482e      	ldr	r0, [pc, #184]	; (8001f20 <jogging+0x13c>)
 8001e66:	f7ff f93f 	bl	80010e8 <Drive_Motor>
			break;
 8001e6a:	e04e      	b.n	8001f0a <jogging+0x126>

		case 10 :
			Drive_Motor(&motor3, -100);
 8001e6c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001e70:	482b      	ldr	r0, [pc, #172]	; (8001f20 <jogging+0x13c>)
 8001e72:	f7ff f939 	bl	80010e8 <Drive_Motor>
			break;
 8001e76:	e048      	b.n	8001f0a <jogging+0x126>

		case 11 :
			Drive_Motor(&motor4, 200);
 8001e78:	21c8      	movs	r1, #200	; 0xc8
 8001e7a:	482a      	ldr	r0, [pc, #168]	; (8001f24 <jogging+0x140>)
 8001e7c:	f7ff f934 	bl	80010e8 <Drive_Motor>
			break;
 8001e80:	e043      	b.n	8001f0a <jogging+0x126>

		case 12 :
			Drive_Motor(&motor4, -200);
 8001e82:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8001e86:	4827      	ldr	r0, [pc, #156]	; (8001f24 <jogging+0x140>)
 8001e88:	f7ff f92e 	bl	80010e8 <Drive_Motor>
			break;
 8001e8c:	e03d      	b.n	8001f0a <jogging+0x126>

		case 1 :
			v_x = 60;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <jogging+0x144>)
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <jogging+0x148>)
 8001e92:	601a      	str	r2, [r3, #0]
			v_y = 0;
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <jogging+0x14c>)
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
			linearJog();
 8001e9c:	f001 f9fc 	bl	8003298 <linearJog>
			break;
 8001ea0:	e033      	b.n	8001f0a <jogging+0x126>

		case 3 :
			v_x = 0;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <jogging+0x144>)
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
			v_y = 50;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <jogging+0x14c>)
 8001eac:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <jogging+0x150>)
 8001eae:	601a      	str	r2, [r3, #0]
			linearJog();
 8001eb0:	f001 f9f2 	bl	8003298 <linearJog>
			break;
 8001eb4:	e029      	b.n	8001f0a <jogging+0x126>

		case 2 :
			v_x = -60;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <jogging+0x144>)
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <jogging+0x154>)
 8001eba:	601a      	str	r2, [r3, #0]
			v_y = 0;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <jogging+0x14c>)
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
			linearJog();
 8001ec4:	f001 f9e8 	bl	8003298 <linearJog>
			break;
 8001ec8:	e01f      	b.n	8001f0a <jogging+0x126>

		case 4 :
			v_x = 0;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <jogging+0x144>)
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
			v_y = -50;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <jogging+0x14c>)
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <jogging+0x158>)
 8001ed6:	601a      	str	r2, [r3, #0]
			linearJog();
 8001ed8:	f001 f9de 	bl	8003298 <linearJog>
			break;
 8001edc:	e015      	b.n	8001f0a <jogging+0x126>

		case 255 :
			v_x = 0;
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <jogging+0x144>)
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
			v_y = 0;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <jogging+0x14c>)
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
			Motor_Stop_All();
 8001eee:	f7ff fa01 	bl	80012f4 <Motor_Stop_All>
			break;
 8001ef2:	e00a      	b.n	8001f0a <jogging+0x126>

		default:
			//err();
			//clear_buffer();
			v_x = 0;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <jogging+0x144>)
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
			v_y = 0;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <jogging+0x14c>)
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
			Motor_Stop_All();
 8001f04:	f7ff f9f6 	bl	80012f4 <Motor_Stop_All>
	}
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000036c 	.word	0x2000036c
 8001f14:	200002fc 	.word	0x200002fc
 8001f18:	fffffb50 	.word	0xfffffb50
 8001f1c:	2000016c 	.word	0x2000016c
 8001f20:	20000350 	.word	0x20000350
 8001f24:	200002a8 	.word	0x200002a8
 8001f28:	200001e0 	.word	0x200001e0
 8001f2c:	42700000 	.word	0x42700000
 8001f30:	200002f4 	.word	0x200002f4
 8001f34:	42480000 	.word	0x42480000
 8001f38:	c2700000 	.word	0xc2700000
 8001f3c:	c2480000 	.word	0xc2480000

08001f40 <read_position_ref>:

void read_position_ref(void){
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	rz_ref = (int16_t)(package[3]<<8)+(package[4]);
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <read_position_ref+0xd8>)
 8001f46:	78db      	ldrb	r3, [r3, #3]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b32      	ldr	r3, [pc, #200]	; (8002018 <read_position_ref+0xd8>)
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	; (800201c <read_position_ref+0xdc>)
 8001f5e:	edc3 7a00 	vstr	s15, [r3]
	x_ref = (int16_t)(package[5]<<8)+(package[6]);
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <read_position_ref+0xd8>)
 8001f64:	795b      	ldrb	r3, [r3, #5]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <read_position_ref+0xd8>)
 8001f6e:	799b      	ldrb	r3, [r3, #6]
 8001f70:	4413      	add	r3, r2
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <read_position_ref+0xe0>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
	y_ref = (int16_t)(package[7]<<8)+(package[8]);
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <read_position_ref+0xd8>)
 8001f82:	79db      	ldrb	r3, [r3, #7]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <read_position_ref+0xd8>)
 8001f8c:	7a1b      	ldrb	r3, [r3, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <read_position_ref+0xe4>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
	z_ref = (int16_t)(package[9]<<8)+(package[10]);
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <read_position_ref+0xd8>)
 8001fa0:	7a5b      	ldrb	r3, [r3, #9]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <read_position_ref+0xd8>)
 8001faa:	7a9b      	ldrb	r3, [r3, #10]
 8001fac:	4413      	add	r3, r2
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <read_position_ref+0xe8>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
	rz_ref = rz_ref/1000;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <read_position_ref+0xdc>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800202c <read_position_ref+0xec>
 8001fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <read_position_ref+0xdc>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
	x_ref = x_ref/10;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <read_position_ref+0xe0>)
 8001fd2:	ed93 7a00 	vldr	s14, [r3]
 8001fd6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <read_position_ref+0xe0>)
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
	y_ref = y_ref/10;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <read_position_ref+0xe4>)
 8001fe6:	ed93 7a00 	vldr	s14, [r3]
 8001fea:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <read_position_ref+0xe4>)
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
	z_ref = z_ref/10;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <read_position_ref+0xe8>)
 8001ffa:	ed93 7a00 	vldr	s14, [r3]
 8001ffe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <read_position_ref+0xe8>)
 8002008:	edc3 7a00 	vstr	s15, [r3]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2000036c 	.word	0x2000036c
 800201c:	20000314 	.word	0x20000314
 8002020:	2000018c 	.word	0x2000018c
 8002024:	20000338 	.word	0x20000338
 8002028:	2000023c 	.word	0x2000023c
 800202c:	447a0000 	.word	0x447a0000

08002030 <read_z_ref>:
void read_z_ref(void){
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
	z_ref = (int16_t)(package[9]<<8)+(package[10]);
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <read_z_ref+0x40>)
 8002036:	7a5b      	ldrb	r3, [r3, #9]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	b21b      	sxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <read_z_ref+0x40>)
 8002040:	7a9b      	ldrb	r3, [r3, #10]
 8002042:	4413      	add	r3, r2
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <read_z_ref+0x44>)
 800204e:	edc3 7a00 	vstr	s15, [r3]
	z_ref = z_ref/10;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <read_z_ref+0x44>)
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800205c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <read_z_ref+0x44>)
 8002062:	edc3 7a00 	vstr	s15, [r3]
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	2000036c 	.word	0x2000036c
 8002074:	2000023c 	.word	0x2000023c

08002078 <read_joint_ref>:
void read_joint_ref(void){
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	q1_ref = (int16_t)(package[3]<<8)+(package[4]);
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <read_joint_ref+0xd8>)
 800207e:	78db      	ldrb	r3, [r3, #3]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21b      	sxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <read_joint_ref+0xd8>)
 8002088:	791b      	ldrb	r3, [r3, #4]
 800208a:	4413      	add	r3, r2
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002094:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <read_joint_ref+0xdc>)
 8002096:	edc3 7a00 	vstr	s15, [r3]
	q2_ref = (int16_t)(package[5]<<8)+(package[6]);
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <read_joint_ref+0xd8>)
 800209c:	795b      	ldrb	r3, [r3, #5]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <read_joint_ref+0xd8>)
 80020a6:	799b      	ldrb	r3, [r3, #6]
 80020a8:	4413      	add	r3, r2
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b2:	4b29      	ldr	r3, [pc, #164]	; (8002158 <read_joint_ref+0xe0>)
 80020b4:	edc3 7a00 	vstr	s15, [r3]
	q3_ref = (int16_t)(package[7]<<8)+(package[8]);
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <read_joint_ref+0xd8>)
 80020ba:	79db      	ldrb	r3, [r3, #7]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	b21b      	sxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <read_joint_ref+0xd8>)
 80020c4:	7a1b      	ldrb	r3, [r3, #8]
 80020c6:	4413      	add	r3, r2
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <read_joint_ref+0xe4>)
 80020d2:	edc3 7a00 	vstr	s15, [r3]
	q4_ref = (int16_t)(package[9]<<8)+(package[10]);
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <read_joint_ref+0xd8>)
 80020d8:	7a5b      	ldrb	r3, [r3, #9]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b21b      	sxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <read_joint_ref+0xd8>)
 80020e2:	7a9b      	ldrb	r3, [r3, #10]
 80020e4:	4413      	add	r3, r2
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <read_joint_ref+0xe8>)
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	q1_ref = q1_ref/1000;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <read_joint_ref+0xdc>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002164 <read_joint_ref+0xec>
 80020fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <read_joint_ref+0xdc>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
	q2_ref = q2_ref/100;
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <read_joint_ref+0xe0>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002168 <read_joint_ref+0xf0>
 8002112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <read_joint_ref+0xe0>)
 8002118:	edc3 7a00 	vstr	s15, [r3]
	q3_ref = q3_ref/1000;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <read_joint_ref+0xe4>)
 800211e:	ed93 7a00 	vldr	s14, [r3]
 8002122:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002164 <read_joint_ref+0xec>
 8002126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <read_joint_ref+0xe4>)
 800212c:	edc3 7a00 	vstr	s15, [r3]
	q4_ref = q4_ref/1000;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <read_joint_ref+0xe8>)
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002164 <read_joint_ref+0xec>
 800213a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <read_joint_ref+0xe8>)
 8002140:	edc3 7a00 	vstr	s15, [r3]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	2000036c 	.word	0x2000036c
 8002154:	200001e4 	.word	0x200001e4
 8002158:	20000320 	.word	0x20000320
 800215c:	20000244 	.word	0x20000244
 8002160:	200001a4 	.word	0x200001a4
 8002164:	447a0000 	.word	0x447a0000
 8002168:	42c80000 	.word	0x42c80000
 800216c:	00000000 	.word	0x00000000

08002170 <traj_gen>:
void traj_gen(float T){
 8002170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	ed87 0a01 	vstr	s0, [r7, #4]
	for(int i=0;i<4;i++){
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e244      	b.n	800260c <traj_gen+0x49c>
		C[0][i] = p_start[i];
 8002182:	4ad5      	ldr	r2, [pc, #852]	; (80024d8 <traj_gen+0x368>)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	49d3      	ldr	r1, [pc, #844]	; (80024dc <traj_gen+0x36c>)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	601a      	str	r2, [r3, #0]
		C[1][i] = v_start[i];
 8002196:	4ad2      	ldr	r2, [pc, #840]	; (80024e0 <traj_gen+0x370>)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	49ce      	ldr	r1, [pc, #824]	; (80024dc <traj_gen+0x36c>)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3304      	adds	r3, #4
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	601a      	str	r2, [r3, #0]
		C[2][i] = a_start[i]/2.0;
 80021ac:	4acd      	ldr	r2, [pc, #820]	; (80024e4 <traj_gen+0x374>)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c0:	4ac6      	ldr	r2, [pc, #792]	; (80024dc <traj_gen+0x36c>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3308      	adds	r3, #8
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	edc3 7a00 	vstr	s15, [r3]
		a = p_final[i] - (p_start[i] + (v_start[i]*T) + (a_start[i]*(pow(T,2))/2));
 80021ce:	4ac6      	ldr	r2, [pc, #792]	; (80024e8 <traj_gen+0x378>)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f979 	bl	80004d0 <__aeabi_f2d>
 80021de:	4604      	mov	r4, r0
 80021e0:	460d      	mov	r5, r1
 80021e2:	4abd      	ldr	r2, [pc, #756]	; (80024d8 <traj_gen+0x368>)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	ed93 7a00 	vldr	s14, [r3]
 80021ee:	4abc      	ldr	r2, [pc, #752]	; (80024e0 <traj_gen+0x370>)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	edd3 6a00 	vldr	s13, [r3]
 80021fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002206:	ee17 0a90 	vmov	r0, s15
 800220a:	f7fe f961 	bl	80004d0 <__aeabi_f2d>
 800220e:	4680      	mov	r8, r0
 8002210:	4689      	mov	r9, r1
 8002212:	4ab4      	ldr	r2, [pc, #720]	; (80024e4 <traj_gen+0x374>)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f957 	bl	80004d0 <__aeabi_f2d>
 8002222:	4682      	mov	sl, r0
 8002224:	468b      	mov	fp, r1
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe f952 	bl	80004d0 <__aeabi_f2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 80024c0 <traj_gen+0x350>
 8002234:	ec43 2b10 	vmov	d0, r2, r3
 8002238:	f006 f9fc 	bl	8008634 <pow>
 800223c:	ec53 2b10 	vmov	r2, r3, d0
 8002240:	4650      	mov	r0, sl
 8002242:	4659      	mov	r1, fp
 8002244:	f7fe f99c 	bl	8000580 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002258:	f7fe fabc 	bl	80007d4 <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4640      	mov	r0, r8
 8002262:	4649      	mov	r1, r9
 8002264:	f7fd ffd6 	bl	8000214 <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fd ffce 	bl	8000210 <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc58 	bl	8000b30 <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	4a9a      	ldr	r2, [pc, #616]	; (80024ec <traj_gen+0x37c>)
 8002284:	6013      	str	r3, [r2, #0]
		b = v_final[i] - (v_start[i] + (a_start[i]*T));
 8002286:	4a9a      	ldr	r2, [pc, #616]	; (80024f0 <traj_gen+0x380>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	4a93      	ldr	r2, [pc, #588]	; (80024e0 <traj_gen+0x370>)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	edd3 6a00 	vldr	s13, [r3]
 800229e:	4a91      	ldr	r2, [pc, #580]	; (80024e4 <traj_gen+0x374>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	ed93 6a00 	vldr	s12, [r3]
 80022aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ba:	4b8e      	ldr	r3, [pc, #568]	; (80024f4 <traj_gen+0x384>)
 80022bc:	edc3 7a00 	vstr	s15, [r3]
		c = a_final[i] - a_start[i];
 80022c0:	4a8d      	ldr	r2, [pc, #564]	; (80024f8 <traj_gen+0x388>)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	4a85      	ldr	r2, [pc, #532]	; (80024e4 <traj_gen+0x374>)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022dc:	4b87      	ldr	r3, [pc, #540]	; (80024fc <traj_gen+0x38c>)
 80022de:	edc3 7a00 	vstr	s15, [r3]
		C[3][i] = (10.0*a/(pow(T,3))) - (4.0*b/(pow(T,2))) + (c/(2.0*T));
 80022e2:	4b82      	ldr	r3, [pc, #520]	; (80024ec <traj_gen+0x37c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f8f2 	bl	80004d0 <__aeabi_f2d>
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b83      	ldr	r3, [pc, #524]	; (8002500 <traj_gen+0x390>)
 80022f2:	f7fe f945 	bl	8000580 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4614      	mov	r4, r2
 80022fc:	461d      	mov	r5, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe f8e6 	bl	80004d0 <__aeabi_f2d>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 80024c8 <traj_gen+0x358>
 800230c:	ec43 2b10 	vmov	d0, r2, r3
 8002310:	f006 f990 	bl	8008634 <pow>
 8002314:	ec53 2b10 	vmov	r2, r3, d0
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	f7fe fa5a 	bl	80007d4 <__aeabi_ddiv>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <traj_gen+0x384>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f8cf 	bl	80004d0 <__aeabi_f2d>
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b73      	ldr	r3, [pc, #460]	; (8002504 <traj_gen+0x394>)
 8002338:	f7fe f922 	bl	8000580 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4690      	mov	r8, r2
 8002342:	4699      	mov	r9, r3
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fe f8c3 	bl	80004d0 <__aeabi_f2d>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 80024c0 <traj_gen+0x350>
 8002352:	ec43 2b10 	vmov	d0, r2, r3
 8002356:	f006 f96d 	bl	8008634 <pow>
 800235a:	ec53 2b10 	vmov	r2, r3, d0
 800235e:	4640      	mov	r0, r8
 8002360:	4649      	mov	r1, r9
 8002362:	f7fe fa37 	bl	80007d4 <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	f7fd ff4f 	bl	8000210 <__aeabi_dsub>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4690      	mov	r8, r2
 8002378:	4699      	mov	r9, r3
 800237a:	4b60      	ldr	r3, [pc, #384]	; (80024fc <traj_gen+0x38c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8a6 	bl	80004d0 <__aeabi_f2d>
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe f8a1 	bl	80004d0 <__aeabi_f2d>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	f7fd ff3f 	bl	8000214 <__adddf3>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4620      	mov	r0, r4
 800239c:	4629      	mov	r1, r5
 800239e:	f7fe fa19 	bl	80007d4 <__aeabi_ddiv>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4640      	mov	r0, r8
 80023a8:	4649      	mov	r1, r9
 80023aa:	f7fd ff33 	bl	8000214 <__adddf3>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fbbb 	bl	8000b30 <__aeabi_d2f>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4947      	ldr	r1, [pc, #284]	; (80024dc <traj_gen+0x36c>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	330c      	adds	r3, #12
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	601a      	str	r2, [r3, #0]
		C[4][i] = (-15.0*a/(pow(T,4))) + (7.0*b/(pow(T,3))) - (c/(pow(T,2)));
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <traj_gen+0x37c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f87f 	bl	80004d0 <__aeabi_f2d>
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <traj_gen+0x398>)
 80023d8:	f7fe f8d2 	bl	8000580 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4614      	mov	r4, r2
 80023e2:	461d      	mov	r5, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe f873 	bl	80004d0 <__aeabi_f2d>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	ed9f 1b38 	vldr	d1, [pc, #224]	; 80024d0 <traj_gen+0x360>
 80023f2:	ec43 2b10 	vmov	d0, r2, r3
 80023f6:	f006 f91d 	bl	8008634 <pow>
 80023fa:	ec53 2b10 	vmov	r2, r3, d0
 80023fe:	4620      	mov	r0, r4
 8002400:	4629      	mov	r1, r5
 8002402:	f7fe f9e7 	bl	80007d4 <__aeabi_ddiv>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4614      	mov	r4, r2
 800240c:	461d      	mov	r5, r3
 800240e:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <traj_gen+0x384>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f85c 	bl	80004d0 <__aeabi_f2d>
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	4b3b      	ldr	r3, [pc, #236]	; (800250c <traj_gen+0x39c>)
 800241e:	f7fe f8af 	bl	8000580 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4690      	mov	r8, r2
 8002428:	4699      	mov	r9, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe f850 	bl	80004d0 <__aeabi_f2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	ed9f 1b24 	vldr	d1, [pc, #144]	; 80024c8 <traj_gen+0x358>
 8002438:	ec43 2b10 	vmov	d0, r2, r3
 800243c:	f006 f8fa 	bl	8008634 <pow>
 8002440:	ec53 2b10 	vmov	r2, r3, d0
 8002444:	4640      	mov	r0, r8
 8002446:	4649      	mov	r1, r9
 8002448:	f7fe f9c4 	bl	80007d4 <__aeabi_ddiv>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fd fede 	bl	8000214 <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4690      	mov	r8, r2
 800245e:	4699      	mov	r9, r3
 8002460:	4b26      	ldr	r3, [pc, #152]	; (80024fc <traj_gen+0x38c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f833 	bl	80004d0 <__aeabi_f2d>
 800246a:	4604      	mov	r4, r0
 800246c:	460d      	mov	r5, r1
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f82e 	bl	80004d0 <__aeabi_f2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80024c0 <traj_gen+0x350>
 800247c:	ec43 2b10 	vmov	d0, r2, r3
 8002480:	f006 f8d8 	bl	8008634 <pow>
 8002484:	ec53 2b10 	vmov	r2, r3, d0
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fe f9a2 	bl	80007d4 <__aeabi_ddiv>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4640      	mov	r0, r8
 8002496:	4649      	mov	r1, r9
 8002498:	f7fd feba 	bl	8000210 <__aeabi_dsub>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fb44 	bl	8000b30 <__aeabi_d2f>
 80024a8:	4602      	mov	r2, r0
 80024aa:	490c      	ldr	r1, [pc, #48]	; (80024dc <traj_gen+0x36c>)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3310      	adds	r3, #16
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	601a      	str	r2, [r3, #0]
		C[5][i] = (6.0*a/(pow(T,5))) - (3.0*b/(pow(T,4))) + (c/(2.0*(pow(T,3))));
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <traj_gen+0x37c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	e029      	b.n	8002510 <traj_gen+0x3a0>
 80024bc:	f3af 8000 	nop.w
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40000000 	.word	0x40000000
 80024c8:	00000000 	.word	0x00000000
 80024cc:	40080000 	.word	0x40080000
 80024d0:	00000000 	.word	0x00000000
 80024d4:	40100000 	.word	0x40100000
 80024d8:	200001a8 	.word	0x200001a8
 80024dc:	20000248 	.word	0x20000248
 80024e0:	20000008 	.word	0x20000008
 80024e4:	200000e8 	.word	0x200000e8
 80024e8:	2000037c 	.word	0x2000037c
 80024ec:	20000364 	.word	0x20000364
 80024f0:	20000018 	.word	0x20000018
 80024f4:	20000188 	.word	0x20000188
 80024f8:	200000f8 	.word	0x200000f8
 80024fc:	200002d8 	.word	0x200002d8
 8002500:	40240000 	.word	0x40240000
 8002504:	40100000 	.word	0x40100000
 8002508:	c02e0000 	.word	0xc02e0000
 800250c:	401c0000 	.word	0x401c0000
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd ffdd 	bl	80004d0 <__aeabi_f2d>
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <traj_gen+0x4c8>)
 800251c:	f7fe f830 	bl	8000580 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4614      	mov	r4, r2
 8002526:	461d      	mov	r5, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fd ffd1 	bl	80004d0 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8002620 <traj_gen+0x4b0>
 8002536:	ec43 2b10 	vmov	d0, r2, r3
 800253a:	f006 f87b 	bl	8008634 <pow>
 800253e:	ec53 2b10 	vmov	r2, r3, d0
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fe f945 	bl	80007d4 <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4614      	mov	r4, r2
 8002550:	461d      	mov	r5, r3
 8002552:	4b3a      	ldr	r3, [pc, #232]	; (800263c <traj_gen+0x4cc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd ffba 	bl	80004d0 <__aeabi_f2d>
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <traj_gen+0x4d0>)
 8002562:	f7fe f80d 	bl	8000580 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4690      	mov	r8, r2
 800256c:	4699      	mov	r9, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fd ffae 	bl	80004d0 <__aeabi_f2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002628 <traj_gen+0x4b8>
 800257c:	ec43 2b10 	vmov	d0, r2, r3
 8002580:	f006 f858 	bl	8008634 <pow>
 8002584:	ec53 2b10 	vmov	r2, r3, d0
 8002588:	4640      	mov	r0, r8
 800258a:	4649      	mov	r1, r9
 800258c:	f7fe f922 	bl	80007d4 <__aeabi_ddiv>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4620      	mov	r0, r4
 8002596:	4629      	mov	r1, r5
 8002598:	f7fd fe3a 	bl	8000210 <__aeabi_dsub>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4690      	mov	r8, r2
 80025a2:	4699      	mov	r9, r3
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <traj_gen+0x4d4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff91 	bl	80004d0 <__aeabi_f2d>
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fd ff8c 	bl	80004d0 <__aeabi_f2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8002630 <traj_gen+0x4c0>
 80025c0:	ec43 2b10 	vmov	d0, r2, r3
 80025c4:	f006 f836 	bl	8008634 <pow>
 80025c8:	ec51 0b10 	vmov	r0, r1, d0
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	f7fd fe20 	bl	8000214 <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fe f8fa 	bl	80007d4 <__aeabi_ddiv>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4640      	mov	r0, r8
 80025e6:	4649      	mov	r1, r9
 80025e8:	f7fd fe14 	bl	8000214 <__adddf3>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fa9c 	bl	8000b30 <__aeabi_d2f>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4913      	ldr	r1, [pc, #76]	; (8002648 <traj_gen+0x4d8>)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3314      	adds	r3, #20
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	601a      	str	r2, [r3, #0]
	for(int i=0;i<4;i++){
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3301      	adds	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b03      	cmp	r3, #3
 8002610:	f77f adb7 	ble.w	8002182 <traj_gen+0x12>
	}
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002620:	00000000 	.word	0x00000000
 8002624:	40140000 	.word	0x40140000
 8002628:	00000000 	.word	0x00000000
 800262c:	40100000 	.word	0x40100000
 8002630:	00000000 	.word	0x00000000
 8002634:	40080000 	.word	0x40080000
 8002638:	40180000 	.word	0x40180000
 800263c:	20000188 	.word	0x20000188
 8002640:	40080000 	.word	0x40080000
 8002644:	200002d8 	.word	0x200002d8
 8002648:	20000248 	.word	0x20000248
 800264c:	00000000 	.word	0x00000000

08002650 <traj_eval>:
void traj_eval(void){
 8002650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
	t += con_t;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <traj_eval+0x24>)
 800265a:	ed93 7a00 	vldr	s14, [r3]
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <traj_eval+0x28>)
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	4b02      	ldr	r3, [pc, #8]	; (8002674 <traj_eval+0x24>)
 800266a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<4;i++){
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	e24b      	b.n	8002b0c <traj_eval+0x4bc>
 8002674:	200000e4 	.word	0x200000e4
 8002678:	20000004 	.word	0x20000004
		 pt[i] = C[0][i] + (C[1][i]*t) + (C[2][i]*(pow(t,2))) + (C[3][i]*(pow(t,3))) + (C[4][i]*(pow(t,4))) + (C[5][i]*(pow(t,5)));
 800267c:	4ad4      	ldr	r2, [pc, #848]	; (80029d0 <traj_eval+0x380>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	ed93 7a00 	vldr	s14, [r3]
 8002688:	4ad1      	ldr	r2, [pc, #836]	; (80029d0 <traj_eval+0x380>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	edd3 6a00 	vldr	s13, [r3]
 8002696:	4bcf      	ldr	r3, [pc, #828]	; (80029d4 <traj_eval+0x384>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	ee17 0a90 	vmov	r0, s15
 80026a8:	f7fd ff12 	bl	80004d0 <__aeabi_f2d>
 80026ac:	4604      	mov	r4, r0
 80026ae:	460d      	mov	r5, r1
 80026b0:	4ac7      	ldr	r2, [pc, #796]	; (80029d0 <traj_eval+0x380>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3308      	adds	r3, #8
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff07 	bl	80004d0 <__aeabi_f2d>
 80026c2:	4680      	mov	r8, r0
 80026c4:	4689      	mov	r9, r1
 80026c6:	4bc3      	ldr	r3, [pc, #780]	; (80029d4 <traj_eval+0x384>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff00 	bl	80004d0 <__aeabi_f2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	ed9f 1bb6 	vldr	d1, [pc, #728]	; 80029b0 <traj_eval+0x360>
 80026d8:	ec43 2b10 	vmov	d0, r2, r3
 80026dc:	f005 ffaa 	bl	8008634 <pow>
 80026e0:	ec53 2b10 	vmov	r2, r3, d0
 80026e4:	4640      	mov	r0, r8
 80026e6:	4649      	mov	r1, r9
 80026e8:	f7fd ff4a 	bl	8000580 <__aeabi_dmul>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fd fd8e 	bl	8000214 <__adddf3>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4690      	mov	r8, r2
 80026fe:	4699      	mov	r9, r3
 8002700:	4ab3      	ldr	r2, [pc, #716]	; (80029d0 <traj_eval+0x380>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	330c      	adds	r3, #12
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fedf 	bl	80004d0 <__aeabi_f2d>
 8002712:	4604      	mov	r4, r0
 8002714:	460d      	mov	r5, r1
 8002716:	4baf      	ldr	r3, [pc, #700]	; (80029d4 <traj_eval+0x384>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fed8 	bl	80004d0 <__aeabi_f2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 80029b8 <traj_eval+0x368>
 8002728:	ec43 2b10 	vmov	d0, r2, r3
 800272c:	f005 ff82 	bl	8008634 <pow>
 8002730:	ec53 2b10 	vmov	r2, r3, d0
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fd ff22 	bl	8000580 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4640      	mov	r0, r8
 8002742:	4649      	mov	r1, r9
 8002744:	f7fd fd66 	bl	8000214 <__adddf3>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4690      	mov	r8, r2
 800274e:	4699      	mov	r9, r3
 8002750:	4a9f      	ldr	r2, [pc, #636]	; (80029d0 <traj_eval+0x380>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3310      	adds	r3, #16
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd feb7 	bl	80004d0 <__aeabi_f2d>
 8002762:	4604      	mov	r4, r0
 8002764:	460d      	mov	r5, r1
 8002766:	4b9b      	ldr	r3, [pc, #620]	; (80029d4 <traj_eval+0x384>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd feb0 	bl	80004d0 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	ed9f 1b92 	vldr	d1, [pc, #584]	; 80029c0 <traj_eval+0x370>
 8002778:	ec43 2b10 	vmov	d0, r2, r3
 800277c:	f005 ff5a 	bl	8008634 <pow>
 8002780:	ec53 2b10 	vmov	r2, r3, d0
 8002784:	4620      	mov	r0, r4
 8002786:	4629      	mov	r1, r5
 8002788:	f7fd fefa 	bl	8000580 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4640      	mov	r0, r8
 8002792:	4649      	mov	r1, r9
 8002794:	f7fd fd3e 	bl	8000214 <__adddf3>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4690      	mov	r8, r2
 800279e:	4699      	mov	r9, r3
 80027a0:	4a8b      	ldr	r2, [pc, #556]	; (80029d0 <traj_eval+0x380>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3314      	adds	r3, #20
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fe8f 	bl	80004d0 <__aeabi_f2d>
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	4b87      	ldr	r3, [pc, #540]	; (80029d4 <traj_eval+0x384>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fe88 	bl	80004d0 <__aeabi_f2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	ed9f 1b80 	vldr	d1, [pc, #512]	; 80029c8 <traj_eval+0x378>
 80027c8:	ec43 2b10 	vmov	d0, r2, r3
 80027cc:	f005 ff32 	bl	8008634 <pow>
 80027d0:	ec53 2b10 	vmov	r2, r3, d0
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd fed2 	bl	8000580 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4640      	mov	r0, r8
 80027e2:	4649      	mov	r1, r9
 80027e4:	f7fd fd16 	bl	8000214 <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe f99e 	bl	8000b30 <__aeabi_d2f>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4978      	ldr	r1, [pc, #480]	; (80029d8 <traj_eval+0x388>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	601a      	str	r2, [r3, #0]
		 vt[i] = C[1][i] + (2.0*C[2][i]*t) + (3.0*C[3][i]*(pow(t,2))) + (4.0*C[4][i]*(pow(t,3))) + (5.0*C[5][i]*(pow(t,4)));
 8002800:	4a73      	ldr	r2, [pc, #460]	; (80029d0 <traj_eval+0x380>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe5f 	bl	80004d0 <__aeabi_f2d>
 8002812:	4604      	mov	r4, r0
 8002814:	460d      	mov	r5, r1
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <traj_eval+0x380>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3308      	adds	r3, #8
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe54 	bl	80004d0 <__aeabi_f2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	f7fd fcf2 	bl	8000214 <__adddf3>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4690      	mov	r8, r2
 8002836:	4699      	mov	r9, r3
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <traj_eval+0x384>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fe47 	bl	80004d0 <__aeabi_f2d>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4640      	mov	r0, r8
 8002848:	4649      	mov	r1, r9
 800284a:	f7fd fe99 	bl	8000580 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f7fd fcdd 	bl	8000214 <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4614      	mov	r4, r2
 8002860:	461d      	mov	r5, r3
 8002862:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <traj_eval+0x380>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	330c      	adds	r3, #12
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe2e 	bl	80004d0 <__aeabi_f2d>
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	4b58      	ldr	r3, [pc, #352]	; (80029dc <traj_eval+0x38c>)
 800287a:	f7fd fe81 	bl	8000580 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4690      	mov	r8, r2
 8002884:	4699      	mov	r9, r3
 8002886:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <traj_eval+0x384>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fe20 	bl	80004d0 <__aeabi_f2d>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80029b0 <traj_eval+0x360>
 8002898:	ec43 2b10 	vmov	d0, r2, r3
 800289c:	f005 feca 	bl	8008634 <pow>
 80028a0:	ec53 2b10 	vmov	r2, r3, d0
 80028a4:	4640      	mov	r0, r8
 80028a6:	4649      	mov	r1, r9
 80028a8:	f7fd fe6a 	bl	8000580 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4620      	mov	r0, r4
 80028b2:	4629      	mov	r1, r5
 80028b4:	f7fd fcae 	bl	8000214 <__adddf3>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4614      	mov	r4, r2
 80028be:	461d      	mov	r5, r3
 80028c0:	4a43      	ldr	r2, [pc, #268]	; (80029d0 <traj_eval+0x380>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3310      	adds	r3, #16
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fdff 	bl	80004d0 <__aeabi_f2d>
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <traj_eval+0x390>)
 80028d8:	f7fd fe52 	bl	8000580 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4690      	mov	r8, r2
 80028e2:	4699      	mov	r9, r3
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <traj_eval+0x384>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fdf1 	bl	80004d0 <__aeabi_f2d>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	ed9f 1b31 	vldr	d1, [pc, #196]	; 80029b8 <traj_eval+0x368>
 80028f6:	ec43 2b10 	vmov	d0, r2, r3
 80028fa:	f005 fe9b 	bl	8008634 <pow>
 80028fe:	ec53 2b10 	vmov	r2, r3, d0
 8002902:	4640      	mov	r0, r8
 8002904:	4649      	mov	r1, r9
 8002906:	f7fd fe3b 	bl	8000580 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4620      	mov	r0, r4
 8002910:	4629      	mov	r1, r5
 8002912:	f7fd fc7f 	bl	8000214 <__adddf3>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4614      	mov	r4, r2
 800291c:	461d      	mov	r5, r3
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <traj_eval+0x380>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3314      	adds	r3, #20
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fdd0 	bl	80004d0 <__aeabi_f2d>
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <traj_eval+0x394>)
 8002936:	f7fd fe23 	bl	8000580 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4690      	mov	r8, r2
 8002940:	4699      	mov	r9, r3
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <traj_eval+0x384>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fdc2 	bl	80004d0 <__aeabi_f2d>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80029c0 <traj_eval+0x370>
 8002954:	ec43 2b10 	vmov	d0, r2, r3
 8002958:	f005 fe6c 	bl	8008634 <pow>
 800295c:	ec53 2b10 	vmov	r2, r3, d0
 8002960:	4640      	mov	r0, r8
 8002962:	4649      	mov	r1, r9
 8002964:	f7fd fe0c 	bl	8000580 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fc50 	bl	8000214 <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f8d8 	bl	8000b30 <__aeabi_d2f>
 8002980:	4602      	mov	r2, r0
 8002982:	4919      	ldr	r1, [pc, #100]	; (80029e8 <traj_eval+0x398>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	601a      	str	r2, [r3, #0]
		 at[i] = (2.0*C[2][i]) + (6.0*C[3][i]*t) + (12.0*C[4][i]*(pow(t,2))) + (20.0*C[5][i]*(pow(t,3)));
 800298c:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <traj_eval+0x380>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3308      	adds	r3, #8
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fd99 	bl	80004d0 <__aeabi_f2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	f7fd fc37 	bl	8000214 <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4614      	mov	r4, r2
 80029ac:	461d      	mov	r5, r3
 80029ae:	e01d      	b.n	80029ec <traj_eval+0x39c>
 80029b0:	00000000 	.word	0x00000000
 80029b4:	40000000 	.word	0x40000000
 80029b8:	00000000 	.word	0x00000000
 80029bc:	40080000 	.word	0x40080000
 80029c0:	00000000 	.word	0x00000000
 80029c4:	40100000 	.word	0x40100000
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40140000 	.word	0x40140000
 80029d0:	20000248 	.word	0x20000248
 80029d4:	200000e4 	.word	0x200000e4
 80029d8:	20000194 	.word	0x20000194
 80029dc:	40080000 	.word	0x40080000
 80029e0:	40100000 	.word	0x40100000
 80029e4:	40140000 	.word	0x40140000
 80029e8:	2000020c 	.word	0x2000020c
 80029ec:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <traj_eval+0x4e0>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	330c      	adds	r3, #12
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fd69 	bl	80004d0 <__aeabi_f2d>
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <traj_eval+0x4e4>)
 8002a04:	f7fd fdbc 	bl	8000580 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4690      	mov	r8, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <traj_eval+0x4e8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd5b 	bl	80004d0 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4640      	mov	r0, r8
 8002a20:	4649      	mov	r1, r9
 8002a22:	f7fd fdad 	bl	8000580 <__aeabi_dmul>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	f7fd fbf1 	bl	8000214 <__adddf3>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4614      	mov	r4, r2
 8002a38:	461d      	mov	r5, r3
 8002a3a:	4a3d      	ldr	r2, [pc, #244]	; (8002b30 <traj_eval+0x4e0>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3310      	adds	r3, #16
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd42 	bl	80004d0 <__aeabi_f2d>
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <traj_eval+0x4ec>)
 8002a52:	f7fd fd95 	bl	8000580 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <traj_eval+0x4e8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd34 	bl	80004d0 <__aeabi_f2d>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002b20 <traj_eval+0x4d0>
 8002a70:	ec43 2b10 	vmov	d0, r2, r3
 8002a74:	f005 fdde 	bl	8008634 <pow>
 8002a78:	ec53 2b10 	vmov	r2, r3, d0
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	4649      	mov	r1, r9
 8002a80:	f7fd fd7e 	bl	8000580 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fbc2 	bl	8000214 <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	461d      	mov	r5, r3
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <traj_eval+0x4e0>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd13 	bl	80004d0 <__aeabi_f2d>
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <traj_eval+0x4f0>)
 8002ab0:	f7fd fd66 	bl	8000580 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4690      	mov	r8, r2
 8002aba:	4699      	mov	r9, r3
 8002abc:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <traj_eval+0x4e8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd05 	bl	80004d0 <__aeabi_f2d>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8002b28 <traj_eval+0x4d8>
 8002ace:	ec43 2b10 	vmov	d0, r2, r3
 8002ad2:	f005 fdaf 	bl	8008634 <pow>
 8002ad6:	ec53 2b10 	vmov	r2, r3, d0
 8002ada:	4640      	mov	r0, r8
 8002adc:	4649      	mov	r1, r9
 8002ade:	f7fd fd4f 	bl	8000580 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f7fd fb93 	bl	8000214 <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f81b 	bl	8000b30 <__aeabi_d2f>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4911      	ldr	r1, [pc, #68]	; (8002b44 <traj_eval+0x4f4>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	601a      	str	r2, [r3, #0]
	for(int i=0;i<4;i++){
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	f77f adb4 	ble.w	800267c <traj_eval+0x2c>
	}
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40000000 	.word	0x40000000
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40080000 	.word	0x40080000
 8002b30:	20000248 	.word	0x20000248
 8002b34:	40180000 	.word	0x40180000
 8002b38:	200000e4 	.word	0x200000e4
 8002b3c:	40280000 	.word	0x40280000
 8002b40:	40340000 	.word	0x40340000
 8002b44:	200001cc 	.word	0x200001cc

08002b48 <run>:
void run(void){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	traj_eval();
 8002b4c:	f7ff fd80 	bl	8002650 <traj_eval>
	control_J1();
 8002b50:	f000 f858 	bl	8002c04 <control_J1>
	control_J2();
 8002b54:	f000 f8c0 	bl	8002cd8 <control_J2>
	control_J3();
 8002b58:	f000 f926 	bl	8002da8 <control_J3>
	control_J4();
 8002b5c:	f000 f98e 	bl	8002e7c <control_J4>
	if(t>=timetraj){
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <run+0x54>)
 8002b62:	ed93 7a00 	vldr	s14, [r3]
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <run+0x58>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	da00      	bge.n	8002b78 <run+0x30>
		HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
		state_check=0;
		Motor_Stop_All();
		t=0;
	}
}
 8002b76:	e00e      	b.n	8002b96 <run+0x4e>
		HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
 8002b78:	2364      	movs	r3, #100	; 0x64
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	4909      	ldr	r1, [pc, #36]	; (8002ba4 <run+0x5c>)
 8002b7e:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <run+0x60>)
 8002b80:	f004 fc63 	bl	800744a <HAL_UART_Transmit>
		state_check=0;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <run+0x64>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
		Motor_Stop_All();
 8002b8a:	f7fe fbb3 	bl	80012f4 <Motor_Stop_All>
		t=0;
 8002b8e:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <run+0x54>)
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200000e4 	.word	0x200000e4
 8002ba0:	2000003c 	.word	0x2000003c
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000668 	.word	0x20000668
 8002bac:	200000e0 	.word	0x200000e0

08002bb0 <runz>:
void runz(void){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
	traj_eval();
 8002bb4:	f7ff fd4c 	bl	8002650 <traj_eval>
	control_J2();
 8002bb8:	f000 f88e 	bl	8002cd8 <control_J2>
	if(t>=5.0){
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <runz+0x44>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	da00      	bge.n	8002bd2 <runz+0x22>
		HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
		state_check=0;
		Motor_Stop_All();
		t=0;
	}
}
 8002bd0:	e00e      	b.n	8002bf0 <runz+0x40>
		HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
 8002bd2:	2364      	movs	r3, #100	; 0x64
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <runz+0x48>)
 8002bd8:	4808      	ldr	r0, [pc, #32]	; (8002bfc <runz+0x4c>)
 8002bda:	f004 fc36 	bl	800744a <HAL_UART_Transmit>
		state_check=0;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <runz+0x50>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
		Motor_Stop_All();
 8002be4:	f7fe fb86 	bl	80012f4 <Motor_Stop_All>
		t=0;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <runz+0x44>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200000e4 	.word	0x200000e4
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000668 	.word	0x20000668
 8002c00:	200000e0 	.word	0x200000e0

08002c04 <control_J1>:

void control_J1(void){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
//	float setpoint = pt[0];
	POScurrent[0] = q1;
 8002c08:	4b28      	ldr	r3, [pc, #160]	; (8002cac <control_J1+0xa8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <control_J1+0xac>)
 8002c0e:	6013      	str	r3, [r2, #0]
//	POSlast[0] = POScurrent[0];
	Pe[0] = pt[0] - POScurrent[0];
 8002c10:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <control_J1+0xb0>)
 8002c12:	ed93 7a00 	vldr	s14, [r3]
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <control_J1+0xac>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <control_J1+0xb4>)
 8002c22:	edc3 7a00 	vstr	s15, [r3]
	A[0] = A[0] + Pe[0];
 8002c26:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <control_J1+0xb8>)
 8002c28:	ed93 7a00 	vldr	s14, [r3]
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <control_J1+0xb4>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c36:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <control_J1+0xb8>)
 8002c38:	edc3 7a00 	vstr	s15, [r3]
	V[0] = (kpp[0] * Pe[0])+(kpi[0] * A[0])+(kpd[0] * (Pe[0] - B[0]));
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <control_J1+0xbc>)
 8002c3e:	ed93 7a00 	vldr	s14, [r3]
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <control_J1+0xb4>)
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <control_J1+0xc0>)
 8002c4e:	edd3 6a00 	vldr	s13, [r3]
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <control_J1+0xb8>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <control_J1+0xc4>)
 8002c62:	edd3 6a00 	vldr	s13, [r3]
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <control_J1+0xb4>)
 8002c68:	ed93 6a00 	vldr	s12, [r3]
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <control_J1+0xc8>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <control_J1+0xcc>)
 8002c80:	edc3 7a00 	vstr	s15, [r3]
	B[0] = Pe[0];
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <control_J1+0xb4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <control_J1+0xc8>)
 8002c8a:	6013      	str	r3, [r2, #0]
	Drive_Motor(&motor1, -V[0]);
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <control_J1+0xcc>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	eef1 7a67 	vneg.f32	s15, s15
 8002c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9a:	ee17 3a90 	vmov	r3, s15
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480c      	ldr	r0, [pc, #48]	; (8002cd4 <control_J1+0xd0>)
 8002ca4:	f7fe fa20 	bl	80010e8 <Drive_Motor>
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200002dc 	.word	0x200002dc
 8002cb0:	2000022c 	.word	0x2000022c
 8002cb4:	20000194 	.word	0x20000194
 8002cb8:	2000021c 	.word	0x2000021c
 8002cbc:	20000108 	.word	0x20000108
 8002cc0:	20000028 	.word	0x20000028
 8002cc4:	20000138 	.word	0x20000138
 8002cc8:	20000148 	.word	0x20000148
 8002ccc:	20000128 	.word	0x20000128
 8002cd0:	20000118 	.word	0x20000118
 8002cd4:	200002fc 	.word	0x200002fc

08002cd8 <control_J2>:
void control_J2(void){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
//	float setpoint = pt[0];
	POScurrent[1] = q2;
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <control_J2+0xa4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <control_J2+0xa8>)
 8002ce2:	6053      	str	r3, [r2, #4]
//	POSlast[0] = POScurrent[0];
	Pe[1] = pt[1] - POScurrent[1];
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <control_J2+0xac>)
 8002ce6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cea:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <control_J2+0xa8>)
 8002cec:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <control_J2+0xb0>)
 8002cf6:	edc3 7a01 	vstr	s15, [r3, #4]
	A[1] = A[1] + Pe[1];
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <control_J2+0xb4>)
 8002cfc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d00:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <control_J2+0xb0>)
 8002d02:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <control_J2+0xb4>)
 8002d0c:	edc3 7a01 	vstr	s15, [r3, #4]
	V[1] = (kpp[1] * Pe[1])+(kpi[1] * A[1])+(kpd[1] * (Pe[1] - B[1]));
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <control_J2+0xb8>)
 8002d12:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <control_J2+0xb0>)
 8002d18:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <control_J2+0xbc>)
 8002d22:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <control_J2+0xb4>)
 8002d28:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d34:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <control_J2+0xc0>)
 8002d36:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <control_J2+0xb0>)
 8002d3c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <control_J2+0xc4>)
 8002d42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <control_J2+0xc8>)
 8002d54:	edc3 7a01 	vstr	s15, [r3, #4]
	B[1] = Pe[1];
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <control_J2+0xb0>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <control_J2+0xc4>)
 8002d5e:	6053      	str	r3, [r2, #4]
	Drive_Motor(&motor2, V[1]);
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <control_J2+0xc8>)
 8002d62:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6a:	ee17 3a90 	vmov	r3, s15
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	480c      	ldr	r0, [pc, #48]	; (8002da4 <control_J2+0xcc>)
 8002d74:	f7fe f9b8 	bl	80010e8 <Drive_Motor>
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200001e8 	.word	0x200001e8
 8002d80:	2000022c 	.word	0x2000022c
 8002d84:	20000194 	.word	0x20000194
 8002d88:	2000021c 	.word	0x2000021c
 8002d8c:	20000108 	.word	0x20000108
 8002d90:	20000028 	.word	0x20000028
 8002d94:	20000138 	.word	0x20000138
 8002d98:	20000148 	.word	0x20000148
 8002d9c:	20000128 	.word	0x20000128
 8002da0:	20000118 	.word	0x20000118
 8002da4:	2000016c 	.word	0x2000016c

08002da8 <control_J3>:
void control_J3(void){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
//	float setpoint = pt[0];
	POScurrent[2] = q3;
 8002dac:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <control_J3+0xa8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <control_J3+0xac>)
 8002db2:	6093      	str	r3, [r2, #8]
//	POSlast[0] = POScurrent[0];
	Pe[2] = pt[2] - POScurrent[2];
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <control_J3+0xb0>)
 8002db6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <control_J3+0xac>)
 8002dbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <control_J3+0xb4>)
 8002dc6:	edc3 7a02 	vstr	s15, [r3, #8]
	A[2] = A[2] + Pe[2];
 8002dca:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <control_J3+0xb8>)
 8002dcc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <control_J3+0xb4>)
 8002dd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dda:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <control_J3+0xb8>)
 8002ddc:	edc3 7a02 	vstr	s15, [r3, #8]
	V[2] = (kpp[2] * Pe[2])+(kpi[2] * A[2])+(kpd[2] * (Pe[2] - B[2]));
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <control_J3+0xbc>)
 8002de2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <control_J3+0xb4>)
 8002de8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <control_J3+0xc0>)
 8002df2:	edd3 6a02 	vldr	s13, [r3, #8]
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <control_J3+0xb8>)
 8002df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <control_J3+0xc4>)
 8002e06:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <control_J3+0xb4>)
 8002e0c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <control_J3+0xc8>)
 8002e12:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <control_J3+0xcc>)
 8002e24:	edc3 7a02 	vstr	s15, [r3, #8]
	B[2] = Pe[2];
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <control_J3+0xb4>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <control_J3+0xc8>)
 8002e2e:	6093      	str	r3, [r2, #8]
	Drive_Motor(&motor3, -V[2]);
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <control_J3+0xcc>)
 8002e32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e36:	eef1 7a67 	vneg.f32	s15, s15
 8002e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e3e:	ee17 3a90 	vmov	r3, s15
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	480c      	ldr	r0, [pc, #48]	; (8002e78 <control_J3+0xd0>)
 8002e48:	f7fe f94e 	bl	80010e8 <Drive_Motor>
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200002d4 	.word	0x200002d4
 8002e54:	2000022c 	.word	0x2000022c
 8002e58:	20000194 	.word	0x20000194
 8002e5c:	2000021c 	.word	0x2000021c
 8002e60:	20000108 	.word	0x20000108
 8002e64:	20000028 	.word	0x20000028
 8002e68:	20000138 	.word	0x20000138
 8002e6c:	20000148 	.word	0x20000148
 8002e70:	20000128 	.word	0x20000128
 8002e74:	20000118 	.word	0x20000118
 8002e78:	20000350 	.word	0x20000350

08002e7c <control_J4>:
void control_J4(void){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
//	float setpoint = pt[0];
	POScurrent[3] = q4;
 8002e80:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <control_J4+0xa8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <control_J4+0xac>)
 8002e86:	60d3      	str	r3, [r2, #12]
//	POSlast[0] = POScurrent[0];
	Pe[3] = pt[3] - POScurrent[3];
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <control_J4+0xb0>)
 8002e8a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <control_J4+0xac>)
 8002e90:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <control_J4+0xb4>)
 8002e9a:	edc3 7a03 	vstr	s15, [r3, #12]
	A[3] = A[3] + Pe[3];
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <control_J4+0xb8>)
 8002ea0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <control_J4+0xb4>)
 8002ea6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <control_J4+0xb8>)
 8002eb0:	edc3 7a03 	vstr	s15, [r3, #12]
	V[3] = (kpp[3] * Pe[3])+(kpi[3] * A[3])+(kpd[3] * (Pe[3] - B[3]));
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <control_J4+0xbc>)
 8002eb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <control_J4+0xb4>)
 8002ebc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <control_J4+0xc0>)
 8002ec6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <control_J4+0xb8>)
 8002ecc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <control_J4+0xc4>)
 8002eda:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <control_J4+0xb4>)
 8002ee0:	ed93 6a03 	vldr	s12, [r3, #12]
 8002ee4:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <control_J4+0xc8>)
 8002ee6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <control_J4+0xcc>)
 8002ef8:	edc3 7a03 	vstr	s15, [r3, #12]
	B[3] = Pe[3];
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <control_J4+0xb4>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <control_J4+0xc8>)
 8002f02:	60d3      	str	r3, [r2, #12]
	Drive_Motor(&motor4, -V[3]);
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <control_J4+0xcc>)
 8002f06:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f0a:	eef1 7a67 	vneg.f32	s15, s15
 8002f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f12:	ee17 3a90 	vmov	r3, s15
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480c      	ldr	r0, [pc, #48]	; (8002f4c <control_J4+0xd0>)
 8002f1c:	f7fe f8e4 	bl	80010e8 <Drive_Motor>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000378 	.word	0x20000378
 8002f28:	2000022c 	.word	0x2000022c
 8002f2c:	20000194 	.word	0x20000194
 8002f30:	2000021c 	.word	0x2000021c
 8002f34:	20000108 	.word	0x20000108
 8002f38:	20000028 	.word	0x20000028
 8002f3c:	20000138 	.word	0x20000138
 8002f40:	20000148 	.word	0x20000148
 8002f44:	20000128 	.word	0x20000128
 8002f48:	20000118 	.word	0x20000118
 8002f4c:	200002a8 	.word	0x200002a8

08002f50 <IK>:
void IK(void){
 8002f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
    q2_ref = h1 - h2 - z_ref;
 8002f58:	4b93      	ldr	r3, [pc, #588]	; (80031a8 <IK+0x258>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fab7 	bl	80004d0 <__aeabi_f2d>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	a186      	add	r1, pc, #536	; (adr r1, 8003180 <IK+0x230>)
 8002f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f6c:	f7fd f950 	bl	8000210 <__aeabi_dsub>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fdda 	bl	8000b30 <__aeabi_d2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a8b      	ldr	r2, [pc, #556]	; (80031ac <IK+0x25c>)
 8002f80:	6013      	str	r3, [r2, #0]
    float c3 = ((pow(x_ref,2))+(pow(y_ref,2))-(pow(l1,2))-(pow(l2,2)))/(2*l1*l2);
 8002f82:	4b8b      	ldr	r3, [pc, #556]	; (80031b0 <IK+0x260>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd faa2 	bl	80004d0 <__aeabi_f2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8003188 <IK+0x238>
 8002f94:	ec43 2b10 	vmov	d0, r2, r3
 8002f98:	f005 fb4c 	bl	8008634 <pow>
 8002f9c:	ec55 4b10 	vmov	r4, r5, d0
 8002fa0:	4b84      	ldr	r3, [pc, #528]	; (80031b4 <IK+0x264>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fa93 	bl	80004d0 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8003188 <IK+0x238>
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f005 fb3d 	bl	8008634 <pow>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7fd f927 	bl	8000214 <__adddf3>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	a370      	add	r3, pc, #448	; (adr r3, 8003190 <IK+0x240>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f7fd f91c 	bl	8000210 <__aeabi_dsub>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	a36d      	add	r3, pc, #436	; (adr r3, 8003198 <IK+0x248>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd f913 	bl	8000210 <__aeabi_dsub>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	a36b      	add	r3, pc, #428	; (adr r3, 80031a0 <IK+0x250>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fbec 	bl	80007d4 <__aeabi_ddiv>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f7fd fd94 	bl	8000b30 <__aeabi_d2f>
 8003008:	4603      	mov	r3, r0
 800300a:	607b      	str	r3, [r7, #4]
    float s3 = gramma*(sqrt(1-(c3*c3)));
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <IK+0x268>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fa4b 	bl	80004ac <__aeabi_i2d>
 8003016:	4604      	mov	r4, r0
 8003018:	460d      	mov	r5, r1
 800301a:	edd7 7a01 	vldr	s15, [r7, #4]
 800301e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302a:	ee17 0a90 	vmov	r0, s15
 800302e:	f7fd fa4f 	bl	80004d0 <__aeabi_f2d>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	ec43 2b10 	vmov	d0, r2, r3
 800303a:	f005 fba9 	bl	8008790 <sqrt>
 800303e:	ec53 2b10 	vmov	r2, r3, d0
 8003042:	4620      	mov	r0, r4
 8003044:	4629      	mov	r1, r5
 8003046:	f7fd fa9b 	bl	8000580 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fd6d 	bl	8000b30 <__aeabi_d2f>
 8003056:	4603      	mov	r3, r0
 8003058:	603b      	str	r3, [r7, #0]
    q1_ref = atan2(y_ref,x_ref)-atan2(l2*s3,l1+(l2*c3));
 800305a:	4b56      	ldr	r3, [pc, #344]	; (80031b4 <IK+0x264>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fa36 	bl	80004d0 <__aeabi_f2d>
 8003064:	4604      	mov	r4, r0
 8003066:	460d      	mov	r5, r1
 8003068:	4b51      	ldr	r3, [pc, #324]	; (80031b0 <IK+0x260>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa2f 	bl	80004d0 <__aeabi_f2d>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	ec43 2b11 	vmov	d1, r2, r3
 800307a:	ec45 4b10 	vmov	d0, r4, r5
 800307e:	f005 fad7 	bl	8008630 <atan2>
 8003082:	ec55 4b10 	vmov	r4, r5, d0
 8003086:	edd7 7a00 	vldr	s15, [r7]
 800308a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80031bc <IK+0x26c>
 800308e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003092:	ee17 0a90 	vmov	r0, s15
 8003096:	f7fd fa1b 	bl	80004d0 <__aeabi_f2d>
 800309a:	4680      	mov	r8, r0
 800309c:	4689      	mov	r9, r1
 800309e:	edd7 7a01 	vldr	s15, [r7, #4]
 80030a2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80031bc <IK+0x26c>
 80030a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030aa:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80031c0 <IK+0x270>
 80030ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030b2:	ee17 0a90 	vmov	r0, s15
 80030b6:	f7fd fa0b 	bl	80004d0 <__aeabi_f2d>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	ec43 2b11 	vmov	d1, r2, r3
 80030c2:	ec49 8b10 	vmov	d0, r8, r9
 80030c6:	f005 fab3 	bl	8008630 <atan2>
 80030ca:	ec53 2b10 	vmov	r2, r3, d0
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7fd f89d 	bl	8000210 <__aeabi_dsub>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	f7fd fd27 	bl	8000b30 <__aeabi_d2f>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4a37      	ldr	r2, [pc, #220]	; (80031c4 <IK+0x274>)
 80030e6:	6013      	str	r3, [r2, #0]
    q3_ref = atan2(s3,c3);
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	f7fd f9f1 	bl	80004d0 <__aeabi_f2d>
 80030ee:	4604      	mov	r4, r0
 80030f0:	460d      	mov	r5, r1
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd f9ec 	bl	80004d0 <__aeabi_f2d>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	ec43 2b11 	vmov	d1, r2, r3
 8003100:	ec45 4b10 	vmov	d0, r4, r5
 8003104:	f005 fa94 	bl	8008630 <atan2>
 8003108:	ec53 2b10 	vmov	r2, r3, d0
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f7fd fd0e 	bl	8000b30 <__aeabi_d2f>
 8003114:	4603      	mov	r3, r0
 8003116:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <IK+0x278>)
 8003118:	6013      	str	r3, [r2, #0]
    if(sqrt((x_ref*x_ref)+(y_ref*y_ref)) >= l1+l2){
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <IK+0x260>)
 800311c:	ed93 7a00 	vldr	s14, [r3]
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <IK+0x260>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <IK+0x264>)
 800312c:	edd3 6a00 	vldr	s13, [r3]
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <IK+0x264>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313e:	ee17 0a90 	vmov	r0, s15
 8003142:	f7fd f9c5 	bl	80004d0 <__aeabi_f2d>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	ec43 2b10 	vmov	d0, r2, r3
 800314e:	f005 fb1f 	bl	8008790 <sqrt>
 8003152:	ec51 0b10 	vmov	r0, r1, d0
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <IK+0x27c>)
 800315c:	f7fd fc96 	bl	8000a8c <__aeabi_dcmpge>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <IK+0x21e>
        flag = 1;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <IK+0x280>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e002      	b.n	8003174 <IK+0x224>
    }
    else {flag = 0;}
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <IK+0x280>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
//        q4_ref = rz_ref+q1_ref+q3_ref;
    }
    else{
        //error
    }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800317e:	bf00      	nop
 8003180:	66666666 	.word	0x66666666
 8003184:	4074b666 	.word	0x4074b666
 8003188:	00000000 	.word	0x00000000
 800318c:	40000000 	.word	0x40000000
 8003190:	00000000 	.word	0x00000000
 8003194:	410cd520 	.word	0x410cd520
 8003198:	00000000 	.word	0x00000000
 800319c:	40f48840 	.word	0x40f48840
 80031a0:	00000000 	.word	0x00000000
 80031a4:	41113460 	.word	0x41113460
 80031a8:	2000023c 	.word	0x2000023c
 80031ac:	20000320 	.word	0x20000320
 80031b0:	2000018c 	.word	0x2000018c
 80031b4:	20000338 	.word	0x20000338
 80031b8:	20000038 	.word	0x20000038
 80031bc:	43910000 	.word	0x43910000
 80031c0:	43f30000 	.word	0x43f30000
 80031c4:	200001e4 	.word	0x200001e4
 80031c8:	20000244 	.word	0x20000244
 80031cc:	40884000 	.word	0x40884000
 80031d0:	20000204 	.word	0x20000204

080031d4 <read_encoder>:
//encoder function
void read_encoder(void){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	encoder_1 = (TIM5->CNT)-100;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <read_encoder+0x48>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	3b64      	subs	r3, #100	; 0x64
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <read_encoder+0x4c>)
 80031e4:	601a      	str	r2, [r3, #0]
	encoder_2 = (TIM8->CNT)-1000;
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <read_encoder+0x50>)
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80031ee:	461a      	mov	r2, r3
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <read_encoder+0x54>)
 80031f2:	601a      	str	r2, [r3, #0]
	AMT21_read_value(&encoder_3);
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <read_encoder+0x58>)
 80031f6:	f7fd fe8d 	bl	8000f14 <AMT21_read_value>
	HAL_StatusTypeDef rep3 = AMT21_check_value(&encoder_3);
 80031fa:	480c      	ldr	r0, [pc, #48]	; (800322c <read_encoder+0x58>)
 80031fc:	f7fd fecc 	bl	8000f98 <AMT21_check_value>
 8003200:	4603      	mov	r3, r0
 8003202:	71fb      	strb	r3, [r7, #7]
	if (rep3 == HAL_ERROR){
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d003      	beq.n	8003212 <read_encoder+0x3e>
		//err_count++;
	}
	else{
		Enc3_Pos = encoder_3.position;
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <read_encoder+0x58>)
 800320c:	89da      	ldrh	r2, [r3, #14]
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <read_encoder+0x5c>)
 8003210:	801a      	strh	r2, [r3, #0]
	}
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40000c00 	.word	0x40000c00
 8003220:	200002e0 	.word	0x200002e0
 8003224:	40010400 	.word	0x40010400
 8003228:	2000031c 	.word	0x2000031c
 800322c:	20000158 	.word	0x20000158
 8003230:	20000208 	.word	0x20000208

08003234 <read_encoder2>:
void read_encoder2(void){
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
	encoder_1 = (TIM5->CNT)-100;
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <read_encoder2+0x48>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	3b64      	subs	r3, #100	; 0x64
 8003240:	461a      	mov	r2, r3
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <read_encoder2+0x4c>)
 8003244:	601a      	str	r2, [r3, #0]
	encoder_2 = (TIM8->CNT)-1000;
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <read_encoder2+0x50>)
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800324e:	461a      	mov	r2, r3
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <read_encoder2+0x54>)
 8003252:	601a      	str	r2, [r3, #0]
	AMT21_read_value(&encoder_4);
 8003254:	480d      	ldr	r0, [pc, #52]	; (800328c <read_encoder2+0x58>)
 8003256:	f7fd fe5d 	bl	8000f14 <AMT21_read_value>
	HAL_StatusTypeDef rep4 = AMT21_check_value(&encoder_4);
 800325a:	480c      	ldr	r0, [pc, #48]	; (800328c <read_encoder2+0x58>)
 800325c:	f7fd fe9c 	bl	8000f98 <AMT21_check_value>
 8003260:	4603      	mov	r3, r0
 8003262:	71fb      	strb	r3, [r7, #7]
	if (rep4 == HAL_ERROR){
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d003      	beq.n	8003272 <read_encoder2+0x3e>
		//err_count1++;
	}
	else{
		Enc4_Pos = encoder_4.position;
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <read_encoder2+0x58>)
 800326c:	89da      	ldrh	r2, [r3, #14]
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <read_encoder2+0x5c>)
 8003270:	801a      	strh	r2, [r3, #0]
	}
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40000c00 	.word	0x40000c00
 8003280:	200002e0 	.word	0x200002e0
 8003284:	40010400 	.word	0x40010400
 8003288:	2000031c 	.word	0x2000031c
 800328c:	200001f0 	.word	0x200001f0
 8003290:	20000180 	.word	0x20000180
 8003294:	00000000 	.word	0x00000000

08003298 <linearJog>:

void linearJog(void) {
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0

	v_q1 = -(v_x*cos(q1 + q3))/(l1*cos(q1 + q3)*sin(q1)-l1*sin(q1 + q3)*cos(q1)) -
 80032a0:	4bdd      	ldr	r3, [pc, #884]	; (8003618 <linearJog+0x380>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd f913 	bl	80004d0 <__aeabi_f2d>
 80032aa:	4680      	mov	r8, r0
 80032ac:	4689      	mov	r9, r1
 80032ae:	4bdb      	ldr	r3, [pc, #876]	; (800361c <linearJog+0x384>)
 80032b0:	ed93 7a00 	vldr	s14, [r3]
 80032b4:	4bda      	ldr	r3, [pc, #872]	; (8003620 <linearJog+0x388>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	ee17 0a90 	vmov	r0, s15
 80032c2:	f7fd f905 	bl	80004d0 <__aeabi_f2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	ec43 2b10 	vmov	d0, r2, r3
 80032ce:	f005 f90b 	bl	80084e8 <cos>
 80032d2:	ec53 2b10 	vmov	r2, r3, d0
 80032d6:	4640      	mov	r0, r8
 80032d8:	4649      	mov	r1, r9
 80032da:	f7fd f951 	bl	8000580 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4614      	mov	r4, r2
 80032e4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80032e8:	4bcc      	ldr	r3, [pc, #816]	; (800361c <linearJog+0x384>)
 80032ea:	ed93 7a00 	vldr	s14, [r3]
 80032ee:	4bcc      	ldr	r3, [pc, #816]	; (8003620 <linearJog+0x388>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f8:	ee17 0a90 	vmov	r0, s15
 80032fc:	f7fd f8e8 	bl	80004d0 <__aeabi_f2d>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	ec43 2b10 	vmov	d0, r2, r3
 8003308:	f005 f8ee 	bl	80084e8 <cos>
 800330c:	ec51 0b10 	vmov	r0, r1, d0
 8003310:	a3bb      	add	r3, pc, #748	; (adr r3, 8003600 <linearJog+0x368>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd f933 	bl	8000580 <__aeabi_dmul>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4690      	mov	r8, r2
 8003320:	4699      	mov	r9, r3
 8003322:	4bbe      	ldr	r3, [pc, #760]	; (800361c <linearJog+0x384>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f8d2 	bl	80004d0 <__aeabi_f2d>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	ec43 2b10 	vmov	d0, r2, r3
 8003334:	f005 f928 	bl	8008588 <sin>
 8003338:	ec53 2b10 	vmov	r2, r3, d0
 800333c:	4640      	mov	r0, r8
 800333e:	4649      	mov	r1, r9
 8003340:	f7fd f91e 	bl	8000580 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4690      	mov	r8, r2
 800334a:	4699      	mov	r9, r3
 800334c:	4bb3      	ldr	r3, [pc, #716]	; (800361c <linearJog+0x384>)
 800334e:	ed93 7a00 	vldr	s14, [r3]
 8003352:	4bb3      	ldr	r3, [pc, #716]	; (8003620 <linearJog+0x388>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	ee17 0a90 	vmov	r0, s15
 8003360:	f7fd f8b6 	bl	80004d0 <__aeabi_f2d>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	ec43 2b10 	vmov	d0, r2, r3
 800336c:	f005 f90c 	bl	8008588 <sin>
 8003370:	ec51 0b10 	vmov	r0, r1, d0
 8003374:	a3a2      	add	r3, pc, #648	; (adr r3, 8003600 <linearJog+0x368>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd f901 	bl	8000580 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4692      	mov	sl, r2
 8003384:	469b      	mov	fp, r3
 8003386:	4ba5      	ldr	r3, [pc, #660]	; (800361c <linearJog+0x384>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd f8a0 	bl	80004d0 <__aeabi_f2d>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	ec43 2b10 	vmov	d0, r2, r3
 8003398:	f005 f8a6 	bl	80084e8 <cos>
 800339c:	ec53 2b10 	vmov	r2, r3, d0
 80033a0:	4650      	mov	r0, sl
 80033a2:	4659      	mov	r1, fp
 80033a4:	f7fd f8ec 	bl	8000580 <__aeabi_dmul>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4640      	mov	r0, r8
 80033ae:	4649      	mov	r1, r9
 80033b0:	f7fc ff2e 	bl	8000210 <__aeabi_dsub>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	f7fd fa0a 	bl	80007d4 <__aeabi_ddiv>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4690      	mov	r8, r2
 80033c6:	4699      	mov	r9, r3
			(v_y*sin(q1 + q3))/(l1*cos(q1 + q3)*sin(q1)-l1*sin(q1 + q3)*cos(q1));
 80033c8:	4b96      	ldr	r3, [pc, #600]	; (8003624 <linearJog+0x38c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f87f 	bl	80004d0 <__aeabi_f2d>
 80033d2:	4604      	mov	r4, r0
 80033d4:	460d      	mov	r5, r1
 80033d6:	4b91      	ldr	r3, [pc, #580]	; (800361c <linearJog+0x384>)
 80033d8:	ed93 7a00 	vldr	s14, [r3]
 80033dc:	4b90      	ldr	r3, [pc, #576]	; (8003620 <linearJog+0x388>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	ee17 0a90 	vmov	r0, s15
 80033ea:	f7fd f871 	bl	80004d0 <__aeabi_f2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	ec43 2b10 	vmov	d0, r2, r3
 80033f6:	f005 f8c7 	bl	8008588 <sin>
 80033fa:	ec53 2b10 	vmov	r2, r3, d0
 80033fe:	4620      	mov	r0, r4
 8003400:	4629      	mov	r1, r5
 8003402:	f7fd f8bd 	bl	8000580 <__aeabi_dmul>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4614      	mov	r4, r2
 800340c:	461d      	mov	r5, r3
 800340e:	4b83      	ldr	r3, [pc, #524]	; (800361c <linearJog+0x384>)
 8003410:	ed93 7a00 	vldr	s14, [r3]
 8003414:	4b82      	ldr	r3, [pc, #520]	; (8003620 <linearJog+0x388>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341e:	ee17 0a90 	vmov	r0, s15
 8003422:	f7fd f855 	bl	80004d0 <__aeabi_f2d>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	ec43 2b10 	vmov	d0, r2, r3
 800342e:	f005 f85b 	bl	80084e8 <cos>
 8003432:	ec51 0b10 	vmov	r0, r1, d0
 8003436:	a372      	add	r3, pc, #456	; (adr r3, 8003600 <linearJog+0x368>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f7fd f8a0 	bl	8000580 <__aeabi_dmul>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4692      	mov	sl, r2
 8003446:	469b      	mov	fp, r3
 8003448:	4b74      	ldr	r3, [pc, #464]	; (800361c <linearJog+0x384>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f83f 	bl	80004d0 <__aeabi_f2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ec43 2b10 	vmov	d0, r2, r3
 800345a:	f005 f895 	bl	8008588 <sin>
 800345e:	ec53 2b10 	vmov	r2, r3, d0
 8003462:	4650      	mov	r0, sl
 8003464:	4659      	mov	r1, fp
 8003466:	f7fd f88b 	bl	8000580 <__aeabi_dmul>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4692      	mov	sl, r2
 8003470:	469b      	mov	fp, r3
 8003472:	4b6a      	ldr	r3, [pc, #424]	; (800361c <linearJog+0x384>)
 8003474:	ed93 7a00 	vldr	s14, [r3]
 8003478:	4b69      	ldr	r3, [pc, #420]	; (8003620 <linearJog+0x388>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	ee17 0a90 	vmov	r0, s15
 8003486:	f7fd f823 	bl	80004d0 <__aeabi_f2d>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	ec43 2b10 	vmov	d0, r2, r3
 8003492:	f005 f879 	bl	8008588 <sin>
 8003496:	ec51 0b10 	vmov	r0, r1, d0
 800349a:	a359      	add	r3, pc, #356	; (adr r3, 8003600 <linearJog+0x368>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f7fd f86e 	bl	8000580 <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	e9c7 2300 	strd	r2, r3, [r7]
 80034ac:	4b5b      	ldr	r3, [pc, #364]	; (800361c <linearJog+0x384>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd f80d 	bl	80004d0 <__aeabi_f2d>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	ec43 2b10 	vmov	d0, r2, r3
 80034be:	f005 f813 	bl	80084e8 <cos>
 80034c2:	ec53 2b10 	vmov	r2, r3, d0
 80034c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ca:	f7fd f859 	bl	8000580 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4650      	mov	r0, sl
 80034d4:	4659      	mov	r1, fp
 80034d6:	f7fc fe9b 	bl	8000210 <__aeabi_dsub>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7fd f977 	bl	80007d4 <__aeabi_ddiv>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
	v_q1 = -(v_x*cos(q1 + q3))/(l1*cos(q1 + q3)*sin(q1)-l1*sin(q1 + q3)*cos(q1)) -
 80034ea:	4640      	mov	r0, r8
 80034ec:	4649      	mov	r1, r9
 80034ee:	f7fc fe8f 	bl	8000210 <__aeabi_dsub>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f7fd fb19 	bl	8000b30 <__aeabi_d2f>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a49      	ldr	r2, [pc, #292]	; (8003628 <linearJog+0x390>)
 8003502:	6013      	str	r3, [r2, #0]
	v_q2 = v_z;
 8003504:	4b49      	ldr	r3, [pc, #292]	; (800362c <linearJog+0x394>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a49      	ldr	r2, [pc, #292]	; (8003630 <linearJog+0x398>)
 800350a:	6013      	str	r3, [r2, #0]
	v_q3 = (v_x*(l2*cos(q1 + q3) + l1*cos(q1)))/(l1*l2*cos(q1 + q3)*sin(q1) -
 800350c:	4b42      	ldr	r3, [pc, #264]	; (8003618 <linearJog+0x380>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fc ffdd 	bl	80004d0 <__aeabi_f2d>
 8003516:	4604      	mov	r4, r0
 8003518:	460d      	mov	r5, r1
 800351a:	4b40      	ldr	r3, [pc, #256]	; (800361c <linearJog+0x384>)
 800351c:	ed93 7a00 	vldr	s14, [r3]
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <linearJog+0x388>)
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352a:	ee17 0a90 	vmov	r0, s15
 800352e:	f7fc ffcf 	bl	80004d0 <__aeabi_f2d>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	ec43 2b10 	vmov	d0, r2, r3
 800353a:	f004 ffd5 	bl	80084e8 <cos>
 800353e:	ec51 0b10 	vmov	r0, r1, d0
 8003542:	a331      	add	r3, pc, #196	; (adr r3, 8003608 <linearJog+0x370>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f7fd f81a 	bl	8000580 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4690      	mov	r8, r2
 8003552:	4699      	mov	r9, r3
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <linearJog+0x384>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fc ffb9 	bl	80004d0 <__aeabi_f2d>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	ec43 2b10 	vmov	d0, r2, r3
 8003566:	f004 ffbf 	bl	80084e8 <cos>
 800356a:	ec51 0b10 	vmov	r0, r1, d0
 800356e:	a324      	add	r3, pc, #144	; (adr r3, 8003600 <linearJog+0x368>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fd f804 	bl	8000580 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4640      	mov	r0, r8
 800357e:	4649      	mov	r1, r9
 8003580:	f7fc fe48 	bl	8000214 <__adddf3>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4620      	mov	r0, r4
 800358a:	4629      	mov	r1, r5
 800358c:	f7fc fff8 	bl	8000580 <__aeabi_dmul>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	4b20      	ldr	r3, [pc, #128]	; (800361c <linearJog+0x384>)
 800359a:	ed93 7a00 	vldr	s14, [r3]
 800359e:	4b20      	ldr	r3, [pc, #128]	; (8003620 <linearJog+0x388>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a8:	ee17 0a90 	vmov	r0, s15
 80035ac:	f7fc ff90 	bl	80004d0 <__aeabi_f2d>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	ec43 2b10 	vmov	d0, r2, r3
 80035b8:	f004 ff96 	bl	80084e8 <cos>
 80035bc:	ec51 0b10 	vmov	r0, r1, d0
 80035c0:	a313      	add	r3, pc, #76	; (adr r3, 8003610 <linearJog+0x378>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fc ffdb 	bl	8000580 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4690      	mov	r8, r2
 80035d0:	4699      	mov	r9, r3
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <linearJog+0x384>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ff7a 	bl	80004d0 <__aeabi_f2d>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	ec43 2b10 	vmov	d0, r2, r3
 80035e4:	f004 ffd0 	bl	8008588 <sin>
 80035e8:	ec53 2b10 	vmov	r2, r3, d0
 80035ec:	4640      	mov	r0, r8
 80035ee:	4649      	mov	r1, r9
 80035f0:	f7fc ffc6 	bl	8000580 <__aeabi_dmul>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4690      	mov	r8, r2
 80035fa:	4699      	mov	r9, r3
 80035fc:	e01a      	b.n	8003634 <linearJog+0x39c>
 80035fe:	bf00      	nop
 8003600:	00000000 	.word	0x00000000
 8003604:	407e6000 	.word	0x407e6000
 8003608:	00000000 	.word	0x00000000
 800360c:	40722000 	.word	0x40722000
 8003610:	00000000 	.word	0x00000000
 8003614:	41013460 	.word	0x41013460
 8003618:	200001e0 	.word	0x200001e0
 800361c:	200002dc 	.word	0x200002dc
 8003620:	200002d4 	.word	0x200002d4
 8003624:	200002f4 	.word	0x200002f4
 8003628:	20000368 	.word	0x20000368
 800362c:	20000184 	.word	0x20000184
 8003630:	200002cc 	.word	0x200002cc
			l1*l2*sin(q1 + q3)*cos(q1)) + (v_y*(l2*sin(q1 + q3) + l1*sin(q1))) /
 8003634:	4bdc      	ldr	r3, [pc, #880]	; (80039a8 <linearJog+0x710>)
 8003636:	ed93 7a00 	vldr	s14, [r3]
 800363a:	4bdc      	ldr	r3, [pc, #880]	; (80039ac <linearJog+0x714>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003644:	ee17 0a90 	vmov	r0, s15
 8003648:	f7fc ff42 	bl	80004d0 <__aeabi_f2d>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	ec43 2b10 	vmov	d0, r2, r3
 8003654:	f004 ff98 	bl	8008588 <sin>
 8003658:	ec51 0b10 	vmov	r0, r1, d0
 800365c:	a3cc      	add	r3, pc, #816	; (adr r3, 8003990 <linearJog+0x6f8>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f7fc ff8d 	bl	8000580 <__aeabi_dmul>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4692      	mov	sl, r2
 800366c:	469b      	mov	fp, r3
 800366e:	4bce      	ldr	r3, [pc, #824]	; (80039a8 <linearJog+0x710>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff2c 	bl	80004d0 <__aeabi_f2d>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	ec43 2b10 	vmov	d0, r2, r3
 8003680:	f004 ff32 	bl	80084e8 <cos>
 8003684:	ec53 2b10 	vmov	r2, r3, d0
 8003688:	4650      	mov	r0, sl
 800368a:	4659      	mov	r1, fp
 800368c:	f7fc ff78 	bl	8000580 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
	v_q3 = (v_x*(l2*cos(q1 + q3) + l1*cos(q1)))/(l1*l2*cos(q1 + q3)*sin(q1) -
 8003694:	4640      	mov	r0, r8
 8003696:	4649      	mov	r1, r9
 8003698:	f7fc fdba 	bl	8000210 <__aeabi_dsub>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4620      	mov	r0, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	f7fd f896 	bl	80007d4 <__aeabi_ddiv>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4690      	mov	r8, r2
 80036ae:	4699      	mov	r9, r3
			l1*l2*sin(q1 + q3)*cos(q1)) + (v_y*(l2*sin(q1 + q3) + l1*sin(q1))) /
 80036b0:	4bbf      	ldr	r3, [pc, #764]	; (80039b0 <linearJog+0x718>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fc ff0b 	bl	80004d0 <__aeabi_f2d>
 80036ba:	4604      	mov	r4, r0
 80036bc:	460d      	mov	r5, r1
 80036be:	4bba      	ldr	r3, [pc, #744]	; (80039a8 <linearJog+0x710>)
 80036c0:	ed93 7a00 	vldr	s14, [r3]
 80036c4:	4bb9      	ldr	r3, [pc, #740]	; (80039ac <linearJog+0x714>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ce:	ee17 0a90 	vmov	r0, s15
 80036d2:	f7fc fefd 	bl	80004d0 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	ec43 2b10 	vmov	d0, r2, r3
 80036de:	f004 ff53 	bl	8008588 <sin>
 80036e2:	ec51 0b10 	vmov	r0, r1, d0
 80036e6:	a3ac      	add	r3, pc, #688	; (adr r3, 8003998 <linearJog+0x700>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff48 	bl	8000580 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4692      	mov	sl, r2
 80036f6:	469b      	mov	fp, r3
 80036f8:	4bab      	ldr	r3, [pc, #684]	; (80039a8 <linearJog+0x710>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc fee7 	bl	80004d0 <__aeabi_f2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	ec43 2b10 	vmov	d0, r2, r3
 800370a:	f004 ff3d 	bl	8008588 <sin>
 800370e:	ec51 0b10 	vmov	r0, r1, d0
 8003712:	a3a3      	add	r3, pc, #652	; (adr r3, 80039a0 <linearJog+0x708>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f7fc ff32 	bl	8000580 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4650      	mov	r0, sl
 8003722:	4659      	mov	r1, fp
 8003724:	f7fc fd76 	bl	8000214 <__adddf3>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4620      	mov	r0, r4
 800372e:	4629      	mov	r1, r5
 8003730:	f7fc ff26 	bl	8000580 <__aeabi_dmul>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4614      	mov	r4, r2
 800373a:	461d      	mov	r5, r3
			(l1*l2*cos(q1 + q3)*sin(q1) - l1*l2*sin(q1 + q3)*cos(q1));
 800373c:	4b9a      	ldr	r3, [pc, #616]	; (80039a8 <linearJog+0x710>)
 800373e:	ed93 7a00 	vldr	s14, [r3]
 8003742:	4b9a      	ldr	r3, [pc, #616]	; (80039ac <linearJog+0x714>)
 8003744:	edd3 7a00 	vldr	s15, [r3]
 8003748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374c:	ee17 0a90 	vmov	r0, s15
 8003750:	f7fc febe 	bl	80004d0 <__aeabi_f2d>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	ec43 2b10 	vmov	d0, r2, r3
 800375c:	f004 fec4 	bl	80084e8 <cos>
 8003760:	ec51 0b10 	vmov	r0, r1, d0
 8003764:	a38a      	add	r3, pc, #552	; (adr r3, 8003990 <linearJog+0x6f8>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f7fc ff09 	bl	8000580 <__aeabi_dmul>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4692      	mov	sl, r2
 8003774:	469b      	mov	fp, r3
 8003776:	4b8c      	ldr	r3, [pc, #560]	; (80039a8 <linearJog+0x710>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fc fea8 	bl	80004d0 <__aeabi_f2d>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	ec43 2b10 	vmov	d0, r2, r3
 8003788:	f004 fefe 	bl	8008588 <sin>
 800378c:	ec53 2b10 	vmov	r2, r3, d0
 8003790:	4650      	mov	r0, sl
 8003792:	4659      	mov	r1, fp
 8003794:	f7fc fef4 	bl	8000580 <__aeabi_dmul>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4692      	mov	sl, r2
 800379e:	469b      	mov	fp, r3
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <linearJog+0x710>)
 80037a2:	ed93 7a00 	vldr	s14, [r3]
 80037a6:	4b81      	ldr	r3, [pc, #516]	; (80039ac <linearJog+0x714>)
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b0:	ee17 0a90 	vmov	r0, s15
 80037b4:	f7fc fe8c 	bl	80004d0 <__aeabi_f2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	ec43 2b10 	vmov	d0, r2, r3
 80037c0:	f004 fee2 	bl	8008588 <sin>
 80037c4:	ec51 0b10 	vmov	r0, r1, d0
 80037c8:	a371      	add	r3, pc, #452	; (adr r3, 8003990 <linearJog+0x6f8>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f7fc fed7 	bl	8000580 <__aeabi_dmul>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	e9c7 2300 	strd	r2, r3, [r7]
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <linearJog+0x710>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fe76 	bl	80004d0 <__aeabi_f2d>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	ec43 2b10 	vmov	d0, r2, r3
 80037ec:	f004 fe7c 	bl	80084e8 <cos>
 80037f0:	ec53 2b10 	vmov	r2, r3, d0
 80037f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037f8:	f7fc fec2 	bl	8000580 <__aeabi_dmul>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4650      	mov	r0, sl
 8003802:	4659      	mov	r1, fp
 8003804:	f7fc fd04 	bl	8000210 <__aeabi_dsub>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
			l1*l2*sin(q1 + q3)*cos(q1)) + (v_y*(l2*sin(q1 + q3) + l1*sin(q1))) /
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fc ffe0 	bl	80007d4 <__aeabi_ddiv>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4640      	mov	r0, r8
 800381a:	4649      	mov	r1, r9
 800381c:	f7fc fcfa 	bl	8000214 <__adddf3>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f7fd f982 	bl	8000b30 <__aeabi_d2f>
 800382c:	4603      	mov	r3, r0
	v_q3 = (v_x*(l2*cos(q1 + q3) + l1*cos(q1)))/(l1*l2*cos(q1 + q3)*sin(q1) -
 800382e:	4a61      	ldr	r2, [pc, #388]	; (80039b4 <linearJog+0x71c>)
 8003830:	6013      	str	r3, [r2, #0]
	v_q4 = v_rz - (v_x*cos(q1))/(l2*cos(q1 + q3)*sin(q1) - l2*sin(q1 + q3)*cos(q1)) -
 8003832:	4b61      	ldr	r3, [pc, #388]	; (80039b8 <linearJog+0x720>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fe4a 	bl	80004d0 <__aeabi_f2d>
 800383c:	4604      	mov	r4, r0
 800383e:	460d      	mov	r5, r1
 8003840:	4b5e      	ldr	r3, [pc, #376]	; (80039bc <linearJog+0x724>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe43 	bl	80004d0 <__aeabi_f2d>
 800384a:	4680      	mov	r8, r0
 800384c:	4689      	mov	r9, r1
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <linearJog+0x710>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fc fe3c 	bl	80004d0 <__aeabi_f2d>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	ec43 2b10 	vmov	d0, r2, r3
 8003860:	f004 fe42 	bl	80084e8 <cos>
 8003864:	ec53 2b10 	vmov	r2, r3, d0
 8003868:	4640      	mov	r0, r8
 800386a:	4649      	mov	r1, r9
 800386c:	f7fc fe88 	bl	8000580 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4690      	mov	r8, r2
 8003876:	4699      	mov	r9, r3
 8003878:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <linearJog+0x710>)
 800387a:	ed93 7a00 	vldr	s14, [r3]
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <linearJog+0x714>)
 8003880:	edd3 7a00 	vldr	s15, [r3]
 8003884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003888:	ee17 0a90 	vmov	r0, s15
 800388c:	f7fc fe20 	bl	80004d0 <__aeabi_f2d>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	ec43 2b10 	vmov	d0, r2, r3
 8003898:	f004 fe26 	bl	80084e8 <cos>
 800389c:	ec51 0b10 	vmov	r0, r1, d0
 80038a0:	a33d      	add	r3, pc, #244	; (adr r3, 8003998 <linearJog+0x700>)
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f7fc fe6b 	bl	8000580 <__aeabi_dmul>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4692      	mov	sl, r2
 80038b0:	469b      	mov	fp, r3
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <linearJog+0x710>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fe0a 	bl	80004d0 <__aeabi_f2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	ec43 2b10 	vmov	d0, r2, r3
 80038c4:	f004 fe60 	bl	8008588 <sin>
 80038c8:	ec53 2b10 	vmov	r2, r3, d0
 80038cc:	4650      	mov	r0, sl
 80038ce:	4659      	mov	r1, fp
 80038d0:	f7fc fe56 	bl	8000580 <__aeabi_dmul>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4692      	mov	sl, r2
 80038da:	469b      	mov	fp, r3
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <linearJog+0x710>)
 80038de:	ed93 7a00 	vldr	s14, [r3]
 80038e2:	4b32      	ldr	r3, [pc, #200]	; (80039ac <linearJog+0x714>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ec:	ee17 0a90 	vmov	r0, s15
 80038f0:	f7fc fdee 	bl	80004d0 <__aeabi_f2d>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	ec43 2b10 	vmov	d0, r2, r3
 80038fc:	f004 fe44 	bl	8008588 <sin>
 8003900:	ec51 0b10 	vmov	r0, r1, d0
 8003904:	a324      	add	r3, pc, #144	; (adr r3, 8003998 <linearJog+0x700>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f7fc fe39 	bl	8000580 <__aeabi_dmul>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	e9c7 2300 	strd	r2, r3, [r7]
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <linearJog+0x710>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fdd8 	bl	80004d0 <__aeabi_f2d>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	ec43 2b10 	vmov	d0, r2, r3
 8003928:	f004 fdde 	bl	80084e8 <cos>
 800392c:	ec53 2b10 	vmov	r2, r3, d0
 8003930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003934:	f7fc fe24 	bl	8000580 <__aeabi_dmul>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4650      	mov	r0, sl
 800393e:	4659      	mov	r1, fp
 8003940:	f7fc fc66 	bl	8000210 <__aeabi_dsub>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4640      	mov	r0, r8
 800394a:	4649      	mov	r1, r9
 800394c:	f7fc ff42 	bl	80007d4 <__aeabi_ddiv>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4620      	mov	r0, r4
 8003956:	4629      	mov	r1, r5
 8003958:	f7fc fc5a 	bl	8000210 <__aeabi_dsub>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4690      	mov	r8, r2
 8003962:	4699      	mov	r9, r3
			(v_y*sin(q1))/(l2*cos(q1 + q3)*sin(q1) - l2*sin(q1 + q3)*cos(q1));
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <linearJog+0x718>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fdb1 	bl	80004d0 <__aeabi_f2d>
 800396e:	4604      	mov	r4, r0
 8003970:	460d      	mov	r5, r1
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <linearJog+0x710>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fdaa 	bl	80004d0 <__aeabi_f2d>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	ec43 2b10 	vmov	d0, r2, r3
 8003984:	f004 fe00 	bl	8008588 <sin>
 8003988:	ec53 2b10 	vmov	r2, r3, d0
 800398c:	e018      	b.n	80039c0 <linearJog+0x728>
 800398e:	bf00      	nop
 8003990:	00000000 	.word	0x00000000
 8003994:	41013460 	.word	0x41013460
 8003998:	00000000 	.word	0x00000000
 800399c:	40722000 	.word	0x40722000
 80039a0:	00000000 	.word	0x00000000
 80039a4:	407e6000 	.word	0x407e6000
 80039a8:	200002dc 	.word	0x200002dc
 80039ac:	200002d4 	.word	0x200002d4
 80039b0:	200002f4 	.word	0x200002f4
 80039b4:	200002d0 	.word	0x200002d0
 80039b8:	200002f8 	.word	0x200002f8
 80039bc:	200001e0 	.word	0x200001e0
 80039c0:	4620      	mov	r0, r4
 80039c2:	4629      	mov	r1, r5
 80039c4:	f7fc fddc 	bl	8000580 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4b5d      	ldr	r3, [pc, #372]	; (8003b48 <linearJog+0x8b0>)
 80039d2:	ed93 7a00 	vldr	s14, [r3]
 80039d6:	4b5d      	ldr	r3, [pc, #372]	; (8003b4c <linearJog+0x8b4>)
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e0:	ee17 0a90 	vmov	r0, s15
 80039e4:	f7fc fd74 	bl	80004d0 <__aeabi_f2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	ec43 2b10 	vmov	d0, r2, r3
 80039f0:	f004 fd7a 	bl	80084e8 <cos>
 80039f4:	ec51 0b10 	vmov	r0, r1, d0
 80039f8:	a34f      	add	r3, pc, #316	; (adr r3, 8003b38 <linearJog+0x8a0>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f7fc fdbf 	bl	8000580 <__aeabi_dmul>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4692      	mov	sl, r2
 8003a08:	469b      	mov	fp, r3
 8003a0a:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <linearJog+0x8b0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd5e 	bl	80004d0 <__aeabi_f2d>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	ec43 2b10 	vmov	d0, r2, r3
 8003a1c:	f004 fdb4 	bl	8008588 <sin>
 8003a20:	ec53 2b10 	vmov	r2, r3, d0
 8003a24:	4650      	mov	r0, sl
 8003a26:	4659      	mov	r1, fp
 8003a28:	f7fc fdaa 	bl	8000580 <__aeabi_dmul>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4692      	mov	sl, r2
 8003a32:	469b      	mov	fp, r3
 8003a34:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <linearJog+0x8b0>)
 8003a36:	ed93 7a00 	vldr	s14, [r3]
 8003a3a:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <linearJog+0x8b4>)
 8003a3c:	edd3 7a00 	vldr	s15, [r3]
 8003a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a44:	ee17 0a90 	vmov	r0, s15
 8003a48:	f7fc fd42 	bl	80004d0 <__aeabi_f2d>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	ec43 2b10 	vmov	d0, r2, r3
 8003a54:	f004 fd98 	bl	8008588 <sin>
 8003a58:	ec51 0b10 	vmov	r0, r1, d0
 8003a5c:	a336      	add	r3, pc, #216	; (adr r3, 8003b38 <linearJog+0x8a0>)
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f7fc fd8d 	bl	8000580 <__aeabi_dmul>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	e9c7 2300 	strd	r2, r3, [r7]
 8003a6e:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <linearJog+0x8b0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fd2c 	bl	80004d0 <__aeabi_f2d>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	ec43 2b10 	vmov	d0, r2, r3
 8003a80:	f004 fd32 	bl	80084e8 <cos>
 8003a84:	ec53 2b10 	vmov	r2, r3, d0
 8003a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a8c:	f7fc fd78 	bl	8000580 <__aeabi_dmul>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4650      	mov	r0, sl
 8003a96:	4659      	mov	r1, fp
 8003a98:	f7fc fbba 	bl	8000210 <__aeabi_dsub>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fe96 	bl	80007d4 <__aeabi_ddiv>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
	v_q4 = v_rz - (v_x*cos(q1))/(l2*cos(q1 + q3)*sin(q1) - l2*sin(q1 + q3)*cos(q1)) -
 8003aac:	4640      	mov	r0, r8
 8003aae:	4649      	mov	r1, r9
 8003ab0:	f7fc fbae 	bl	8000210 <__aeabi_dsub>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7fd f838 	bl	8000b30 <__aeabi_d2f>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <linearJog+0x8b8>)
 8003ac4:	6013      	str	r3, [r2, #0]

	Drive_Motor(&motor1, -(int16_t)(v_q1*381.97186));
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <linearJog+0x8bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fd00 	bl	80004d0 <__aeabi_f2d>
 8003ad0:	a31b      	add	r3, pc, #108	; (adr r3, 8003b40 <linearJog+0x8a8>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc fd53 	bl	8000580 <__aeabi_dmul>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f7fc fffd 	bl	8000ae0 <__aeabi_d2iz>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	b21b      	sxth	r3, r3
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	425b      	negs	r3, r3
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	b21b      	sxth	r3, r3
 8003af2:	4619      	mov	r1, r3
 8003af4:	4818      	ldr	r0, [pc, #96]	; (8003b58 <linearJog+0x8c0>)
 8003af6:	f7fd faf7 	bl	80010e8 <Drive_Motor>
	Drive_Motor(&motor3, -(int16_t)(v_q3*381.97186));
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <linearJog+0x8c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fce6 	bl	80004d0 <__aeabi_f2d>
 8003b04:	a30e      	add	r3, pc, #56	; (adr r3, 8003b40 <linearJog+0x8a8>)
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f7fc fd39 	bl	8000580 <__aeabi_dmul>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	f7fc ffe3 	bl	8000ae0 <__aeabi_d2iz>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	425b      	negs	r3, r3
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	b21b      	sxth	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	480d      	ldr	r0, [pc, #52]	; (8003b60 <linearJog+0x8c8>)
 8003b2a:	f7fd fadd 	bl	80010e8 <Drive_Motor>

}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	40722000 	.word	0x40722000
 8003b40:	bd1244a6 	.word	0xbd1244a6
 8003b44:	4077df8c 	.word	0x4077df8c
 8003b48:	200002dc 	.word	0x200002dc
 8003b4c:	200002d4 	.word	0x200002d4
 8003b50:	200001dc 	.word	0x200001dc
 8003b54:	20000368 	.word	0x20000368
 8003b58:	200002fc 	.word	0x200002fc
 8003b5c:	200002d0 	.word	0x200002d0
 8003b60:	20000350 	.word	0x20000350

08003b64 <update_q>:

void update_q(void){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
	enc2positionUnit();
 8003b6a:	f000 f865 	bl	8003c38 <enc2positionUnit>
	q1 = q1+(rpos[0]-rpos_old[0]);
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <update_q+0xbc>)
 8003b70:	ed93 7a00 	vldr	s14, [r3]
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <update_q+0xc0>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b7e:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <update_q+0xc4>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b88:	4b27      	ldr	r3, [pc, #156]	; (8003c28 <update_q+0xc4>)
 8003b8a:	edc3 7a00 	vstr	s15, [r3]
	q2 = q2+(rpos[1]-rpos_old[1]);
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <update_q+0xbc>)
 8003b90:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b94:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <update_q+0xc0>)
 8003b96:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b9e:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <update_q+0xc8>)
 8003ba0:	edd3 7a00 	vldr	s15, [r3]
 8003ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <update_q+0xc8>)
 8003baa:	edc3 7a00 	vstr	s15, [r3]
	q3 = q3+(rpos[2]-rpos_old[2]);
 8003bae:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <update_q+0xbc>)
 8003bb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <update_q+0xc0>)
 8003bb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <update_q+0xcc>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <update_q+0xcc>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]
	q4 = q4+(rpos[3]-rpos_old[3]);
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <update_q+0xbc>)
 8003bd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003bd4:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <update_q+0xc0>)
 8003bd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <update_q+0xd0>)
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <update_q+0xd0>)
 8003bea:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i<4;i++){
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	e00c      	b.n	8003c0e <update_q+0xaa>
		rpos_old[i]=rpos[i];
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <update_q+0xbc>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4909      	ldr	r1, [pc, #36]	; (8003c24 <update_q+0xc0>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	601a      	str	r2, [r3, #0]
	for(int i = 0;i<4;i++){
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	ddef      	ble.n	8003bf4 <update_q+0x90>
	}
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000033c 	.word	0x2000033c
 8003c24:	200001bc 	.word	0x200001bc
 8003c28:	200002dc 	.word	0x200002dc
 8003c2c:	200001e8 	.word	0x200001e8
 8003c30:	200002d4 	.word	0x200002d4
 8003c34:	20000378 	.word	0x20000378

08003c38 <enc2positionUnit>:

void enc2positionUnit(void){
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	rpos[0]=(2*M_PI*encoder_1)/8192; //rad
 8003c3c:	4b3a      	ldr	r3, [pc, #232]	; (8003d28 <enc2positionUnit+0xf0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc33 	bl	80004ac <__aeabi_i2d>
 8003c46:	a336      	add	r3, pc, #216	; (adr r3, 8003d20 <enc2positionUnit+0xe8>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f7fc fc98 	bl	8000580 <__aeabi_dmul>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <enc2positionUnit+0xf4>)
 8003c5e:	f7fc fdb9 	bl	80007d4 <__aeabi_ddiv>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f7fc ff61 	bl	8000b30 <__aeabi_d2f>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <enc2positionUnit+0xf8>)
 8003c72:	6013      	str	r3, [r2, #0]
	rpos[1]=(5.0*encoder_2)/1600; //mm
 8003c74:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <enc2positionUnit+0xfc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc17 	bl	80004ac <__aeabi_i2d>
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <enc2positionUnit+0x100>)
 8003c84:	f7fc fc7c 	bl	8000580 <__aeabi_dmul>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <enc2positionUnit+0x104>)
 8003c96:	f7fc fd9d 	bl	80007d4 <__aeabi_ddiv>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f7fc ff45 	bl	8000b30 <__aeabi_d2f>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <enc2positionUnit+0xf8>)
 8003caa:	6053      	str	r3, [r2, #4]
	rpos[2]=(2*M_PI*Enc3_Pos)/4096; //rad
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <enc2positionUnit+0x108>)
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fbfb 	bl	80004ac <__aeabi_i2d>
 8003cb6:	a31a      	add	r3, pc, #104	; (adr r3, 8003d20 <enc2positionUnit+0xe8>)
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f7fc fc60 	bl	8000580 <__aeabi_dmul>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <enc2positionUnit+0x10c>)
 8003cce:	f7fc fd81 	bl	80007d4 <__aeabi_ddiv>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f7fc ff29 	bl	8000b30 <__aeabi_d2f>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <enc2positionUnit+0xf8>)
 8003ce2:	6093      	str	r3, [r2, #8]
	rpos[3]=(2*M_PI*Enc4_Pos)/4096; //rad
 8003ce4:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <enc2positionUnit+0x110>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fc fbdf 	bl	80004ac <__aeabi_i2d>
 8003cee:	a30c      	add	r3, pc, #48	; (adr r3, 8003d20 <enc2positionUnit+0xe8>)
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f7fc fc44 	bl	8000580 <__aeabi_dmul>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <enc2positionUnit+0x10c>)
 8003d06:	f7fc fd65 	bl	80007d4 <__aeabi_ddiv>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fc ff0d 	bl	8000b30 <__aeabi_d2f>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <enc2positionUnit+0xf8>)
 8003d1a:	60d3      	str	r3, [r2, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	54442d18 	.word	0x54442d18
 8003d24:	401921fb 	.word	0x401921fb
 8003d28:	200002e0 	.word	0x200002e0
 8003d2c:	40c00000 	.word	0x40c00000
 8003d30:	2000033c 	.word	0x2000033c
 8003d34:	2000031c 	.word	0x2000031c
 8003d38:	40140000 	.word	0x40140000
 8003d3c:	40990000 	.word	0x40990000
 8003d40:	20000208 	.word	0x20000208
 8003d44:	40b00000 	.word	0x40b00000
 8003d48:	20000180 	.word	0x20000180

08003d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d50:	b672      	cpsid	i
}
 8003d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <Error_Handler+0x8>
	...

08003d58 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003d5c:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d5e:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <MX_SPI2_Init+0x68>)
 8003d60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d70:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003da4:	220a      	movs	r2, #10
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003da8:	4804      	ldr	r0, [pc, #16]	; (8003dbc <MX_SPI2_Init+0x64>)
 8003daa:	f002 f8b7 	bl	8005f1c <HAL_SPI_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003db4:	f7ff ffca 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	2000038c 	.word	0x2000038c
 8003dc0:	40003800 	.word	0x40003800

08003dc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_SPI_MspInit+0x84>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d12c      	bne.n	8003e40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_SPI_MspInit+0x88>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <HAL_SPI_MspInit+0x88>)
 8003df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <HAL_SPI_MspInit+0x88>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <HAL_SPI_MspInit+0x88>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <HAL_SPI_MspInit+0x88>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <HAL_SPI_MspInit+0x88>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	2302      	movs	r3, #2
 8003e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e30:	2305      	movs	r3, #5
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4805      	ldr	r0, [pc, #20]	; (8003e50 <HAL_SPI_MspInit+0x8c>)
 8003e3c:	f001 f8ee 	bl	800501c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003e40:	bf00      	nop
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40003800 	.word	0x40003800
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40020400 	.word	0x40020400

08003e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e68:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6413      	str	r3, [r2, #64]	; 0x40
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <NMI_Handler+0x4>

08003eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <HardFault_Handler+0x4>

08003eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <MemManage_Handler+0x4>

08003eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eba:	e7fe      	b.n	8003eba <BusFault_Handler+0x4>

08003ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec0:	e7fe      	b.n	8003ec0 <UsageFault_Handler+0x4>

08003ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef0:	f000 feac 	bl	8004c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003efe:	f002 fbab 	bl	8006658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000594 	.word	0x20000594

08003f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <USART2_IRQHandler+0x10>)
 8003f12:	f003 fbff 	bl	8007714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000668 	.word	0x20000668

08003f20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f24:	4802      	ldr	r0, [pc, #8]	; (8003f30 <TIM6_DAC_IRQHandler+0x10>)
 8003f26:	f002 fb97 	bl	8006658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000054c 	.word	0x2000054c

08003f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <SystemInit+0x28>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <SystemInit+0x28>)
 8003f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <SystemInit+0x28>)
 8003f4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f4e:	609a      	str	r2, [r3, #8]
#endif
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b096      	sub	sp, #88	; 0x58
 8003f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	615a      	str	r2, [r3, #20]
 8003f90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	2220      	movs	r2, #32
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f004 fa9d 	bl	80084d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fa0:	4a3e      	ldr	r2, [pc, #248]	; (800409c <MX_TIM1_Init+0x13c>)
 8003fa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2999;
 8003fa4:	4b3c      	ldr	r3, [pc, #240]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fa6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003faa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fac:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fb4:	2263      	movs	r2, #99	; 0x63
 8003fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb8:	4b37      	ldr	r3, [pc, #220]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fbe:	4b36      	ldr	r3, [pc, #216]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fc6:	2280      	movs	r2, #128	; 0x80
 8003fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fca:	4833      	ldr	r0, [pc, #204]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fcc:	f002 f82f 	bl	800602e <HAL_TIM_Base_Init>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003fd6:	f7ff feb9 	bl	8003d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	482c      	ldr	r0, [pc, #176]	; (8004098 <MX_TIM1_Init+0x138>)
 8003fe8:	f002 fd00 	bl	80069ec <HAL_TIM_ConfigClockSource>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003ff2:	f7ff feab 	bl	8003d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ff6:	4828      	ldr	r0, [pc, #160]	; (8004098 <MX_TIM1_Init+0x138>)
 8003ff8:	f002 f8d8 	bl	80061ac <HAL_TIM_PWM_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004002:	f7ff fea3 	bl	8003d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800400e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004012:	4619      	mov	r1, r3
 8004014:	4820      	ldr	r0, [pc, #128]	; (8004098 <MX_TIM1_Init+0x138>)
 8004016:	f003 f8e9 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004020:	f7ff fe94 	bl	8003d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004024:	2360      	movs	r3, #96	; 0x60
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8004028:	2332      	movs	r3, #50	; 0x32
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004030:	2300      	movs	r3, #0
 8004032:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004038:	2300      	movs	r3, #0
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800403c:	2300      	movs	r3, #0
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004044:	2204      	movs	r2, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4813      	ldr	r0, [pc, #76]	; (8004098 <MX_TIM1_Init+0x138>)
 800404a:	f002 fc0d 	bl	8006868 <HAL_TIM_PWM_ConfigChannel>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004054:	f7ff fe7a 	bl	8003d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800406c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004070:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4807      	ldr	r0, [pc, #28]	; (8004098 <MX_TIM1_Init+0x138>)
 800407c:	f003 f932 	bl	80072e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004086:	f7ff fe61 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800408a:	4803      	ldr	r0, [pc, #12]	; (8004098 <MX_TIM1_Init+0x138>)
 800408c:	f000 fbb4 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 8004090:	bf00      	nop
 8004092:	3758      	adds	r7, #88	; 0x58
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000594 	.word	0x20000594
 800409c:	40010000 	.word	0x40010000

080040a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08e      	sub	sp, #56	; 0x38
 80040a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040b4:	f107 0320 	add.w	r3, r7, #32
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
 80040cc:	615a      	str	r2, [r3, #20]
 80040ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <MX_TIM2_Init+0xe8>)
 80040d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1499;
 80040d8:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <MX_TIM2_Init+0xe8>)
 80040da:	f240 52db 	movw	r2, #1499	; 0x5db
 80040de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e0:	4b29      	ldr	r3, [pc, #164]	; (8004188 <MX_TIM2_Init+0xe8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <MX_TIM2_Init+0xe8>)
 80040e8:	2277      	movs	r2, #119	; 0x77
 80040ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ec:	4b26      	ldr	r3, [pc, #152]	; (8004188 <MX_TIM2_Init+0xe8>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040f2:	4b25      	ldr	r3, [pc, #148]	; (8004188 <MX_TIM2_Init+0xe8>)
 80040f4:	2280      	movs	r2, #128	; 0x80
 80040f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80040f8:	4823      	ldr	r0, [pc, #140]	; (8004188 <MX_TIM2_Init+0xe8>)
 80040fa:	f001 ff98 	bl	800602e <HAL_TIM_Base_Init>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004104:	f7ff fe22 	bl	8003d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800410e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004112:	4619      	mov	r1, r3
 8004114:	481c      	ldr	r0, [pc, #112]	; (8004188 <MX_TIM2_Init+0xe8>)
 8004116:	f002 fc69 	bl	80069ec <HAL_TIM_ConfigClockSource>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004120:	f7ff fe14 	bl	8003d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004124:	4818      	ldr	r0, [pc, #96]	; (8004188 <MX_TIM2_Init+0xe8>)
 8004126:	f002 f841 	bl	80061ac <HAL_TIM_PWM_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004130:	f7ff fe0c 	bl	8003d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004134:	2300      	movs	r3, #0
 8004136:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800413c:	f107 0320 	add.w	r3, r7, #32
 8004140:	4619      	mov	r1, r3
 8004142:	4811      	ldr	r0, [pc, #68]	; (8004188 <MX_TIM2_Init+0xe8>)
 8004144:	f003 f852 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800414e:	f7ff fdfd 	bl	8003d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004152:	2360      	movs	r3, #96	; 0x60
 8004154:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60;
 8004156:	233c      	movs	r3, #60	; 0x3c
 8004158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004162:	1d3b      	adds	r3, r7, #4
 8004164:	2208      	movs	r2, #8
 8004166:	4619      	mov	r1, r3
 8004168:	4807      	ldr	r0, [pc, #28]	; (8004188 <MX_TIM2_Init+0xe8>)
 800416a:	f002 fb7d 	bl	8006868 <HAL_TIM_PWM_ConfigChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004174:	f7ff fdea 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004178:	4803      	ldr	r0, [pc, #12]	; (8004188 <MX_TIM2_Init+0xe8>)
 800417a:	f000 fb3d 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 800417e:	bf00      	nop
 8004180:	3738      	adds	r7, #56	; 0x38
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200005dc 	.word	0x200005dc

0800418c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	; 0x38
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a0:	f107 0320 	add.w	r3, r7, #32
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
 80041b8:	615a      	str	r2, [r3, #20]
 80041ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041bc:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <MX_TIM3_Init+0xe4>)
 80041be:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <MX_TIM3_Init+0xe8>)
 80041c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1499;
 80041c2:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <MX_TIM3_Init+0xe4>)
 80041c4:	f240 52db 	movw	r2, #1499	; 0x5db
 80041c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <MX_TIM3_Init+0xe4>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <MX_TIM3_Init+0xe4>)
 80041d2:	2263      	movs	r2, #99	; 0x63
 80041d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041d6:	4b26      	ldr	r3, [pc, #152]	; (8004270 <MX_TIM3_Init+0xe4>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041dc:	4b24      	ldr	r3, [pc, #144]	; (8004270 <MX_TIM3_Init+0xe4>)
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041e2:	4823      	ldr	r0, [pc, #140]	; (8004270 <MX_TIM3_Init+0xe4>)
 80041e4:	f001 ff23 	bl	800602e <HAL_TIM_Base_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80041ee:	f7ff fdad 	bl	8003d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041fc:	4619      	mov	r1, r3
 80041fe:	481c      	ldr	r0, [pc, #112]	; (8004270 <MX_TIM3_Init+0xe4>)
 8004200:	f002 fbf4 	bl	80069ec <HAL_TIM_ConfigClockSource>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800420a:	f7ff fd9f 	bl	8003d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800420e:	4818      	ldr	r0, [pc, #96]	; (8004270 <MX_TIM3_Init+0xe4>)
 8004210:	f001 ffcc 	bl	80061ac <HAL_TIM_PWM_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800421a:	f7ff fd97 	bl	8003d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	4619      	mov	r1, r3
 800422c:	4810      	ldr	r0, [pc, #64]	; (8004270 <MX_TIM3_Init+0xe4>)
 800422e:	f002 ffdd 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004238:	f7ff fd88 	bl	8003d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800423c:	2360      	movs	r3, #96	; 0x60
 800423e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8004240:	2332      	movs	r3, #50	; 0x32
 8004242:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	2200      	movs	r2, #0
 8004250:	4619      	mov	r1, r3
 8004252:	4807      	ldr	r0, [pc, #28]	; (8004270 <MX_TIM3_Init+0xe4>)
 8004254:	f002 fb08 	bl	8006868 <HAL_TIM_PWM_ConfigChannel>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800425e:	f7ff fd75 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004262:	4803      	ldr	r0, [pc, #12]	; (8004270 <MX_TIM3_Init+0xe4>)
 8004264:	f000 fac8 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 8004268:	bf00      	nop
 800426a:	3738      	adds	r7, #56	; 0x38
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	200004bc 	.word	0x200004bc
 8004274:	40000400 	.word	0x40000400

08004278 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08e      	sub	sp, #56	; 0x38
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800427e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	605a      	str	r2, [r3, #4]
 8004288:	609a      	str	r2, [r3, #8]
 800428a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800428c:	f107 0320 	add.w	r3, r7, #32
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	611a      	str	r2, [r3, #16]
 80042a4:	615a      	str	r2, [r3, #20]
 80042a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <MX_TIM4_Init+0xe4>)
 80042aa:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <MX_TIM4_Init+0xe8>)
 80042ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1499;
 80042ae:	4b2b      	ldr	r3, [pc, #172]	; (800435c <MX_TIM4_Init+0xe4>)
 80042b0:	f240 52db 	movw	r2, #1499	; 0x5db
 80042b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <MX_TIM4_Init+0xe4>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <MX_TIM4_Init+0xe4>)
 80042be:	2263      	movs	r2, #99	; 0x63
 80042c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <MX_TIM4_Init+0xe4>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042c8:	4b24      	ldr	r3, [pc, #144]	; (800435c <MX_TIM4_Init+0xe4>)
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80042ce:	4823      	ldr	r0, [pc, #140]	; (800435c <MX_TIM4_Init+0xe4>)
 80042d0:	f001 fead 	bl	800602e <HAL_TIM_Base_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80042da:	f7ff fd37 	bl	8003d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80042e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042e8:	4619      	mov	r1, r3
 80042ea:	481c      	ldr	r0, [pc, #112]	; (800435c <MX_TIM4_Init+0xe4>)
 80042ec:	f002 fb7e 	bl	80069ec <HAL_TIM_ConfigClockSource>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80042f6:	f7ff fd29 	bl	8003d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80042fa:	4818      	ldr	r0, [pc, #96]	; (800435c <MX_TIM4_Init+0xe4>)
 80042fc:	f001 ff56 	bl	80061ac <HAL_TIM_PWM_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004306:	f7ff fd21 	bl	8003d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800430e:	2300      	movs	r3, #0
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004312:	f107 0320 	add.w	r3, r7, #32
 8004316:	4619      	mov	r1, r3
 8004318:	4810      	ldr	r0, [pc, #64]	; (800435c <MX_TIM4_Init+0xe4>)
 800431a:	f002 ff67 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004324:	f7ff fd12 	bl	8003d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004328:	2360      	movs	r3, #96	; 0x60
 800432a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800432c:	2332      	movs	r3, #50	; 0x32
 800432e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	2200      	movs	r2, #0
 800433c:	4619      	mov	r1, r3
 800433e:	4807      	ldr	r0, [pc, #28]	; (800435c <MX_TIM4_Init+0xe4>)
 8004340:	f002 fa92 	bl	8006868 <HAL_TIM_PWM_ConfigChannel>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800434a:	f7ff fcff 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800434e:	4803      	ldr	r0, [pc, #12]	; (800435c <MX_TIM4_Init+0xe4>)
 8004350:	f000 fa52 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 8004354:	bf00      	nop
 8004356:	3738      	adds	r7, #56	; 0x38
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	2000042c 	.word	0x2000042c
 8004360:	40000800 	.word	0x40000800

08004364 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08c      	sub	sp, #48	; 0x30
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	2224      	movs	r2, #36	; 0x24
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f004 f8b0 	bl	80084d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004380:	4b20      	ldr	r3, [pc, #128]	; (8004404 <MX_TIM5_Init+0xa0>)
 8004382:	4a21      	ldr	r2, [pc, #132]	; (8004408 <MX_TIM5_Init+0xa4>)
 8004384:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004386:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <MX_TIM5_Init+0xa0>)
 8004388:	2200      	movs	r2, #0
 800438a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <MX_TIM5_Init+0xa0>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <MX_TIM5_Init+0xa0>)
 8004394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004398:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <MX_TIM5_Init+0xa0>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <MX_TIM5_Init+0xa0>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043a6:	2303      	movs	r3, #3
 80043a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043ae:	2301      	movs	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043ba:	2300      	movs	r3, #0
 80043bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043be:	2301      	movs	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043c2:	2300      	movs	r3, #0
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	4619      	mov	r1, r3
 80043d0:	480c      	ldr	r0, [pc, #48]	; (8004404 <MX_TIM5_Init+0xa0>)
 80043d2:	f002 f80d 	bl	80063f0 <HAL_TIM_Encoder_Init>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80043dc:	f7ff fcb6 	bl	8003d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80043e8:	1d3b      	adds	r3, r7, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4805      	ldr	r0, [pc, #20]	; (8004404 <MX_TIM5_Init+0xa0>)
 80043ee:	f002 fefd 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80043f8:	f7ff fca8 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80043fc:	bf00      	nop
 80043fe:	3730      	adds	r7, #48	; 0x30
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000474 	.word	0x20000474
 8004408:	40000c00 	.word	0x40000c00

0800440c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004412:	463b      	mov	r3, r7
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <MX_TIM6_Init+0x64>)
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <MX_TIM6_Init+0x68>)
 800441e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <MX_TIM6_Init+0x64>)
 8004422:	2259      	movs	r2, #89	; 0x59
 8004424:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <MX_TIM6_Init+0x64>)
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <MX_TIM6_Init+0x64>)
 800442e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004432:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <MX_TIM6_Init+0x64>)
 8004436:	2200      	movs	r2, #0
 8004438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800443a:	480d      	ldr	r0, [pc, #52]	; (8004470 <MX_TIM6_Init+0x64>)
 800443c:	f001 fdf7 	bl	800602e <HAL_TIM_Base_Init>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004446:	f7ff fc81 	bl	8003d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004452:	463b      	mov	r3, r7
 8004454:	4619      	mov	r1, r3
 8004456:	4806      	ldr	r0, [pc, #24]	; (8004470 <MX_TIM6_Init+0x64>)
 8004458:	f002 fec8 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004462:	f7ff fc73 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	2000054c 	.word	0x2000054c
 8004474:	40001000 	.word	0x40001000

08004478 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08c      	sub	sp, #48	; 0x30
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800447e:	f107 030c 	add.w	r3, r7, #12
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f004 f826 	bl	80084d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004494:	4b22      	ldr	r3, [pc, #136]	; (8004520 <MX_TIM8_Init+0xa8>)
 8004496:	4a23      	ldr	r2, [pc, #140]	; (8004524 <MX_TIM8_Init+0xac>)
 8004498:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800449a:	4b21      	ldr	r3, [pc, #132]	; (8004520 <MX_TIM8_Init+0xa8>)
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <MX_TIM8_Init+0xa8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <MX_TIM8_Init+0xa8>)
 80044a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ae:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <MX_TIM8_Init+0xa8>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <MX_TIM8_Init+0xa8>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <MX_TIM8_Init+0xa8>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80044c8:	2301      	movs	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044d4:	2300      	movs	r3, #0
 80044d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044d8:	2301      	movs	r3, #1
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044dc:	2300      	movs	r3, #0
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	4619      	mov	r1, r3
 80044ea:	480d      	ldr	r0, [pc, #52]	; (8004520 <MX_TIM8_Init+0xa8>)
 80044ec:	f001 ff80 	bl	80063f0 <HAL_TIM_Encoder_Init>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80044f6:	f7ff fc29 	bl	8003d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4806      	ldr	r0, [pc, #24]	; (8004520 <MX_TIM8_Init+0xa8>)
 8004508:	f002 fe70 	bl	80071ec <HAL_TIMEx_MasterConfigSynchronization>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004512:	f7ff fc1b 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004516:	bf00      	nop
 8004518:	3730      	adds	r7, #48	; 0x30
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200003e4 	.word	0x200003e4
 8004524:	40010400 	.word	0x40010400

08004528 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
 800453c:	615a      	str	r2, [r3, #20]
 800453e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <MX_TIM11_Init+0x94>)
 8004542:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <MX_TIM11_Init+0x98>)
 8004544:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <MX_TIM11_Init+0x94>)
 8004548:	2200      	movs	r2, #0
 800454a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <MX_TIM11_Init+0x94>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <MX_TIM11_Init+0x94>)
 8004554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004558:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <MX_TIM11_Init+0x94>)
 800455c:	2200      	movs	r2, #0
 800455e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <MX_TIM11_Init+0x94>)
 8004562:	2200      	movs	r2, #0
 8004564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004566:	4815      	ldr	r0, [pc, #84]	; (80045bc <MX_TIM11_Init+0x94>)
 8004568:	f001 fd61 	bl	800602e <HAL_TIM_Base_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004572:	f7ff fbeb 	bl	8003d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004576:	4811      	ldr	r0, [pc, #68]	; (80045bc <MX_TIM11_Init+0x94>)
 8004578:	f001 fe18 	bl	80061ac <HAL_TIM_PWM_Init>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004582:	f7ff fbe3 	bl	8003d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004586:	2360      	movs	r3, #96	; 0x60
 8004588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004596:	1d3b      	adds	r3, r7, #4
 8004598:	2200      	movs	r2, #0
 800459a:	4619      	mov	r1, r3
 800459c:	4807      	ldr	r0, [pc, #28]	; (80045bc <MX_TIM11_Init+0x94>)
 800459e:	f002 f963 	bl	8006868 <HAL_TIM_PWM_ConfigChannel>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80045a8:	f7ff fbd0 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80045ac:	4803      	ldr	r0, [pc, #12]	; (80045bc <MX_TIM11_Init+0x94>)
 80045ae:	f000 f923 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 80045b2:	bf00      	nop
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000504 	.word	0x20000504
 80045c0:	40014800 	.word	0x40014800

080045c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a44      	ldr	r2, [pc, #272]	; (80046e4 <HAL_TIM_Base_MspInit+0x120>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d116      	bne.n	8004604 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6453      	str	r3, [r2, #68]	; 0x44
 80045e6:	4b40      	ldr	r3, [pc, #256]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2100      	movs	r1, #0
 80045f6:	2019      	movs	r0, #25
 80045f8:	f000 fc47 	bl	8004e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045fc:	2019      	movs	r0, #25
 80045fe:	f000 fc60 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004602:	e06a      	b.n	80046da <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460c:	d10e      	bne.n	800462c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	69bb      	ldr	r3, [r7, #24]
}
 800462a:	e056      	b.n	80046da <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2e      	ldr	r2, [pc, #184]	; (80046ec <HAL_TIM_Base_MspInit+0x128>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10e      	bne.n	8004654 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004640:	f043 0302 	orr.w	r3, r3, #2
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697b      	ldr	r3, [r7, #20]
}
 8004652:	e042      	b.n	80046da <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a25      	ldr	r2, [pc, #148]	; (80046f0 <HAL_TIM_Base_MspInit+0x12c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d10e      	bne.n	800467c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	6413      	str	r3, [r2, #64]	; 0x40
 800466e:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
}
 800467a:	e02e      	b.n	80046da <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM6)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <HAL_TIM_Base_MspInit+0x130>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d116      	bne.n	80046b4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004690:	f043 0310 	orr.w	r3, r3, #16
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80046a2:	2200      	movs	r2, #0
 80046a4:	2100      	movs	r1, #0
 80046a6:	2036      	movs	r0, #54	; 0x36
 80046a8:	f000 fbef 	bl	8004e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046ac:	2036      	movs	r0, #54	; 0x36
 80046ae:	f000 fc08 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
}
 80046b2:	e012      	b.n	80046da <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM11)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <HAL_TIM_Base_MspInit+0x134>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10d      	bne.n	80046da <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_TIM_Base_MspInit+0x124>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
}
 80046da:	bf00      	nop
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40001000 	.word	0x40001000
 80046f8:	40014800 	.word	0x40014800

080046fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	; 0x30
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004704:	f107 031c 	add.w	r3, r7, #28
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a32      	ldr	r2, [pc, #200]	; (80047e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d12c      	bne.n	8004778 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	4b31      	ldr	r3, [pc, #196]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a30      	ldr	r2, [pc, #192]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
 800472e:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	6313      	str	r3, [r2, #48]	; 0x30
 800474a:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004756:	2303      	movs	r3, #3
 8004758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475a:	2302      	movs	r3, #2
 800475c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004762:	2300      	movs	r3, #0
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004766:	2302      	movs	r3, #2
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800476a:	f107 031c 	add.w	r3, r7, #28
 800476e:	4619      	mov	r1, r3
 8004770:	481e      	ldr	r0, [pc, #120]	; (80047ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8004772:	f000 fc53 	bl	800501c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004776:	e030      	b.n	80047da <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM8)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d12b      	bne.n	80047da <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800478c:	f043 0302 	orr.w	r3, r3, #2
 8004790:	6453      	str	r3, [r2, #68]	; 0x44
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	6313      	str	r3, [r2, #48]	; 0x30
 80047ae:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047ba:	23c0      	movs	r3, #192	; 0xc0
 80047bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	2302      	movs	r3, #2
 80047c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c6:	2300      	movs	r3, #0
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80047ca:	2303      	movs	r3, #3
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ce:	f107 031c 	add.w	r3, r7, #28
 80047d2:	4619      	mov	r1, r3
 80047d4:	4807      	ldr	r0, [pc, #28]	; (80047f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80047d6:	f000 fc21 	bl	800501c <HAL_GPIO_Init>
}
 80047da:	bf00      	nop
 80047dc:	3730      	adds	r7, #48	; 0x30
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40020000 	.word	0x40020000
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40020800 	.word	0x40020800

080047f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	; 0x30
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_TIM_MspPostInit+0x18c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d11f      	bne.n	800485a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	4b5a      	ldr	r3, [pc, #360]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	4a59      	ldr	r2, [pc, #356]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6313      	str	r3, [r2, #48]	; 0x30
 800482a:	4b57      	ldr	r3, [pc, #348]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PUL_M4_Pin;
 8004836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800483a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004844:	2300      	movs	r3, #0
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004848:	2301      	movs	r3, #1
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M4_GPIO_Port, &GPIO_InitStruct);
 800484c:	f107 031c 	add.w	r3, r7, #28
 8004850:	4619      	mov	r1, r3
 8004852:	484e      	ldr	r0, [pc, #312]	; (800498c <HAL_TIM_MspPostInit+0x194>)
 8004854:	f000 fbe2 	bl	800501c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004858:	e090      	b.n	800497c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d11f      	bne.n	80048a4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	4b47      	ldr	r3, [pc, #284]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	4a46      	ldr	r2, [pc, #280]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	6313      	str	r3, [r2, #48]	; 0x30
 8004874:	4b44      	ldr	r3, [pc, #272]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PUL_M3_Pin;
 8004880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004886:	2302      	movs	r3, #2
 8004888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	2300      	movs	r3, #0
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488e:	2300      	movs	r3, #0
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004892:	2301      	movs	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M3_GPIO_Port, &GPIO_InitStruct);
 8004896:	f107 031c 	add.w	r3, r7, #28
 800489a:	4619      	mov	r1, r3
 800489c:	483c      	ldr	r0, [pc, #240]	; (8004990 <HAL_TIM_MspPostInit+0x198>)
 800489e:	f000 fbbd 	bl	800501c <HAL_GPIO_Init>
}
 80048a2:	e06b      	b.n	800497c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM3)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3a      	ldr	r2, [pc, #232]	; (8004994 <HAL_TIM_MspPostInit+0x19c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d11e      	bne.n	80048ec <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	4b35      	ldr	r3, [pc, #212]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	4a34      	ldr	r2, [pc, #208]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6313      	str	r3, [r2, #48]	; 0x30
 80048be:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PUL_M1_Pin;
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048da:	2302      	movs	r3, #2
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M1_GPIO_Port, &GPIO_InitStruct);
 80048de:	f107 031c 	add.w	r3, r7, #28
 80048e2:	4619      	mov	r1, r3
 80048e4:	4829      	ldr	r0, [pc, #164]	; (800498c <HAL_TIM_MspPostInit+0x194>)
 80048e6:	f000 fb99 	bl	800501c <HAL_GPIO_Init>
}
 80048ea:	e047      	b.n	800497c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM4)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a29      	ldr	r2, [pc, #164]	; (8004998 <HAL_TIM_MspPostInit+0x1a0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d11e      	bne.n	8004934 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a22      	ldr	r2, [pc, #136]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004900:	f043 0302 	orr.w	r3, r3, #2
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b20      	ldr	r3, [pc, #128]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_M2_Pin;
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004916:	2302      	movs	r3, #2
 8004918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491e:	2300      	movs	r3, #0
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004922:	2302      	movs	r3, #2
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M2_GPIO_Port, &GPIO_InitStruct);
 8004926:	f107 031c 	add.w	r3, r7, #28
 800492a:	4619      	mov	r1, r3
 800492c:	4818      	ldr	r0, [pc, #96]	; (8004990 <HAL_TIM_MspPostInit+0x198>)
 800492e:	f000 fb75 	bl	800501c <HAL_GPIO_Init>
}
 8004932:	e023      	b.n	800497c <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM11)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a18      	ldr	r2, [pc, #96]	; (800499c <HAL_TIM_MspPostInit+0x1a4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d11e      	bne.n	800497c <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	6313      	str	r3, [r2, #48]	; 0x30
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <HAL_TIM_MspPostInit+0x190>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800495a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800495e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004960:	2302      	movs	r3, #2
 8004962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004968:	2300      	movs	r3, #0
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800496c:	2303      	movs	r3, #3
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004970:	f107 031c 	add.w	r3, r7, #28
 8004974:	4619      	mov	r1, r3
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <HAL_TIM_MspPostInit+0x198>)
 8004978:	f000 fb50 	bl	800501c <HAL_GPIO_Init>
}
 800497c:	bf00      	nop
 800497e:	3730      	adds	r7, #48	; 0x30
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40010000 	.word	0x40010000
 8004988:	40023800 	.word	0x40023800
 800498c:	40020000 	.word	0x40020000
 8004990:	40020400 	.word	0x40020400
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40014800 	.word	0x40014800

080049a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049a6:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <MX_USART2_UART_Init+0x50>)
 80049a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049c4:	4b09      	ldr	r3, [pc, #36]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049c6:	220c      	movs	r2, #12
 80049c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049d6:	4805      	ldr	r0, [pc, #20]	; (80049ec <MX_USART2_UART_Init+0x4c>)
 80049d8:	f002 fcea 	bl	80073b0 <HAL_UART_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80049e2:	f7ff f9b3 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000668 	.word	0x20000668
 80049f0:	40004400 	.word	0x40004400

080049f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <MX_USART3_UART_Init+0x50>)
 80049fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a06:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a1a:	220c      	movs	r2, #12
 8004a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a2a:	4805      	ldr	r0, [pc, #20]	; (8004a40 <MX_USART3_UART_Init+0x4c>)
 8004a2c:	f002 fcc0 	bl	80073b0 <HAL_UART_Init>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a36:	f7ff f989 	bl	8003d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000624 	.word	0x20000624
 8004a44:	40004800 	.word	0x40004800

08004a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a50:	f107 031c 	add.w	r3, r7, #28
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a36      	ldr	r2, [pc, #216]	; (8004b40 <HAL_UART_MspInit+0xf8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d134      	bne.n	8004ad4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a78:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7a:	4b32      	ldr	r3, [pc, #200]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	4a2d      	ldr	r2, [pc, #180]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6313      	str	r3, [r2, #48]	; 0x30
 8004a96:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ab2:	2307      	movs	r3, #7
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab6:	f107 031c 	add.w	r3, r7, #28
 8004aba:	4619      	mov	r1, r3
 8004abc:	4822      	ldr	r0, [pc, #136]	; (8004b48 <HAL_UART_MspInit+0x100>)
 8004abe:	f000 faad 	bl	800501c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2026      	movs	r0, #38	; 0x26
 8004ac8:	f000 f9df 	bl	8004e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004acc:	2026      	movs	r0, #38	; 0x26
 8004ace:	f000 f9f8 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004ad2:	e031      	b.n	8004b38 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_UART_MspInit+0x104>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d12c      	bne.n	8004b38 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aec:	6413      	str	r3, [r2, #64]	; 0x40
 8004aee:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <HAL_UART_MspInit+0xfc>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAX485_TX_Pin|MAX485_RX_Pin;
 8004b16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b24:	2303      	movs	r3, #3
 8004b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b28:	2307      	movs	r3, #7
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2c:	f107 031c 	add.w	r3, r7, #28
 8004b30:	4619      	mov	r1, r3
 8004b32:	4807      	ldr	r0, [pc, #28]	; (8004b50 <HAL_UART_MspInit+0x108>)
 8004b34:	f000 fa72 	bl	800501c <HAL_GPIO_Init>
}
 8004b38:	bf00      	nop
 8004b3a:	3730      	adds	r7, #48	; 0x30
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40004400 	.word	0x40004400
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40020000 	.word	0x40020000
 8004b4c:	40004800 	.word	0x40004800
 8004b50:	40020800 	.word	0x40020800

08004b54 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack      /* set stack pointer */
 8004b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b5a:	e003      	b.n	8004b64 <LoopCopyDataInit>

08004b5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b62:	3104      	adds	r1, #4

08004b64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b64:	480b      	ldr	r0, [pc, #44]	; (8004b94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b6c:	d3f6      	bcc.n	8004b5c <CopyDataInit>
  ldr  r2, =_sbss
 8004b6e:	4a0b      	ldr	r2, [pc, #44]	; (8004b9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b70:	e002      	b.n	8004b78 <LoopFillZerobss>

08004b72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b74:	f842 3b04 	str.w	r3, [r2], #4

08004b78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b7c:	d3f9      	bcc.n	8004b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b7e:	f7ff f9d9 	bl	8003f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b82:	f003 fc85 	bl	8008490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b86:	f7fc fcc9 	bl	800151c <main>
  bx  lr    
 8004b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b90:	0800ac58 	.word	0x0800ac58
  ldr  r0, =_sdata
 8004b94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b98:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8004b9c:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8004ba0:	200006b0 	.word	0x200006b0

08004ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ba4:	e7fe      	b.n	8004ba4 <ADC_IRQHandler>
	...

08004ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <HAL_Init+0x40>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0d      	ldr	r2, [pc, #52]	; (8004be8 <HAL_Init+0x40>)
 8004bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_Init+0x40>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_Init+0x40>)
 8004bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bc4:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_Init+0x40>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a07      	ldr	r2, [pc, #28]	; (8004be8 <HAL_Init+0x40>)
 8004bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bd0:	2003      	movs	r0, #3
 8004bd2:	f000 f94f 	bl	8004e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f000 f808 	bl	8004bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bdc:	f7ff f93a 	bl	8003e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40023c00 	.word	0x40023c00

08004bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <HAL_InitTick+0x54>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_InitTick+0x58>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f967 	bl	8004ede <HAL_SYSTICK_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e00e      	b.n	8004c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d80a      	bhi.n	8004c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c20:	2200      	movs	r2, #0
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	f04f 30ff 	mov.w	r0, #4294967295
 8004c28:	f000 f92f 	bl	8004e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c2c:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <HAL_InitTick+0x5c>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	e000      	b.n	8004c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000040 	.word	0x20000040
 8004c44:	20000048 	.word	0x20000048
 8004c48:	20000044 	.word	0x20000044

08004c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_IncTick+0x20>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_IncTick+0x24>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <HAL_IncTick+0x24>)
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000048 	.word	0x20000048
 8004c70:	200006ac 	.word	0x200006ac

08004c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return uwTick;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_GetTick+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	200006ac 	.word	0x200006ac

08004c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c94:	f7ff ffee 	bl	8004c74 <HAL_GetTick>
 8004c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d005      	beq.n	8004cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_Delay+0x44>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cb2:	bf00      	nop
 8004cb4:	f7ff ffde 	bl	8004c74 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d8f7      	bhi.n	8004cb4 <HAL_Delay+0x28>
  {
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000048 	.word	0x20000048

08004cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d06:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <__NVIC_SetPriorityGrouping+0x44>)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	60d3      	str	r3, [r2, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <__NVIC_GetPriorityGrouping+0x18>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	f003 0307 	and.w	r3, r3, #7
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	e000ed00 	.word	0xe000ed00

08004d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	db0b      	blt.n	8004d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	4907      	ldr	r1, [pc, #28]	; (8004d70 <__NVIC_EnableIRQ+0x38>)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	2001      	movs	r0, #1
 8004d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e000e100 	.word	0xe000e100

08004d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	6039      	str	r1, [r7, #0]
 8004d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	db0a      	blt.n	8004d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	490c      	ldr	r1, [pc, #48]	; (8004dc0 <__NVIC_SetPriority+0x4c>)
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	0112      	lsls	r2, r2, #4
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	440b      	add	r3, r1
 8004d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d9c:	e00a      	b.n	8004db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4908      	ldr	r1, [pc, #32]	; (8004dc4 <__NVIC_SetPriority+0x50>)
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	3b04      	subs	r3, #4
 8004dac:	0112      	lsls	r2, r2, #4
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	440b      	add	r3, r1
 8004db2:	761a      	strb	r2, [r3, #24]
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	e000e100 	.word	0xe000e100
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f1c3 0307 	rsb	r3, r3, #7
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	bf28      	it	cs
 8004de6:	2304      	movcs	r3, #4
 8004de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2b06      	cmp	r3, #6
 8004df0:	d902      	bls.n	8004df8 <NVIC_EncodePriority+0x30>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3b03      	subs	r3, #3
 8004df6:	e000      	b.n	8004dfa <NVIC_EncodePriority+0x32>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e10:	f04f 31ff 	mov.w	r1, #4294967295
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	43d9      	mvns	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	4313      	orrs	r3, r2
         );
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3724      	adds	r7, #36	; 0x24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e40:	d301      	bcc.n	8004e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e42:	2301      	movs	r3, #1
 8004e44:	e00f      	b.n	8004e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e46:	4a0a      	ldr	r2, [pc, #40]	; (8004e70 <SysTick_Config+0x40>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e4e:	210f      	movs	r1, #15
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	f7ff ff8e 	bl	8004d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <SysTick_Config+0x40>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <SysTick_Config+0x40>)
 8004e60:	2207      	movs	r2, #7
 8004e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	e000e010 	.word	0xe000e010

08004e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ff29 	bl	8004cd4 <__NVIC_SetPriorityGrouping>
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	4603      	mov	r3, r0
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e9c:	f7ff ff3e 	bl	8004d1c <__NVIC_GetPriorityGrouping>
 8004ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f7ff ff8e 	bl	8004dc8 <NVIC_EncodePriority>
 8004eac:	4602      	mov	r2, r0
 8004eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ff5d 	bl	8004d74 <__NVIC_SetPriority>
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff ff31 	bl	8004d38 <__NVIC_EnableIRQ>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ffa2 	bl	8004e30 <SysTick_Config>
 8004eec:	4603      	mov	r3, r0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f04:	f7ff feb6 	bl	8004c74 <HAL_GetTick>
 8004f08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d008      	beq.n	8004f28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e052      	b.n	8004fce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0216 	bic.w	r2, r2, #22
 8004f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <HAL_DMA_Abort+0x62>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0208 	bic.w	r2, r2, #8
 8004f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f78:	e013      	b.n	8004fa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f7a:	f7ff fe7b 	bl	8004c74 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d90c      	bls.n	8004fa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2203      	movs	r2, #3
 8004f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e015      	b.n	8004fce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e4      	bne.n	8004f7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	223f      	movs	r2, #63	; 0x3f
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e00c      	b.n	800500e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2205      	movs	r2, #5
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	e165      	b.n	8005304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4013      	ands	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	f040 8154 	bne.w	80052fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d005      	beq.n	800506e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800506a:	2b02      	cmp	r3, #2
 800506c:	d130      	bne.n	80050d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	2203      	movs	r2, #3
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050a4:	2201      	movs	r2, #1
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 0201 	and.w	r2, r3, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d017      	beq.n	800510c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	2203      	movs	r2, #3
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d123      	bne.n	8005160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	08da      	lsrs	r2, r3, #3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3208      	adds	r2, #8
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	220f      	movs	r2, #15
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	08da      	lsrs	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3208      	adds	r2, #8
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	2203      	movs	r2, #3
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 0203 	and.w	r2, r3, #3
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80ae 	beq.w	80052fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b5d      	ldr	r3, [pc, #372]	; (800531c <HAL_GPIO_Init+0x300>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	4a5c      	ldr	r2, [pc, #368]	; (800531c <HAL_GPIO_Init+0x300>)
 80051ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051b0:	6453      	str	r3, [r2, #68]	; 0x44
 80051b2:	4b5a      	ldr	r3, [pc, #360]	; (800531c <HAL_GPIO_Init+0x300>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051be:	4a58      	ldr	r2, [pc, #352]	; (8005320 <HAL_GPIO_Init+0x304>)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3302      	adds	r3, #2
 80051c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a4f      	ldr	r2, [pc, #316]	; (8005324 <HAL_GPIO_Init+0x308>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d025      	beq.n	8005236 <HAL_GPIO_Init+0x21a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a4e      	ldr	r2, [pc, #312]	; (8005328 <HAL_GPIO_Init+0x30c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01f      	beq.n	8005232 <HAL_GPIO_Init+0x216>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a4d      	ldr	r2, [pc, #308]	; (800532c <HAL_GPIO_Init+0x310>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d019      	beq.n	800522e <HAL_GPIO_Init+0x212>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a4c      	ldr	r2, [pc, #304]	; (8005330 <HAL_GPIO_Init+0x314>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_GPIO_Init+0x20e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a4b      	ldr	r2, [pc, #300]	; (8005334 <HAL_GPIO_Init+0x318>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00d      	beq.n	8005226 <HAL_GPIO_Init+0x20a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <HAL_GPIO_Init+0x31c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <HAL_GPIO_Init+0x206>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a49      	ldr	r2, [pc, #292]	; (800533c <HAL_GPIO_Init+0x320>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_GPIO_Init+0x202>
 800521a:	2306      	movs	r3, #6
 800521c:	e00c      	b.n	8005238 <HAL_GPIO_Init+0x21c>
 800521e:	2307      	movs	r3, #7
 8005220:	e00a      	b.n	8005238 <HAL_GPIO_Init+0x21c>
 8005222:	2305      	movs	r3, #5
 8005224:	e008      	b.n	8005238 <HAL_GPIO_Init+0x21c>
 8005226:	2304      	movs	r3, #4
 8005228:	e006      	b.n	8005238 <HAL_GPIO_Init+0x21c>
 800522a:	2303      	movs	r3, #3
 800522c:	e004      	b.n	8005238 <HAL_GPIO_Init+0x21c>
 800522e:	2302      	movs	r3, #2
 8005230:	e002      	b.n	8005238 <HAL_GPIO_Init+0x21c>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_GPIO_Init+0x21c>
 8005236:	2300      	movs	r3, #0
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	f002 0203 	and.w	r2, r2, #3
 800523e:	0092      	lsls	r2, r2, #2
 8005240:	4093      	lsls	r3, r2
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005248:	4935      	ldr	r1, [pc, #212]	; (8005320 <HAL_GPIO_Init+0x304>)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	3302      	adds	r3, #2
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005256:	4b3a      	ldr	r3, [pc, #232]	; (8005340 <HAL_GPIO_Init+0x324>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800527a:	4a31      	ldr	r2, [pc, #196]	; (8005340 <HAL_GPIO_Init+0x324>)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_GPIO_Init+0x324>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052a4:	4a26      	ldr	r2, [pc, #152]	; (8005340 <HAL_GPIO_Init+0x324>)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052aa:	4b25      	ldr	r3, [pc, #148]	; (8005340 <HAL_GPIO_Init+0x324>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ce:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <HAL_GPIO_Init+0x324>)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_GPIO_Init+0x324>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052f8:	4a11      	ldr	r2, [pc, #68]	; (8005340 <HAL_GPIO_Init+0x324>)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	f67f ae96 	bls.w	8005038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3724      	adds	r7, #36	; 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800
 8005320:	40013800 	.word	0x40013800
 8005324:	40020000 	.word	0x40020000
 8005328:	40020400 	.word	0x40020400
 800532c:	40020800 	.word	0x40020800
 8005330:	40020c00 	.word	0x40020c00
 8005334:	40021000 	.word	0x40021000
 8005338:	40021400 	.word	0x40021400
 800533c:	40021800 	.word	0x40021800
 8005340:	40013c00 	.word	0x40013c00

08005344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
 8005360:	e001      	b.n	8005366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
 8005380:	4613      	mov	r3, r2
 8005382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005384:	787b      	ldrb	r3, [r7, #1]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005390:	e003      	b.n	800539a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005392:	887b      	ldrh	r3, [r7, #2]
 8005394:	041a      	lsls	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	619a      	str	r2, [r3, #24]
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	603b      	str	r3, [r7, #0]
 80053b6:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_PWREx_EnableOverDrive+0x90>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <HAL_PWREx_EnableOverDrive+0x90>)
 80053bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c0:	6413      	str	r3, [r2, #64]	; 0x40
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_PWREx_EnableOverDrive+0x90>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80053ce:	4b1b      	ldr	r3, [pc, #108]	; (800543c <HAL_PWREx_EnableOverDrive+0x94>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053d4:	f7ff fc4e 	bl	8004c74 <HAL_GetTick>
 80053d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053da:	e009      	b.n	80053f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053dc:	f7ff fc4a 	bl	8004c74 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ea:	d901      	bls.n	80053f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e01f      	b.n	8005430 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_PWREx_EnableOverDrive+0x98>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d1ee      	bne.n	80053dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005404:	f7ff fc36 	bl	8004c74 <HAL_GetTick>
 8005408:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800540a:	e009      	b.n	8005420 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800540c:	f7ff fc32 	bl	8004c74 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800541a:	d901      	bls.n	8005420 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e007      	b.n	8005430 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <HAL_PWREx_EnableOverDrive+0x98>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800542c:	d1ee      	bne.n	800540c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	420e0040 	.word	0x420e0040
 8005440:	40007000 	.word	0x40007000
 8005444:	420e0044 	.word	0x420e0044

08005448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0cc      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b68      	ldr	r3, [pc, #416]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d90c      	bls.n	8005484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0b8      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800549c:	4b59      	ldr	r3, [pc, #356]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a58      	ldr	r2, [pc, #352]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b4:	4b53      	ldr	r3, [pc, #332]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	4a52      	ldr	r2, [pc, #328]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c0:	4b50      	ldr	r3, [pc, #320]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	494d      	ldr	r1, [pc, #308]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d044      	beq.n	8005568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	4b47      	ldr	r3, [pc, #284]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d119      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e07f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d003      	beq.n	8005506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005502:	2b03      	cmp	r3, #3
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005506:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e06f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005516:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e067      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005526:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f023 0203 	bic.w	r2, r3, #3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4934      	ldr	r1, [pc, #208]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	4313      	orrs	r3, r2
 8005536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005538:	f7ff fb9c 	bl	8004c74 <HAL_GetTick>
 800553c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	e00a      	b.n	8005556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005540:	f7ff fb98 	bl	8004c74 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	; 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e04f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 020c 	and.w	r2, r3, #12
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	429a      	cmp	r2, r3
 8005566:	d1eb      	bne.n	8005540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d20c      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e032      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4916      	ldr	r1, [pc, #88]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	490e      	ldr	r1, [pc, #56]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ce:	f000 f855 	bl	800567c <HAL_RCC_GetSysClockFreq>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	490a      	ldr	r1, [pc, #40]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 80055e0:	5ccb      	ldrb	r3, [r1, r3]
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	4a09      	ldr	r2, [pc, #36]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <HAL_RCC_ClockConfig+0x1c8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fafc 	bl	8004bec <HAL_InitTick>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023c00 	.word	0x40023c00
 8005604:	40023800 	.word	0x40023800
 8005608:	0800a9a0 	.word	0x0800a9a0
 800560c:	20000040 	.word	0x20000040
 8005610:	20000044 	.word	0x20000044

08005614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000040 	.word	0x20000040

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a9b      	lsrs	r3, r3, #10
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	0800a9b0 	.word	0x0800a9b0

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffdc 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0b5b      	lsrs	r3, r3, #13
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	0800a9b0 	.word	0x0800a9b0

0800567c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800567c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005680:	b088      	sub	sp, #32
 8005682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005698:	4bce      	ldr	r3, [pc, #824]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	f200 818d 	bhi.w	80059c0 <HAL_RCC_GetSysClockFreq+0x344>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <HAL_RCC_GetSysClockFreq+0x30>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080059c1 	.word	0x080059c1
 80056b4:	080059c1 	.word	0x080059c1
 80056b8:	080059c1 	.word	0x080059c1
 80056bc:	080056e7 	.word	0x080056e7
 80056c0:	080059c1 	.word	0x080059c1
 80056c4:	080059c1 	.word	0x080059c1
 80056c8:	080059c1 	.word	0x080059c1
 80056cc:	080056ed 	.word	0x080056ed
 80056d0:	080059c1 	.word	0x080059c1
 80056d4:	080059c1 	.word	0x080059c1
 80056d8:	080059c1 	.word	0x080059c1
 80056dc:	08005861 	.word	0x08005861
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056e0:	4bbd      	ldr	r3, [pc, #756]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80056e2:	61bb      	str	r3, [r7, #24]
       break;
 80056e4:	e16f      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056e6:	4bbd      	ldr	r3, [pc, #756]	; (80059dc <HAL_RCC_GetSysClockFreq+0x360>)
 80056e8:	61bb      	str	r3, [r7, #24]
      break;
 80056ea:	e16c      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056ec:	4bb9      	ldr	r3, [pc, #740]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056f6:	4bb7      	ldr	r3, [pc, #732]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d053      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005702:	4bb4      	ldr	r3, [pc, #720]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	461a      	mov	r2, r3
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	ea02 0400 	and.w	r4, r2, r0
 800571a:	603c      	str	r4, [r7, #0]
 800571c:	400b      	ands	r3, r1
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	014b      	lsls	r3, r1, #5
 8005732:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005736:	0142      	lsls	r2, r0, #5
 8005738:	4610      	mov	r0, r2
 800573a:	4619      	mov	r1, r3
 800573c:	4623      	mov	r3, r4
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	462b      	mov	r3, r5
 8005742:	eb61 0103 	sbc.w	r1, r1, r3
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	018b      	lsls	r3, r1, #6
 8005750:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005754:	0182      	lsls	r2, r0, #6
 8005756:	1a12      	subs	r2, r2, r0
 8005758:	eb63 0301 	sbc.w	r3, r3, r1
 800575c:	f04f 0000 	mov.w	r0, #0
 8005760:	f04f 0100 	mov.w	r1, #0
 8005764:	00d9      	lsls	r1, r3, #3
 8005766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800576a:	00d0      	lsls	r0, r2, #3
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4621      	mov	r1, r4
 8005772:	1852      	adds	r2, r2, r1
 8005774:	4629      	mov	r1, r5
 8005776:	eb43 0101 	adc.w	r1, r3, r1
 800577a:	460b      	mov	r3, r1
 800577c:	f04f 0000 	mov.w	r0, #0
 8005780:	f04f 0100 	mov.w	r1, #0
 8005784:	0259      	lsls	r1, r3, #9
 8005786:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800578a:	0250      	lsls	r0, r2, #9
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4610      	mov	r0, r2
 8005792:	4619      	mov	r1, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	461a      	mov	r2, r3
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	f7fb fa18 	bl	8000bd0 <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e04c      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057aa:	4b8a      	ldr	r3, [pc, #552]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	099b      	lsrs	r3, r3, #6
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	ea02 0a00 	and.w	sl, r2, r0
 80057c2:	ea03 0b01 	and.w	fp, r3, r1
 80057c6:	4650      	mov	r0, sl
 80057c8:	4659      	mov	r1, fp
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	014b      	lsls	r3, r1, #5
 80057d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057d8:	0142      	lsls	r2, r0, #5
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	ebb0 000a 	subs.w	r0, r0, sl
 80057e2:	eb61 010b 	sbc.w	r1, r1, fp
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	018b      	lsls	r3, r1, #6
 80057f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057f4:	0182      	lsls	r2, r0, #6
 80057f6:	1a12      	subs	r2, r2, r0
 80057f8:	eb63 0301 	sbc.w	r3, r3, r1
 80057fc:	f04f 0000 	mov.w	r0, #0
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	00d9      	lsls	r1, r3, #3
 8005806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800580a:	00d0      	lsls	r0, r2, #3
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	eb12 020a 	adds.w	r2, r2, sl
 8005814:	eb43 030b 	adc.w	r3, r3, fp
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	0299      	lsls	r1, r3, #10
 8005822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005826:	0290      	lsls	r0, r2, #10
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	461a      	mov	r2, r3
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	f7fb f9ca 	bl	8000bd0 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005844:	4b63      	ldr	r3, [pc, #396]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	3301      	adds	r3, #1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	61bb      	str	r3, [r7, #24]
      break;
 800585e:	e0b2      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005860:	4b5c      	ldr	r3, [pc, #368]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005868:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800586a:	4b5a      	ldr	r3, [pc, #360]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d04d      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005876:	4b57      	ldr	r3, [pc, #348]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	099b      	lsrs	r3, r3, #6
 800587c:	461a      	mov	r2, r3
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005886:	f04f 0100 	mov.w	r1, #0
 800588a:	ea02 0800 	and.w	r8, r2, r0
 800588e:	ea03 0901 	and.w	r9, r3, r1
 8005892:	4640      	mov	r0, r8
 8005894:	4649      	mov	r1, r9
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	014b      	lsls	r3, r1, #5
 80058a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058a4:	0142      	lsls	r2, r0, #5
 80058a6:	4610      	mov	r0, r2
 80058a8:	4619      	mov	r1, r3
 80058aa:	ebb0 0008 	subs.w	r0, r0, r8
 80058ae:	eb61 0109 	sbc.w	r1, r1, r9
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	018b      	lsls	r3, r1, #6
 80058bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058c0:	0182      	lsls	r2, r0, #6
 80058c2:	1a12      	subs	r2, r2, r0
 80058c4:	eb63 0301 	sbc.w	r3, r3, r1
 80058c8:	f04f 0000 	mov.w	r0, #0
 80058cc:	f04f 0100 	mov.w	r1, #0
 80058d0:	00d9      	lsls	r1, r3, #3
 80058d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058d6:	00d0      	lsls	r0, r2, #3
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	eb12 0208 	adds.w	r2, r2, r8
 80058e0:	eb43 0309 	adc.w	r3, r3, r9
 80058e4:	f04f 0000 	mov.w	r0, #0
 80058e8:	f04f 0100 	mov.w	r1, #0
 80058ec:	0259      	lsls	r1, r3, #9
 80058ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058f2:	0250      	lsls	r0, r2, #9
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4610      	mov	r0, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	461a      	mov	r2, r3
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	f7fb f964 	bl	8000bd0 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e04a      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005912:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	461a      	mov	r2, r3
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	ea02 0400 	and.w	r4, r2, r0
 800592a:	ea03 0501 	and.w	r5, r3, r1
 800592e:	4620      	mov	r0, r4
 8005930:	4629      	mov	r1, r5
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	014b      	lsls	r3, r1, #5
 800593c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005940:	0142      	lsls	r2, r0, #5
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	1b00      	subs	r0, r0, r4
 8005948:	eb61 0105 	sbc.w	r1, r1, r5
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	018b      	lsls	r3, r1, #6
 8005956:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800595a:	0182      	lsls	r2, r0, #6
 800595c:	1a12      	subs	r2, r2, r0
 800595e:	eb63 0301 	sbc.w	r3, r3, r1
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f04f 0100 	mov.w	r1, #0
 800596a:	00d9      	lsls	r1, r3, #3
 800596c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005970:	00d0      	lsls	r0, r2, #3
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	1912      	adds	r2, r2, r4
 8005978:	eb45 0303 	adc.w	r3, r5, r3
 800597c:	f04f 0000 	mov.w	r0, #0
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	0299      	lsls	r1, r3, #10
 8005986:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800598a:	0290      	lsls	r0, r2, #10
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	461a      	mov	r2, r3
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	f7fb f918 	bl	8000bd0 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0f1b      	lsrs	r3, r3, #28
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	61bb      	str	r3, [r7, #24]
      break;
 80059be:	e002      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80059c2:	61bb      	str	r3, [r7, #24]
      break;
 80059c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059c6:	69bb      	ldr	r3, [r7, #24]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	007a1200 	.word	0x007a1200

080059e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e28d      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8083 	beq.w	8005b06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a00:	4b94      	ldr	r3, [pc, #592]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d019      	beq.n	8005a40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a0c:	4b91      	ldr	r3, [pc, #580]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d106      	bne.n	8005a26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a18:	4b8e      	ldr	r3, [pc, #568]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a24:	d00c      	beq.n	8005a40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a26:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a2e:	2b0c      	cmp	r3, #12
 8005a30:	d112      	bne.n	8005a58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a32:	4b88      	ldr	r3, [pc, #544]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a3e:	d10b      	bne.n	8005a58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	4b84      	ldr	r3, [pc, #528]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05b      	beq.n	8005b04 <HAL_RCC_OscConfig+0x124>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d157      	bne.n	8005b04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e25a      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d106      	bne.n	8005a70 <HAL_RCC_OscConfig+0x90>
 8005a62:	4b7c      	ldr	r3, [pc, #496]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a7b      	ldr	r2, [pc, #492]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e01d      	b.n	8005aac <HAL_RCC_OscConfig+0xcc>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0xb4>
 8005a7a:	4b76      	ldr	r3, [pc, #472]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a75      	ldr	r2, [pc, #468]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b73      	ldr	r3, [pc, #460]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a72      	ldr	r2, [pc, #456]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0xcc>
 8005a94:	4b6f      	ldr	r3, [pc, #444]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6e      	ldr	r2, [pc, #440]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b6c      	ldr	r3, [pc, #432]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6b      	ldr	r2, [pc, #428]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7ff f8de 	bl	8004c74 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005abc:	f7ff f8da 	bl	8004c74 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e21f      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b61      	ldr	r3, [pc, #388]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0xdc>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7ff f8ca 	bl	8004c74 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7ff f8c6 	bl	8004c74 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e20b      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	4b57      	ldr	r3, [pc, #348]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x104>
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d06f      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b12:	4b50      	ldr	r3, [pc, #320]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d017      	beq.n	8005b4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b1e:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d105      	bne.n	8005b36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b2a:	4b4a      	ldr	r3, [pc, #296]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b36:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b3e:	2b0c      	cmp	r3, #12
 8005b40:	d11c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b42:	4b44      	ldr	r3, [pc, #272]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d116      	bne.n	8005b7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4e:	4b41      	ldr	r3, [pc, #260]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_RCC_OscConfig+0x186>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d001      	beq.n	8005b66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e1d3      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b66:	4b3b      	ldr	r3, [pc, #236]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4937      	ldr	r1, [pc, #220]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7a:	e03a      	b.n	8005bf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d020      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b84:	4b34      	ldr	r3, [pc, #208]	; (8005c58 <HAL_RCC_OscConfig+0x278>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8a:	f7ff f873 	bl	8004c74 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b92:	f7ff f86f 	bl	8004c74 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e1b4      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb0:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4925      	ldr	r1, [pc, #148]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	600b      	str	r3, [r1, #0]
 8005bc4:	e015      	b.n	8005bf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bc6:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <HAL_RCC_OscConfig+0x278>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7ff f852 	bl	8004c74 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd4:	f7ff f84e 	bl	8004c74 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e193      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be6:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d036      	beq.n	8005c6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c06:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <HAL_RCC_OscConfig+0x27c>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7ff f832 	bl	8004c74 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c14:	f7ff f82e 	bl	8004c74 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e173      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x234>
 8005c32:	e01b      	b.n	8005c6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c34:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <HAL_RCC_OscConfig+0x27c>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7ff f81b 	bl	8004c74 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c40:	e00e      	b.n	8005c60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c42:	f7ff f817 	bl	8004c74 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d907      	bls.n	8005c60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e15c      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
 8005c54:	40023800 	.word	0x40023800
 8005c58:	42470000 	.word	0x42470000
 8005c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c60:	4b8a      	ldr	r3, [pc, #552]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1ea      	bne.n	8005c42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8097 	beq.w	8005da8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c7e:	4b83      	ldr	r3, [pc, #524]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10f      	bne.n	8005caa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	4b7f      	ldr	r3, [pc, #508]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	4a7e      	ldr	r2, [pc, #504]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9a:	4b7c      	ldr	r3, [pc, #496]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005caa:	4b79      	ldr	r3, [pc, #484]	; (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d118      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cb6:	4b76      	ldr	r3, [pc, #472]	; (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a75      	ldr	r2, [pc, #468]	; (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc2:	f7fe ffd7 	bl	8004c74 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cca:	f7fe ffd3 	bl	8004c74 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e118      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	4b6c      	ldr	r3, [pc, #432]	; (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0f0      	beq.n	8005cca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d106      	bne.n	8005cfe <HAL_RCC_OscConfig+0x31e>
 8005cf0:	4b66      	ldr	r3, [pc, #408]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a65      	ldr	r2, [pc, #404]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfc:	e01c      	b.n	8005d38 <HAL_RCC_OscConfig+0x358>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b05      	cmp	r3, #5
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x340>
 8005d06:	4b61      	ldr	r3, [pc, #388]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	4a60      	ldr	r2, [pc, #384]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d0c:	f043 0304 	orr.w	r3, r3, #4
 8005d10:	6713      	str	r3, [r2, #112]	; 0x70
 8005d12:	4b5e      	ldr	r3, [pc, #376]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d16:	4a5d      	ldr	r2, [pc, #372]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0x358>
 8005d20:	4b5a      	ldr	r3, [pc, #360]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	4a59      	ldr	r2, [pc, #356]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d2c:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	4a56      	ldr	r2, [pc, #344]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d32:	f023 0304 	bic.w	r3, r3, #4
 8005d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d015      	beq.n	8005d6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fe ff98 	bl	8004c74 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d48:	f7fe ff94 	bl	8004c74 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0d7      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5e:	4b4b      	ldr	r3, [pc, #300]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0ee      	beq.n	8005d48 <HAL_RCC_OscConfig+0x368>
 8005d6a:	e014      	b.n	8005d96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fe ff82 	bl	8004c74 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d72:	e00a      	b.n	8005d8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d74:	f7fe ff7e 	bl	8004c74 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e0c1      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8a:	4b40      	ldr	r3, [pc, #256]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1ee      	bne.n	8005d74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	4a3a      	ldr	r2, [pc, #232]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80ad 	beq.w	8005f0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005db2:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d060      	beq.n	8005e80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d145      	bne.n	8005e52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc6:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <HAL_RCC_OscConfig+0x4b4>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fe ff52 	bl	8004c74 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fe ff4e 	bl	8004c74 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e093      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	491b      	ldr	r1, [pc, #108]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <HAL_RCC_OscConfig+0x4b4>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2a:	f7fe ff23 	bl	8004c74 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e32:	f7fe ff1f 	bl	8004c74 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e064      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e44:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f0      	beq.n	8005e32 <HAL_RCC_OscConfig+0x452>
 8005e50:	e05c      	b.n	8005f0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <HAL_RCC_OscConfig+0x4b4>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fe ff0c 	bl	8004c74 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fe ff08 	bl	8004c74 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e04d      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x480>
 8005e7e:	e045      	b.n	8005f0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e040      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40007000 	.word	0x40007000
 8005e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e98:	4b1f      	ldr	r3, [pc, #124]	; (8005f18 <HAL_RCC_OscConfig+0x538>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d030      	beq.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d129      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d122      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ec8:	4013      	ands	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d119      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d10f      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d107      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800

08005f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e07b      	b.n	8006026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d108      	bne.n	8005f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3e:	d009      	beq.n	8005f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	61da      	str	r2, [r3, #28]
 8005f46:	e005      	b.n	8005f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fd ff28 	bl	8003dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	ea42 0103 	orr.w	r1, r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	f003 0104 	and.w	r1, r3, #4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	f003 0210 	and.w	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69da      	ldr	r2, [r3, #28]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e041      	b.n	80060c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fe fab5 	bl	80045c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f000 fdad 	bl	8006bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d001      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e04e      	b.n	8006182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a23      	ldr	r2, [pc, #140]	; (8006190 <HAL_TIM_Base_Start_IT+0xc4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d022      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d01d      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <HAL_TIM_Base_Start_IT+0xc8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d018      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <HAL_TIM_Base_Start_IT+0xcc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <HAL_TIM_Base_Start_IT+0xd0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d111      	bne.n	8006170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b06      	cmp	r3, #6
 800615c:	d010      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	e007      	b.n	8006180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40001800 	.word	0x40001800

080061ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e041      	b.n	8006242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f839 	bl	800624a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f000 fcee 	bl	8006bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d109      	bne.n	8006284 <HAL_TIM_PWM_Start+0x24>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e022      	b.n	80062ca <HAL_TIM_PWM_Start+0x6a>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d109      	bne.n	800629e <HAL_TIM_PWM_Start+0x3e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	e015      	b.n	80062ca <HAL_TIM_PWM_Start+0x6a>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d109      	bne.n	80062b8 <HAL_TIM_PWM_Start+0x58>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e008      	b.n	80062ca <HAL_TIM_PWM_Start+0x6a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07c      	b.n	80063cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <HAL_TIM_PWM_Start+0x82>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e0:	e013      	b.n	800630a <HAL_TIM_PWM_Start+0xaa>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x92>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f0:	e00b      	b.n	800630a <HAL_TIM_PWM_Start+0xaa>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0xa2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006300:	e003      	b.n	800630a <HAL_TIM_PWM_Start+0xaa>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2201      	movs	r2, #1
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 ff44 	bl	80071a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <HAL_TIM_PWM_Start+0x174>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIM_PWM_Start+0xcc>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <HAL_TIM_PWM_Start+0x178>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d101      	bne.n	8006330 <HAL_TIM_PWM_Start+0xd0>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <HAL_TIM_PWM_Start+0xd2>
 8006330:	2300      	movs	r3, #0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006344:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a22      	ldr	r2, [pc, #136]	; (80063d4 <HAL_TIM_PWM_Start+0x174>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d022      	beq.n	8006396 <HAL_TIM_PWM_Start+0x136>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006358:	d01d      	beq.n	8006396 <HAL_TIM_PWM_Start+0x136>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <HAL_TIM_PWM_Start+0x17c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d018      	beq.n	8006396 <HAL_TIM_PWM_Start+0x136>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <HAL_TIM_PWM_Start+0x180>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <HAL_TIM_PWM_Start+0x136>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <HAL_TIM_PWM_Start+0x184>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00e      	beq.n	8006396 <HAL_TIM_PWM_Start+0x136>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <HAL_TIM_PWM_Start+0x178>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d009      	beq.n	8006396 <HAL_TIM_PWM_Start+0x136>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <HAL_TIM_PWM_Start+0x188>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_TIM_PWM_Start+0x136>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <HAL_TIM_PWM_Start+0x18c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d111      	bne.n	80063ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b06      	cmp	r3, #6
 80063a6:	d010      	beq.n	80063ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	e007      	b.n	80063ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40001800 	.word	0x40001800

080063f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e097      	b.n	8006534 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fe f96f 	bl	80046fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006434:	f023 0307 	bic.w	r3, r3, #7
 8006438:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f000 fbc1 	bl	8006bcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	4313      	orrs	r3, r2
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006490:	f023 030c 	bic.w	r3, r3, #12
 8006494:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800649c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	4313      	orrs	r3, r2
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	011a      	lsls	r2, r3, #4
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	031b      	lsls	r3, r3, #12
 80064c0:	4313      	orrs	r3, r2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	4313      	orrs	r3, r2
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800654c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006554:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800655c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006564:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d110      	bne.n	800658e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d102      	bne.n	8006578 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006572:	7b7b      	ldrb	r3, [r7, #13]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d001      	beq.n	800657c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e069      	b.n	8006650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800658c:	e031      	b.n	80065f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d110      	bne.n	80065b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d102      	bne.n	80065a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800659a:	7b3b      	ldrb	r3, [r7, #12]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d001      	beq.n	80065a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e055      	b.n	8006650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065b4:	e01d      	b.n	80065f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d108      	bne.n	80065ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065bc:	7bbb      	ldrb	r3, [r7, #14]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d105      	bne.n	80065ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065c2:	7b7b      	ldrb	r3, [r7, #13]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d102      	bne.n	80065ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065c8:	7b3b      	ldrb	r3, [r7, #12]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d001      	beq.n	80065d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e03e      	b.n	8006650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_TIM_Encoder_Start+0xc4>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d008      	beq.n	8006610 <HAL_TIM_Encoder_Start+0xd4>
 80065fe:	e00f      	b.n	8006620 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2201      	movs	r2, #1
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fdc9 	bl	80071a0 <TIM_CCxChannelCmd>
      break;
 800660e:	e016      	b.n	800663e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2201      	movs	r2, #1
 8006616:	2104      	movs	r1, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fdc1 	bl	80071a0 <TIM_CCxChannelCmd>
      break;
 800661e:	e00e      	b.n	800663e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2201      	movs	r2, #1
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fdb9 	bl	80071a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	2104      	movs	r1, #4
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fdb2 	bl	80071a0 <TIM_CCxChannelCmd>
      break;
 800663c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d122      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d11b      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0202 	mvn.w	r2, #2
 8006684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa77 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa69 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fa7a 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d122      	bne.n	8006708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d11b      	bne.n	8006708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0204 	mvn.w	r2, #4
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa4d 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa3f 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa50 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b08      	cmp	r3, #8
 8006714:	d122      	bne.n	800675c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b08      	cmp	r3, #8
 8006722:	d11b      	bne.n	800675c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0208 	mvn.w	r2, #8
 800672c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2204      	movs	r2, #4
 8006732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa23 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 8006748:	e005      	b.n	8006756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa15 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fa26 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b10      	cmp	r3, #16
 8006768:	d122      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b10      	cmp	r3, #16
 8006776:	d11b      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0210 	mvn.w	r2, #16
 8006780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2208      	movs	r2, #8
 8006786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9f9 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 800679c:	e005      	b.n	80067aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9eb 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f9fc 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d10e      	bne.n	80067dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d107      	bne.n	80067dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0201 	mvn.w	r2, #1
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fa fe8a 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b80      	cmp	r3, #128	; 0x80
 80067e8:	d10e      	bne.n	8006808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d107      	bne.n	8006808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fdca 	bl	800739c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d10e      	bne.n	8006834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d107      	bne.n	8006834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f9c1 	bl	8006bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b20      	cmp	r3, #32
 8006840:	d10e      	bne.n	8006860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b20      	cmp	r3, #32
 800684e:	d107      	bne.n	8006860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0220 	mvn.w	r2, #32
 8006858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fd94 	bl	8007388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006882:	2302      	movs	r3, #2
 8006884:	e0ae      	b.n	80069e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b0c      	cmp	r3, #12
 8006892:	f200 809f 	bhi.w	80069d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006896:	a201      	add	r2, pc, #4	; (adr r2, 800689c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068d1 	.word	0x080068d1
 80068a0:	080069d5 	.word	0x080069d5
 80068a4:	080069d5 	.word	0x080069d5
 80068a8:	080069d5 	.word	0x080069d5
 80068ac:	08006911 	.word	0x08006911
 80068b0:	080069d5 	.word	0x080069d5
 80068b4:	080069d5 	.word	0x080069d5
 80068b8:	080069d5 	.word	0x080069d5
 80068bc:	08006953 	.word	0x08006953
 80068c0:	080069d5 	.word	0x080069d5
 80068c4:	080069d5 	.word	0x080069d5
 80068c8:	080069d5 	.word	0x080069d5
 80068cc:	08006993 	.word	0x08006993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fa18 	bl	8006d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0208 	orr.w	r2, r2, #8
 80068ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0204 	bic.w	r2, r2, #4
 80068fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6999      	ldr	r1, [r3, #24]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	619a      	str	r2, [r3, #24]
      break;
 800690e:	e064      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fa68 	bl	8006dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800692a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6999      	ldr	r1, [r3, #24]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	021a      	lsls	r2, r3, #8
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	619a      	str	r2, [r3, #24]
      break;
 8006950:	e043      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fabd 	bl	8006ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0208 	orr.w	r2, r2, #8
 800696c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0204 	bic.w	r2, r2, #4
 800697c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	61da      	str	r2, [r3, #28]
      break;
 8006990:	e023      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fb11 	bl	8006fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69d9      	ldr	r1, [r3, #28]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	021a      	lsls	r2, r3, #8
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	61da      	str	r2, [r3, #28]
      break;
 80069d2:	e002      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
      break;
 80069d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIM_ConfigClockSource+0x1c>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e0b4      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x186>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a40:	d03e      	beq.n	8006ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8006a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a46:	f200 8087 	bhi.w	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4e:	f000 8086 	beq.w	8006b5e <HAL_TIM_ConfigClockSource+0x172>
 8006a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a56:	d87f      	bhi.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a58:	2b70      	cmp	r3, #112	; 0x70
 8006a5a:	d01a      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0xa6>
 8006a5c:	2b70      	cmp	r3, #112	; 0x70
 8006a5e:	d87b      	bhi.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a60:	2b60      	cmp	r3, #96	; 0x60
 8006a62:	d050      	beq.n	8006b06 <HAL_TIM_ConfigClockSource+0x11a>
 8006a64:	2b60      	cmp	r3, #96	; 0x60
 8006a66:	d877      	bhi.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a68:	2b50      	cmp	r3, #80	; 0x50
 8006a6a:	d03c      	beq.n	8006ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8006a6c:	2b50      	cmp	r3, #80	; 0x50
 8006a6e:	d873      	bhi.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a70:	2b40      	cmp	r3, #64	; 0x40
 8006a72:	d058      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x13a>
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d86f      	bhi.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a78:	2b30      	cmp	r3, #48	; 0x30
 8006a7a:	d064      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0x15a>
 8006a7c:	2b30      	cmp	r3, #48	; 0x30
 8006a7e:	d86b      	bhi.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d060      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0x15a>
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d867      	bhi.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d05c      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0x15a>
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d05a      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0x15a>
 8006a90:	e062      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6899      	ldr	r1, [r3, #8]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f000 fb5d 	bl	8007160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	609a      	str	r2, [r3, #8]
      break;
 8006abe:	e04f      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	6899      	ldr	r1, [r3, #8]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f000 fb46 	bl	8007160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ae2:	609a      	str	r2, [r3, #8]
      break;
 8006ae4:	e03c      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6859      	ldr	r1, [r3, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f000 faba 	bl	800706c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2150      	movs	r1, #80	; 0x50
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fb13 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006b04:	e02c      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	6859      	ldr	r1, [r3, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	461a      	mov	r2, r3
 8006b14:	f000 fad9 	bl	80070ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2160      	movs	r1, #96	; 0x60
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fb03 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006b24:	e01c      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	6859      	ldr	r1, [r3, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f000 fa9a 	bl	800706c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2140      	movs	r1, #64	; 0x40
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 faf3 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006b44:	e00c      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f000 faea 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006b56:	e003      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b5c:	e000      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a40      	ldr	r2, [pc, #256]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d00f      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a3d      	ldr	r2, [pc, #244]	; (8006ce4 <TIM_Base_SetConfig+0x118>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a3c      	ldr	r2, [pc, #240]	; (8006ce8 <TIM_Base_SetConfig+0x11c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a3b      	ldr	r2, [pc, #236]	; (8006cec <TIM_Base_SetConfig+0x120>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a3a      	ldr	r2, [pc, #232]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d02b      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2c:	d027      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2c      	ldr	r2, [pc, #176]	; (8006ce4 <TIM_Base_SetConfig+0x118>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d023      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <TIM_Base_SetConfig+0x11c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01f      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <TIM_Base_SetConfig+0x120>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01b      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d017      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a28      	ldr	r2, [pc, #160]	; (8006cf4 <TIM_Base_SetConfig+0x128>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a27      	ldr	r2, [pc, #156]	; (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00f      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a26      	ldr	r2, [pc, #152]	; (8006cfc <TIM_Base_SetConfig+0x130>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00b      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <TIM_Base_SetConfig+0x134>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <TIM_Base_SetConfig+0x138>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a23      	ldr	r2, [pc, #140]	; (8006d08 <TIM_Base_SetConfig+0x13c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d108      	bne.n	8006c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d103      	bne.n	8006ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	615a      	str	r2, [r3, #20]
}
 8006cd2:	bf00      	nop
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800
 8006d00:	40001800 	.word	0x40001800
 8006d04:	40001c00 	.word	0x40001c00
 8006d08:	40002000 	.word	0x40002000

08006d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0303 	bic.w	r3, r3, #3
 8006d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f023 0302 	bic.w	r3, r3, #2
 8006d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a20      	ldr	r2, [pc, #128]	; (8006de4 <TIM_OC1_SetConfig+0xd8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_OC1_SetConfig+0x64>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <TIM_OC1_SetConfig+0xdc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10c      	bne.n	8006d8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0308 	bic.w	r3, r3, #8
 8006d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 0304 	bic.w	r3, r3, #4
 8006d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <TIM_OC1_SetConfig+0xd8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_OC1_SetConfig+0x8e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <TIM_OC1_SetConfig+0xdc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d111      	bne.n	8006dbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	621a      	str	r2, [r3, #32]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40010400 	.word	0x40010400

08006dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0210 	bic.w	r2, r3, #16
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0320 	bic.w	r3, r3, #32
 8006e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <TIM_OC2_SetConfig+0xe4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_OC2_SetConfig+0x68>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a21      	ldr	r2, [pc, #132]	; (8006ed4 <TIM_OC2_SetConfig+0xe8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d10d      	bne.n	8006e70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a17      	ldr	r2, [pc, #92]	; (8006ed0 <TIM_OC2_SetConfig+0xe4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC2_SetConfig+0x94>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a16      	ldr	r2, [pc, #88]	; (8006ed4 <TIM_OC2_SetConfig+0xe8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d113      	bne.n	8006ea8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40010400 	.word	0x40010400

08006ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0303 	bic.w	r3, r3, #3
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <TIM_OC3_SetConfig+0xe0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d003      	beq.n	8006f3e <TIM_OC3_SetConfig+0x66>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a20      	ldr	r2, [pc, #128]	; (8006fbc <TIM_OC3_SetConfig+0xe4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d10d      	bne.n	8006f5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a16      	ldr	r2, [pc, #88]	; (8006fb8 <TIM_OC3_SetConfig+0xe0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <TIM_OC3_SetConfig+0x92>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a15      	ldr	r2, [pc, #84]	; (8006fbc <TIM_OC3_SetConfig+0xe4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d113      	bne.n	8006f92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	621a      	str	r2, [r3, #32]
}
 8006fac:	bf00      	nop
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40010400 	.word	0x40010400

08006fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800700a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a12      	ldr	r2, [pc, #72]	; (8007064 <TIM_OC4_SetConfig+0xa4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_OC4_SetConfig+0x68>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a11      	ldr	r2, [pc, #68]	; (8007068 <TIM_OC4_SetConfig+0xa8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d109      	bne.n	800703c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800702e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	019b      	lsls	r3, r3, #6
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40010000 	.word	0x40010000
 8007068:	40010400 	.word	0x40010400

0800706c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f023 0201 	bic.w	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f023 030a 	bic.w	r3, r3, #10
 80070a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b087      	sub	sp, #28
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0210 	bic.w	r2, r3, #16
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	031b      	lsls	r3, r3, #12
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	f043 0307 	orr.w	r3, r3, #7
 800714c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	609a      	str	r2, [r3, #8]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800717a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	021a      	lsls	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	431a      	orrs	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4313      	orrs	r3, r2
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	609a      	str	r2, [r3, #8]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2201      	movs	r2, #1
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	43db      	mvns	r3, r3
 80071c2:	401a      	ands	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
	...

080071ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007200:	2302      	movs	r3, #2
 8007202:	e05a      	b.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d022      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007250:	d01d      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1d      	ldr	r2, [pc, #116]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d018      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1b      	ldr	r2, [pc, #108]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00e      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d009      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a17      	ldr	r2, [pc, #92]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d004      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d10c      	bne.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4313      	orrs	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	40010400 	.word	0x40010400
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40001800 	.word	0x40001800

080072e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e03d      	b.n	800737c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e03f      	b.n	8007442 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fd fb36 	bl	8004a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2224      	movs	r2, #36	; 0x24
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fe7d 	bl	80080f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695a      	ldr	r2, [r3, #20]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b08a      	sub	sp, #40	; 0x28
 800744e:	af02      	add	r7, sp, #8
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b20      	cmp	r3, #32
 8007468:	d17c      	bne.n	8007564 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_UART_Transmit+0x2c>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e075      	b.n	8007566 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_UART_Transmit+0x3e>
 8007484:	2302      	movs	r3, #2
 8007486:	e06e      	b.n	8007566 <HAL_UART_Transmit+0x11c>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2221      	movs	r2, #33	; 0x21
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749e:	f7fd fbe9 	bl	8004c74 <HAL_GetTick>
 80074a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	88fa      	ldrh	r2, [r7, #6]
 80074ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b8:	d108      	bne.n	80074cc <HAL_UART_Transmit+0x82>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e003      	b.n	80074d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074dc:	e02a      	b.n	8007534 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2200      	movs	r2, #0
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fbc1 	bl	8007c70 <UART_WaitOnFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e036      	b.n	8007566 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800750c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	3302      	adds	r3, #2
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	e007      	b.n	8007526 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	3301      	adds	r3, #1
 8007524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007538:	b29b      	uxth	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1cf      	bne.n	80074de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2200      	movs	r2, #0
 8007546:	2140      	movs	r1, #64	; 0x40
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fb91 	bl	8007c70 <UART_WaitOnFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e006      	b.n	8007566 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007564:	2302      	movs	r3, #2
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b08a      	sub	sp, #40	; 0x28
 8007572:	af02      	add	r7, sp, #8
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	4613      	mov	r3, r2
 800757c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b20      	cmp	r3, #32
 800758c:	f040 808c 	bne.w	80076a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <HAL_UART_Receive+0x2e>
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e084      	b.n	80076aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Receive+0x40>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e07d      	b.n	80076aa <HAL_UART_Receive+0x13c>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2222      	movs	r2, #34	; 0x22
 80075c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ca:	f7fd fb53 	bl	8004c74 <HAL_GetTick>
 80075ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	88fa      	ldrh	r2, [r7, #6]
 80075d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	88fa      	ldrh	r2, [r7, #6]
 80075da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d108      	bne.n	80075f8 <HAL_UART_Receive+0x8a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	e003      	b.n	8007600 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007608:	e043      	b.n	8007692 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2200      	movs	r2, #0
 8007612:	2120      	movs	r1, #32
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fb2b 	bl	8007c70 <UART_WaitOnFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e042      	b.n	80076aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10c      	bne.n	8007644 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	b29b      	uxth	r3, r3
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	b29a      	uxth	r2, r3
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	3302      	adds	r3, #2
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	e01f      	b.n	8007684 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764c:	d007      	beq.n	800765e <HAL_UART_Receive+0xf0>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <HAL_UART_Receive+0xfe>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e008      	b.n	800767e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007678:	b2da      	uxtb	r2, r3
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	3301      	adds	r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1b6      	bne.n	800760a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e000      	b.n	80076aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80076a8:	2302      	movs	r3, #2
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	4613      	mov	r3, r2
 80076be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d11d      	bne.n	8007708 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_UART_Receive_IT+0x26>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e016      	b.n	800770a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Receive_IT+0x38>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e00f      	b.n	800770a <HAL_UART_Receive_IT+0x58>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	461a      	mov	r2, r3
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fb24 	bl	8007d4c <UART_Start_Receive_IT>
 8007704:	4603      	mov	r3, r0
 8007706:	e000      	b.n	800770a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007708:	2302      	movs	r3, #2
  }
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b0ba      	sub	sp, #232	; 0xe8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800773a:	2300      	movs	r3, #0
 800773c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007740:	2300      	movs	r3, #0
 8007742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10f      	bne.n	800777a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <HAL_UART_IRQHandler+0x66>
 8007766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fc03 	bl	8007f7e <UART_Receive_IT>
      return;
 8007778:	e256      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800777a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80de 	beq.w	8007940 <HAL_UART_IRQHandler+0x22c>
 8007784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80d1 	beq.w	8007940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <HAL_UART_IRQHandler+0xae>
 80077aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f043 0201 	orr.w	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <HAL_UART_IRQHandler+0xd2>
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f043 0202 	orr.w	r2, r3, #2
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <HAL_UART_IRQHandler+0xf6>
 80077f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d005      	beq.n	800780a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	f043 0204 	orr.w	r2, r3, #4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800780a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <HAL_UART_IRQHandler+0x126>
 8007816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	f043 0208 	orr.w	r2, r3, #8
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 81ed 	beq.w	8007c1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_UART_IRQHandler+0x14e>
 8007850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fb8e 	bl	8007f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b40      	cmp	r3, #64	; 0x40
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <HAL_UART_IRQHandler+0x17a>
 8007886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04f      	beq.n	800792e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fa96 	bl	8007dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d141      	bne.n	8007926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3314      	adds	r3, #20
 80078a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3314      	adds	r3, #20
 80078ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1d9      	bne.n	80078a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d013      	beq.n	800791e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fa:	4a7d      	ldr	r2, [pc, #500]	; (8007af0 <HAL_UART_IRQHandler+0x3dc>)
 80078fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	4618      	mov	r0, r3
 8007904:	f7fd fb67 	bl	8004fd6 <HAL_DMA_Abort_IT>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d016      	beq.n	800793c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791c:	e00e      	b.n	800793c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f990 	bl	8007c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007924:	e00a      	b.n	800793c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f98c 	bl	8007c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792c:	e006      	b.n	800793c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f988 	bl	8007c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800793a:	e170      	b.n	8007c1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	bf00      	nop
    return;
 800793e:	e16e      	b.n	8007c1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	2b01      	cmp	r3, #1
 8007946:	f040 814a 	bne.w	8007bde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 8143 	beq.w	8007bde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 813c 	beq.w	8007bde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60bb      	str	r3, [r7, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	f040 80b4 	bne.w	8007af4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8140 	beq.w	8007c22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079aa:	429a      	cmp	r2, r3
 80079ac:	f080 8139 	bcs.w	8007c22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c2:	f000 8088 	beq.w	8007ad6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1d9      	bne.n	80079c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3314      	adds	r3, #20
 8007a18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3314      	adds	r3, #20
 8007a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e1      	bne.n	8007a12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3314      	adds	r3, #20
 8007a54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e3      	bne.n	8007a4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e3      	bne.n	8007a94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fd fa10 	bl	8004ef6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f8b6 	bl	8007c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aec:	e099      	b.n	8007c22 <HAL_UART_IRQHandler+0x50e>
 8007aee:	bf00      	nop
 8007af0:	08007e87 	.word	0x08007e87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 808b 	beq.w	8007c26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8086 	beq.w	8007c26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	330c      	adds	r3, #12
 8007b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	330c      	adds	r3, #12
 8007b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e3      	bne.n	8007b1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	623b      	str	r3, [r7, #32]
   return(result);
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b76:	633a      	str	r2, [r7, #48]	; 0x30
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e3      	bne.n	8007b52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	330c      	adds	r3, #12
 8007b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0310 	bic.w	r3, r3, #16
 8007bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bbc:	61fa      	str	r2, [r7, #28]
 8007bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	69b9      	ldr	r1, [r7, #24]
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e3      	bne.n	8007b98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f83e 	bl	8007c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bdc:	e023      	b.n	8007c26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_UART_IRQHandler+0x4ea>
 8007bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f959 	bl	8007eae <UART_Transmit_IT>
    return;
 8007bfc:	e014      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00e      	beq.n	8007c28 <HAL_UART_IRQHandler+0x514>
 8007c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f999 	bl	8007f4e <UART_EndTransmit_IT>
    return;
 8007c1c:	e004      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
    return;
 8007c1e:	bf00      	nop
 8007c20:	e002      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
      return;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
      return;
 8007c26:	bf00      	nop
  }
}
 8007c28:	37e8      	adds	r7, #232	; 0xe8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop

08007c30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b090      	sub	sp, #64	; 0x40
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c80:	e050      	b.n	8007d24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d04c      	beq.n	8007d24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c90:	f7fc fff0 	bl	8004c74 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d241      	bcs.n	8007d24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	330c      	adds	r3, #12
 8007cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cc0:	637a      	str	r2, [r7, #52]	; 0x34
 8007cc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e5      	bne.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3314      	adds	r3, #20
 8007cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3314      	adds	r3, #20
 8007cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf4:	623a      	str	r2, [r7, #32]
 8007cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	69f9      	ldr	r1, [r7, #28]
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e5      	bne.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e00f      	b.n	8007d44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	bf0c      	ite	eq
 8007d34:	2301      	moveq	r3, #1
 8007d36:	2300      	movne	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d09f      	beq.n	8007c82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3740      	adds	r7, #64	; 0x40
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	88fa      	ldrh	r2, [r7, #6]
 8007d64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	88fa      	ldrh	r2, [r7, #6]
 8007d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2222      	movs	r2, #34	; 0x22
 8007d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d90:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	695a      	ldr	r2, [r3, #20]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0201 	orr.w	r2, r2, #1
 8007da0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0220 	orr.w	r2, r2, #32
 8007db0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b095      	sub	sp, #84	; 0x54
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	330c      	adds	r3, #12
 8007dce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	330c      	adds	r3, #12
 8007de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de8:	643a      	str	r2, [r7, #64]	; 0x40
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e5      	bne.n	8007dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3314      	adds	r3, #20
 8007e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f023 0301 	bic.w	r3, r3, #1
 8007e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e5      	bne.n	8007dfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d119      	bne.n	8007e6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	330c      	adds	r3, #12
 8007e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f023 0310 	bic.w	r3, r3, #16
 8007e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	330c      	adds	r3, #12
 8007e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e58:	61ba      	str	r2, [r7, #24]
 8007e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	613b      	str	r3, [r7, #16]
   return(result);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e5      	bne.n	8007e38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e7a:	bf00      	nop
 8007e7c:	3754      	adds	r7, #84	; 0x54
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff fecf 	bl	8007c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b21      	cmp	r3, #33	; 0x21
 8007ec0:	d13e      	bne.n	8007f40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eca:	d114      	bne.n	8007ef6 <UART_Transmit_IT+0x48>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d110      	bne.n	8007ef6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	1c9a      	adds	r2, r3, #2
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	621a      	str	r2, [r3, #32]
 8007ef4:	e008      	b.n	8007f08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	1c59      	adds	r1, r3, #1
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	6211      	str	r1, [r2, #32]
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4619      	mov	r1, r3
 8007f16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10f      	bne.n	8007f3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e000      	b.n	8007f42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f40:	2302      	movs	r3, #2
  }
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fe5e 	bl	8007c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b08c      	sub	sp, #48	; 0x30
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b22      	cmp	r3, #34	; 0x22
 8007f90:	f040 80ab 	bne.w	80080ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9c:	d117      	bne.n	8007fce <UART_Receive_IT+0x50>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d113      	bne.n	8007fce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	1c9a      	adds	r2, r3, #2
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	629a      	str	r2, [r3, #40]	; 0x28
 8007fcc:	e026      	b.n	800801c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe0:	d007      	beq.n	8007ff2 <UART_Receive_IT+0x74>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <UART_Receive_IT+0x82>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e008      	b.n	8008012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800c:	b2da      	uxtb	r2, r3
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29b      	uxth	r3, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4619      	mov	r1, r3
 800802a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800802c:	2b00      	cmp	r3, #0
 800802e:	d15a      	bne.n	80080e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0220 	bic.w	r2, r2, #32
 800803e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800804e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695a      	ldr	r2, [r3, #20]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806c:	2b01      	cmp	r3, #1
 800806e:	d135      	bne.n	80080dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	613b      	str	r3, [r7, #16]
   return(result);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f023 0310 	bic.w	r3, r3, #16
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008096:	623a      	str	r2, [r7, #32]
 8008098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	69f9      	ldr	r1, [r7, #28]
 800809c:	6a3a      	ldr	r2, [r7, #32]
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	d10a      	bne.n	80080ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff fdbf 	bl	8007c58 <HAL_UARTEx_RxEventCallback>
 80080da:	e002      	b.n	80080e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7f9 f9e7 	bl	80014b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e002      	b.n	80080ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	e000      	b.n	80080ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080ea:	2302      	movs	r3, #2
  }
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3730      	adds	r7, #48	; 0x30
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	b09f      	sub	sp, #124	; 0x7c
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810a:	68d9      	ldr	r1, [r3, #12]
 800810c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	ea40 0301 	orr.w	r3, r0, r1
 8008114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	431a      	orrs	r2, r3
 8008120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	431a      	orrs	r2, r3
 8008126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	4313      	orrs	r3, r2
 800812c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800812e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008138:	f021 010c 	bic.w	r1, r1, #12
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008142:	430b      	orrs	r3, r1
 8008144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008152:	6999      	ldr	r1, [r3, #24]
 8008154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	ea40 0301 	orr.w	r3, r0, r1
 800815c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800815e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4bc5      	ldr	r3, [pc, #788]	; (8008478 <UART_SetConfig+0x384>)
 8008164:	429a      	cmp	r2, r3
 8008166:	d004      	beq.n	8008172 <UART_SetConfig+0x7e>
 8008168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	4bc3      	ldr	r3, [pc, #780]	; (800847c <UART_SetConfig+0x388>)
 800816e:	429a      	cmp	r2, r3
 8008170:	d103      	bne.n	800817a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008172:	f7fd fa6f 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8008176:	6778      	str	r0, [r7, #116]	; 0x74
 8008178:	e002      	b.n	8008180 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800817a:	f7fd fa57 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 800817e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008188:	f040 80b6 	bne.w	80082f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800818c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800818e:	461c      	mov	r4, r3
 8008190:	f04f 0500 	mov.w	r5, #0
 8008194:	4622      	mov	r2, r4
 8008196:	462b      	mov	r3, r5
 8008198:	1891      	adds	r1, r2, r2
 800819a:	6439      	str	r1, [r7, #64]	; 0x40
 800819c:	415b      	adcs	r3, r3
 800819e:	647b      	str	r3, [r7, #68]	; 0x44
 80081a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081a4:	1912      	adds	r2, r2, r4
 80081a6:	eb45 0303 	adc.w	r3, r5, r3
 80081aa:	f04f 0000 	mov.w	r0, #0
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	00d9      	lsls	r1, r3, #3
 80081b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081b8:	00d0      	lsls	r0, r2, #3
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	1911      	adds	r1, r2, r4
 80081c0:	6639      	str	r1, [r7, #96]	; 0x60
 80081c2:	416b      	adcs	r3, r5
 80081c4:	667b      	str	r3, [r7, #100]	; 0x64
 80081c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	1891      	adds	r1, r2, r2
 80081d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80081d4:	415b      	adcs	r3, r3
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80081e0:	f7f8 fcf6 	bl	8000bd0 <__aeabi_uldivmod>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4ba5      	ldr	r3, [pc, #660]	; (8008480 <UART_SetConfig+0x38c>)
 80081ea:	fba3 2302 	umull	r2, r3, r3, r2
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	011e      	lsls	r6, r3, #4
 80081f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f4:	461c      	mov	r4, r3
 80081f6:	f04f 0500 	mov.w	r5, #0
 80081fa:	4622      	mov	r2, r4
 80081fc:	462b      	mov	r3, r5
 80081fe:	1891      	adds	r1, r2, r2
 8008200:	6339      	str	r1, [r7, #48]	; 0x30
 8008202:	415b      	adcs	r3, r3
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
 8008206:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800820a:	1912      	adds	r2, r2, r4
 800820c:	eb45 0303 	adc.w	r3, r5, r3
 8008210:	f04f 0000 	mov.w	r0, #0
 8008214:	f04f 0100 	mov.w	r1, #0
 8008218:	00d9      	lsls	r1, r3, #3
 800821a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800821e:	00d0      	lsls	r0, r2, #3
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	1911      	adds	r1, r2, r4
 8008226:	65b9      	str	r1, [r7, #88]	; 0x58
 8008228:	416b      	adcs	r3, r5
 800822a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800822c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	461a      	mov	r2, r3
 8008232:	f04f 0300 	mov.w	r3, #0
 8008236:	1891      	adds	r1, r2, r2
 8008238:	62b9      	str	r1, [r7, #40]	; 0x28
 800823a:	415b      	adcs	r3, r3
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800823e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008242:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008246:	f7f8 fcc3 	bl	8000bd0 <__aeabi_uldivmod>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4b8c      	ldr	r3, [pc, #560]	; (8008480 <UART_SetConfig+0x38c>)
 8008250:	fba3 1302 	umull	r1, r3, r3, r2
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	2164      	movs	r1, #100	; 0x64
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	3332      	adds	r3, #50	; 0x32
 8008262:	4a87      	ldr	r2, [pc, #540]	; (8008480 <UART_SetConfig+0x38c>)
 8008264:	fba2 2303 	umull	r2, r3, r2, r3
 8008268:	095b      	lsrs	r3, r3, #5
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008270:	441e      	add	r6, r3
 8008272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008274:	4618      	mov	r0, r3
 8008276:	f04f 0100 	mov.w	r1, #0
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	1894      	adds	r4, r2, r2
 8008280:	623c      	str	r4, [r7, #32]
 8008282:	415b      	adcs	r3, r3
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
 8008286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800828a:	1812      	adds	r2, r2, r0
 800828c:	eb41 0303 	adc.w	r3, r1, r3
 8008290:	f04f 0400 	mov.w	r4, #0
 8008294:	f04f 0500 	mov.w	r5, #0
 8008298:	00dd      	lsls	r5, r3, #3
 800829a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800829e:	00d4      	lsls	r4, r2, #3
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	1814      	adds	r4, r2, r0
 80082a6:	653c      	str	r4, [r7, #80]	; 0x50
 80082a8:	414b      	adcs	r3, r1
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54
 80082ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	461a      	mov	r2, r3
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	1891      	adds	r1, r2, r2
 80082b8:	61b9      	str	r1, [r7, #24]
 80082ba:	415b      	adcs	r3, r3
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082c6:	f7f8 fc83 	bl	8000bd0 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4b6c      	ldr	r3, [pc, #432]	; (8008480 <UART_SetConfig+0x38c>)
 80082d0:	fba3 1302 	umull	r1, r3, r3, r2
 80082d4:	095b      	lsrs	r3, r3, #5
 80082d6:	2164      	movs	r1, #100	; 0x64
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	3332      	adds	r3, #50	; 0x32
 80082e2:	4a67      	ldr	r2, [pc, #412]	; (8008480 <UART_SetConfig+0x38c>)
 80082e4:	fba2 2303 	umull	r2, r3, r2, r3
 80082e8:	095b      	lsrs	r3, r3, #5
 80082ea:	f003 0207 	and.w	r2, r3, #7
 80082ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4432      	add	r2, r6
 80082f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082f6:	e0b9      	b.n	800846c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082fa:	461c      	mov	r4, r3
 80082fc:	f04f 0500 	mov.w	r5, #0
 8008300:	4622      	mov	r2, r4
 8008302:	462b      	mov	r3, r5
 8008304:	1891      	adds	r1, r2, r2
 8008306:	6139      	str	r1, [r7, #16]
 8008308:	415b      	adcs	r3, r3
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008310:	1912      	adds	r2, r2, r4
 8008312:	eb45 0303 	adc.w	r3, r5, r3
 8008316:	f04f 0000 	mov.w	r0, #0
 800831a:	f04f 0100 	mov.w	r1, #0
 800831e:	00d9      	lsls	r1, r3, #3
 8008320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008324:	00d0      	lsls	r0, r2, #3
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	eb12 0804 	adds.w	r8, r2, r4
 800832e:	eb43 0905 	adc.w	r9, r3, r5
 8008332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	f04f 0100 	mov.w	r1, #0
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	008b      	lsls	r3, r1, #2
 8008346:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800834a:	0082      	lsls	r2, r0, #2
 800834c:	4640      	mov	r0, r8
 800834e:	4649      	mov	r1, r9
 8008350:	f7f8 fc3e 	bl	8000bd0 <__aeabi_uldivmod>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4b49      	ldr	r3, [pc, #292]	; (8008480 <UART_SetConfig+0x38c>)
 800835a:	fba3 2302 	umull	r2, r3, r3, r2
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	011e      	lsls	r6, r3, #4
 8008362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008364:	4618      	mov	r0, r3
 8008366:	f04f 0100 	mov.w	r1, #0
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	1894      	adds	r4, r2, r2
 8008370:	60bc      	str	r4, [r7, #8]
 8008372:	415b      	adcs	r3, r3
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800837a:	1812      	adds	r2, r2, r0
 800837c:	eb41 0303 	adc.w	r3, r1, r3
 8008380:	f04f 0400 	mov.w	r4, #0
 8008384:	f04f 0500 	mov.w	r5, #0
 8008388:	00dd      	lsls	r5, r3, #3
 800838a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800838e:	00d4      	lsls	r4, r2, #3
 8008390:	4622      	mov	r2, r4
 8008392:	462b      	mov	r3, r5
 8008394:	1814      	adds	r4, r2, r0
 8008396:	64bc      	str	r4, [r7, #72]	; 0x48
 8008398:	414b      	adcs	r3, r1
 800839a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800839c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f04f 0100 	mov.w	r1, #0
 80083a6:	f04f 0200 	mov.w	r2, #0
 80083aa:	f04f 0300 	mov.w	r3, #0
 80083ae:	008b      	lsls	r3, r1, #2
 80083b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083b4:	0082      	lsls	r2, r0, #2
 80083b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083ba:	f7f8 fc09 	bl	8000bd0 <__aeabi_uldivmod>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4b2f      	ldr	r3, [pc, #188]	; (8008480 <UART_SetConfig+0x38c>)
 80083c4:	fba3 1302 	umull	r1, r3, r3, r2
 80083c8:	095b      	lsrs	r3, r3, #5
 80083ca:	2164      	movs	r1, #100	; 0x64
 80083cc:	fb01 f303 	mul.w	r3, r1, r3
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	3332      	adds	r3, #50	; 0x32
 80083d6:	4a2a      	ldr	r2, [pc, #168]	; (8008480 <UART_SetConfig+0x38c>)
 80083d8:	fba2 2303 	umull	r2, r3, r2, r3
 80083dc:	095b      	lsrs	r3, r3, #5
 80083de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083e2:	441e      	add	r6, r3
 80083e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e6:	4618      	mov	r0, r3
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	1894      	adds	r4, r2, r2
 80083f2:	603c      	str	r4, [r7, #0]
 80083f4:	415b      	adcs	r3, r3
 80083f6:	607b      	str	r3, [r7, #4]
 80083f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fc:	1812      	adds	r2, r2, r0
 80083fe:	eb41 0303 	adc.w	r3, r1, r3
 8008402:	f04f 0400 	mov.w	r4, #0
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	00dd      	lsls	r5, r3, #3
 800840c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008410:	00d4      	lsls	r4, r2, #3
 8008412:	4622      	mov	r2, r4
 8008414:	462b      	mov	r3, r5
 8008416:	eb12 0a00 	adds.w	sl, r2, r0
 800841a:	eb43 0b01 	adc.w	fp, r3, r1
 800841e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	f04f 0100 	mov.w	r1, #0
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	008b      	lsls	r3, r1, #2
 8008432:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008436:	0082      	lsls	r2, r0, #2
 8008438:	4650      	mov	r0, sl
 800843a:	4659      	mov	r1, fp
 800843c:	f7f8 fbc8 	bl	8000bd0 <__aeabi_uldivmod>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <UART_SetConfig+0x38c>)
 8008446:	fba3 1302 	umull	r1, r3, r3, r2
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	2164      	movs	r1, #100	; 0x64
 800844e:	fb01 f303 	mul.w	r3, r1, r3
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	3332      	adds	r3, #50	; 0x32
 8008458:	4a09      	ldr	r2, [pc, #36]	; (8008480 <UART_SetConfig+0x38c>)
 800845a:	fba2 2303 	umull	r2, r3, r2, r3
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4432      	add	r2, r6
 800846a:	609a      	str	r2, [r3, #8]
}
 800846c:	bf00      	nop
 800846e:	377c      	adds	r7, #124	; 0x7c
 8008470:	46bd      	mov	sp, r7
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	bf00      	nop
 8008478:	40011000 	.word	0x40011000
 800847c:	40011400 	.word	0x40011400
 8008480:	51eb851f 	.word	0x51eb851f

08008484 <__errno>:
 8008484:	4b01      	ldr	r3, [pc, #4]	; (800848c <__errno+0x8>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	2000004c 	.word	0x2000004c

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4d0d      	ldr	r5, [pc, #52]	; (80084c8 <__libc_init_array+0x38>)
 8008494:	4c0d      	ldr	r4, [pc, #52]	; (80084cc <__libc_init_array+0x3c>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	2600      	movs	r6, #0
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	4d0b      	ldr	r5, [pc, #44]	; (80084d0 <__libc_init_array+0x40>)
 80084a2:	4c0c      	ldr	r4, [pc, #48]	; (80084d4 <__libc_init_array+0x44>)
 80084a4:	f002 fa6e 	bl	800a984 <_init>
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	2600      	movs	r6, #0
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	0800ac50 	.word	0x0800ac50
 80084cc:	0800ac50 	.word	0x0800ac50
 80084d0:	0800ac50 	.word	0x0800ac50
 80084d4:	0800ac54 	.word	0x0800ac54

080084d8 <memset>:
 80084d8:	4402      	add	r2, r0
 80084da:	4603      	mov	r3, r0
 80084dc:	4293      	cmp	r3, r2
 80084de:	d100      	bne.n	80084e2 <memset+0xa>
 80084e0:	4770      	bx	lr
 80084e2:	f803 1b01 	strb.w	r1, [r3], #1
 80084e6:	e7f9      	b.n	80084dc <memset+0x4>

080084e8 <cos>:
 80084e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ea:	ec53 2b10 	vmov	r2, r3, d0
 80084ee:	4824      	ldr	r0, [pc, #144]	; (8008580 <cos+0x98>)
 80084f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084f4:	4281      	cmp	r1, r0
 80084f6:	dc06      	bgt.n	8008506 <cos+0x1e>
 80084f8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8008578 <cos+0x90>
 80084fc:	f001 fa2c 	bl	8009958 <__kernel_cos>
 8008500:	ec51 0b10 	vmov	r0, r1, d0
 8008504:	e007      	b.n	8008516 <cos+0x2e>
 8008506:	481f      	ldr	r0, [pc, #124]	; (8008584 <cos+0x9c>)
 8008508:	4281      	cmp	r1, r0
 800850a:	dd09      	ble.n	8008520 <cos+0x38>
 800850c:	ee10 0a10 	vmov	r0, s0
 8008510:	4619      	mov	r1, r3
 8008512:	f7f7 fe7d 	bl	8000210 <__aeabi_dsub>
 8008516:	ec41 0b10 	vmov	d0, r0, r1
 800851a:	b005      	add	sp, #20
 800851c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008520:	4668      	mov	r0, sp
 8008522:	f000 ff59 	bl	80093d8 <__ieee754_rem_pio2>
 8008526:	f000 0003 	and.w	r0, r0, #3
 800852a:	2801      	cmp	r0, #1
 800852c:	d007      	beq.n	800853e <cos+0x56>
 800852e:	2802      	cmp	r0, #2
 8008530:	d012      	beq.n	8008558 <cos+0x70>
 8008532:	b9c0      	cbnz	r0, 8008566 <cos+0x7e>
 8008534:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008538:	ed9d 0b00 	vldr	d0, [sp]
 800853c:	e7de      	b.n	80084fc <cos+0x14>
 800853e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008542:	ed9d 0b00 	vldr	d0, [sp]
 8008546:	f001 fe0f 	bl	800a168 <__kernel_sin>
 800854a:	ec53 2b10 	vmov	r2, r3, d0
 800854e:	ee10 0a10 	vmov	r0, s0
 8008552:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008556:	e7de      	b.n	8008516 <cos+0x2e>
 8008558:	ed9d 1b02 	vldr	d1, [sp, #8]
 800855c:	ed9d 0b00 	vldr	d0, [sp]
 8008560:	f001 f9fa 	bl	8009958 <__kernel_cos>
 8008564:	e7f1      	b.n	800854a <cos+0x62>
 8008566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800856a:	ed9d 0b00 	vldr	d0, [sp]
 800856e:	2001      	movs	r0, #1
 8008570:	f001 fdfa 	bl	800a168 <__kernel_sin>
 8008574:	e7c4      	b.n	8008500 <cos+0x18>
 8008576:	bf00      	nop
	...
 8008580:	3fe921fb 	.word	0x3fe921fb
 8008584:	7fefffff 	.word	0x7fefffff

08008588 <sin>:
 8008588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800858a:	ec53 2b10 	vmov	r2, r3, d0
 800858e:	4826      	ldr	r0, [pc, #152]	; (8008628 <sin+0xa0>)
 8008590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008594:	4281      	cmp	r1, r0
 8008596:	dc07      	bgt.n	80085a8 <sin+0x20>
 8008598:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008620 <sin+0x98>
 800859c:	2000      	movs	r0, #0
 800859e:	f001 fde3 	bl	800a168 <__kernel_sin>
 80085a2:	ec51 0b10 	vmov	r0, r1, d0
 80085a6:	e007      	b.n	80085b8 <sin+0x30>
 80085a8:	4820      	ldr	r0, [pc, #128]	; (800862c <sin+0xa4>)
 80085aa:	4281      	cmp	r1, r0
 80085ac:	dd09      	ble.n	80085c2 <sin+0x3a>
 80085ae:	ee10 0a10 	vmov	r0, s0
 80085b2:	4619      	mov	r1, r3
 80085b4:	f7f7 fe2c 	bl	8000210 <__aeabi_dsub>
 80085b8:	ec41 0b10 	vmov	d0, r0, r1
 80085bc:	b005      	add	sp, #20
 80085be:	f85d fb04 	ldr.w	pc, [sp], #4
 80085c2:	4668      	mov	r0, sp
 80085c4:	f000 ff08 	bl	80093d8 <__ieee754_rem_pio2>
 80085c8:	f000 0003 	and.w	r0, r0, #3
 80085cc:	2801      	cmp	r0, #1
 80085ce:	d008      	beq.n	80085e2 <sin+0x5a>
 80085d0:	2802      	cmp	r0, #2
 80085d2:	d00d      	beq.n	80085f0 <sin+0x68>
 80085d4:	b9d0      	cbnz	r0, 800860c <sin+0x84>
 80085d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085da:	ed9d 0b00 	vldr	d0, [sp]
 80085de:	2001      	movs	r0, #1
 80085e0:	e7dd      	b.n	800859e <sin+0x16>
 80085e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085e6:	ed9d 0b00 	vldr	d0, [sp]
 80085ea:	f001 f9b5 	bl	8009958 <__kernel_cos>
 80085ee:	e7d8      	b.n	80085a2 <sin+0x1a>
 80085f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085f4:	ed9d 0b00 	vldr	d0, [sp]
 80085f8:	2001      	movs	r0, #1
 80085fa:	f001 fdb5 	bl	800a168 <__kernel_sin>
 80085fe:	ec53 2b10 	vmov	r2, r3, d0
 8008602:	ee10 0a10 	vmov	r0, s0
 8008606:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800860a:	e7d5      	b.n	80085b8 <sin+0x30>
 800860c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008610:	ed9d 0b00 	vldr	d0, [sp]
 8008614:	f001 f9a0 	bl	8009958 <__kernel_cos>
 8008618:	e7f1      	b.n	80085fe <sin+0x76>
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w
	...
 8008628:	3fe921fb 	.word	0x3fe921fb
 800862c:	7fefffff 	.word	0x7fefffff

08008630 <atan2>:
 8008630:	f000 b8e2 	b.w	80087f8 <__ieee754_atan2>

08008634 <pow>:
 8008634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008638:	ec59 8b10 	vmov	r8, r9, d0
 800863c:	ec57 6b11 	vmov	r6, r7, d1
 8008640:	f000 f9a6 	bl	8008990 <__ieee754_pow>
 8008644:	4b4e      	ldr	r3, [pc, #312]	; (8008780 <pow+0x14c>)
 8008646:	f993 3000 	ldrsb.w	r3, [r3]
 800864a:	3301      	adds	r3, #1
 800864c:	ec55 4b10 	vmov	r4, r5, d0
 8008650:	d015      	beq.n	800867e <pow+0x4a>
 8008652:	4632      	mov	r2, r6
 8008654:	463b      	mov	r3, r7
 8008656:	4630      	mov	r0, r6
 8008658:	4639      	mov	r1, r7
 800865a:	f7f8 fa2b 	bl	8000ab4 <__aeabi_dcmpun>
 800865e:	b970      	cbnz	r0, 800867e <pow+0x4a>
 8008660:	4642      	mov	r2, r8
 8008662:	464b      	mov	r3, r9
 8008664:	4640      	mov	r0, r8
 8008666:	4649      	mov	r1, r9
 8008668:	f7f8 fa24 	bl	8000ab4 <__aeabi_dcmpun>
 800866c:	2200      	movs	r2, #0
 800866e:	2300      	movs	r3, #0
 8008670:	b148      	cbz	r0, 8008686 <pow+0x52>
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f8 f9eb 	bl	8000a50 <__aeabi_dcmpeq>
 800867a:	2800      	cmp	r0, #0
 800867c:	d17d      	bne.n	800877a <pow+0x146>
 800867e:	ec45 4b10 	vmov	d0, r4, r5
 8008682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008686:	4640      	mov	r0, r8
 8008688:	4649      	mov	r1, r9
 800868a:	f7f8 f9e1 	bl	8000a50 <__aeabi_dcmpeq>
 800868e:	b1e0      	cbz	r0, 80086ca <pow+0x96>
 8008690:	2200      	movs	r2, #0
 8008692:	2300      	movs	r3, #0
 8008694:	4630      	mov	r0, r6
 8008696:	4639      	mov	r1, r7
 8008698:	f7f8 f9da 	bl	8000a50 <__aeabi_dcmpeq>
 800869c:	2800      	cmp	r0, #0
 800869e:	d16c      	bne.n	800877a <pow+0x146>
 80086a0:	ec47 6b10 	vmov	d0, r6, r7
 80086a4:	f001 ffc9 	bl	800a63a <finite>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d0e8      	beq.n	800867e <pow+0x4a>
 80086ac:	2200      	movs	r2, #0
 80086ae:	2300      	movs	r3, #0
 80086b0:	4630      	mov	r0, r6
 80086b2:	4639      	mov	r1, r7
 80086b4:	f7f8 f9d6 	bl	8000a64 <__aeabi_dcmplt>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0e0      	beq.n	800867e <pow+0x4a>
 80086bc:	f7ff fee2 	bl	8008484 <__errno>
 80086c0:	2321      	movs	r3, #33	; 0x21
 80086c2:	6003      	str	r3, [r0, #0]
 80086c4:	2400      	movs	r4, #0
 80086c6:	4d2f      	ldr	r5, [pc, #188]	; (8008784 <pow+0x150>)
 80086c8:	e7d9      	b.n	800867e <pow+0x4a>
 80086ca:	ec45 4b10 	vmov	d0, r4, r5
 80086ce:	f001 ffb4 	bl	800a63a <finite>
 80086d2:	bbb8      	cbnz	r0, 8008744 <pow+0x110>
 80086d4:	ec49 8b10 	vmov	d0, r8, r9
 80086d8:	f001 ffaf 	bl	800a63a <finite>
 80086dc:	b390      	cbz	r0, 8008744 <pow+0x110>
 80086de:	ec47 6b10 	vmov	d0, r6, r7
 80086e2:	f001 ffaa 	bl	800a63a <finite>
 80086e6:	b368      	cbz	r0, 8008744 <pow+0x110>
 80086e8:	4622      	mov	r2, r4
 80086ea:	462b      	mov	r3, r5
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f8 f9e0 	bl	8000ab4 <__aeabi_dcmpun>
 80086f4:	b160      	cbz	r0, 8008710 <pow+0xdc>
 80086f6:	f7ff fec5 	bl	8008484 <__errno>
 80086fa:	2321      	movs	r3, #33	; 0x21
 80086fc:	6003      	str	r3, [r0, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	2300      	movs	r3, #0
 8008702:	4610      	mov	r0, r2
 8008704:	4619      	mov	r1, r3
 8008706:	f7f8 f865 	bl	80007d4 <__aeabi_ddiv>
 800870a:	4604      	mov	r4, r0
 800870c:	460d      	mov	r5, r1
 800870e:	e7b6      	b.n	800867e <pow+0x4a>
 8008710:	f7ff feb8 	bl	8008484 <__errno>
 8008714:	2322      	movs	r3, #34	; 0x22
 8008716:	6003      	str	r3, [r0, #0]
 8008718:	2200      	movs	r2, #0
 800871a:	2300      	movs	r3, #0
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f8 f9a0 	bl	8000a64 <__aeabi_dcmplt>
 8008724:	2400      	movs	r4, #0
 8008726:	b158      	cbz	r0, 8008740 <pow+0x10c>
 8008728:	ec47 6b10 	vmov	d0, r6, r7
 800872c:	f002 f818 	bl	800a760 <rint>
 8008730:	4632      	mov	r2, r6
 8008732:	ec51 0b10 	vmov	r0, r1, d0
 8008736:	463b      	mov	r3, r7
 8008738:	f7f8 f98a 	bl	8000a50 <__aeabi_dcmpeq>
 800873c:	2800      	cmp	r0, #0
 800873e:	d0c2      	beq.n	80086c6 <pow+0x92>
 8008740:	4d11      	ldr	r5, [pc, #68]	; (8008788 <pow+0x154>)
 8008742:	e79c      	b.n	800867e <pow+0x4a>
 8008744:	2200      	movs	r2, #0
 8008746:	2300      	movs	r3, #0
 8008748:	4620      	mov	r0, r4
 800874a:	4629      	mov	r1, r5
 800874c:	f7f8 f980 	bl	8000a50 <__aeabi_dcmpeq>
 8008750:	2800      	cmp	r0, #0
 8008752:	d094      	beq.n	800867e <pow+0x4a>
 8008754:	ec49 8b10 	vmov	d0, r8, r9
 8008758:	f001 ff6f 	bl	800a63a <finite>
 800875c:	2800      	cmp	r0, #0
 800875e:	d08e      	beq.n	800867e <pow+0x4a>
 8008760:	ec47 6b10 	vmov	d0, r6, r7
 8008764:	f001 ff69 	bl	800a63a <finite>
 8008768:	2800      	cmp	r0, #0
 800876a:	d088      	beq.n	800867e <pow+0x4a>
 800876c:	f7ff fe8a 	bl	8008484 <__errno>
 8008770:	2322      	movs	r3, #34	; 0x22
 8008772:	6003      	str	r3, [r0, #0]
 8008774:	2400      	movs	r4, #0
 8008776:	2500      	movs	r5, #0
 8008778:	e781      	b.n	800867e <pow+0x4a>
 800877a:	4d04      	ldr	r5, [pc, #16]	; (800878c <pow+0x158>)
 800877c:	2400      	movs	r4, #0
 800877e:	e77e      	b.n	800867e <pow+0x4a>
 8008780:	200000b0 	.word	0x200000b0
 8008784:	fff00000 	.word	0xfff00000
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	3ff00000 	.word	0x3ff00000

08008790 <sqrt>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	ed2d 8b02 	vpush	{d8}
 8008796:	ec55 4b10 	vmov	r4, r5, d0
 800879a:	f001 f827 	bl	80097ec <__ieee754_sqrt>
 800879e:	4b15      	ldr	r3, [pc, #84]	; (80087f4 <sqrt+0x64>)
 80087a0:	eeb0 8a40 	vmov.f32	s16, s0
 80087a4:	eef0 8a60 	vmov.f32	s17, s1
 80087a8:	f993 3000 	ldrsb.w	r3, [r3]
 80087ac:	3301      	adds	r3, #1
 80087ae:	d019      	beq.n	80087e4 <sqrt+0x54>
 80087b0:	4622      	mov	r2, r4
 80087b2:	462b      	mov	r3, r5
 80087b4:	4620      	mov	r0, r4
 80087b6:	4629      	mov	r1, r5
 80087b8:	f7f8 f97c 	bl	8000ab4 <__aeabi_dcmpun>
 80087bc:	b990      	cbnz	r0, 80087e4 <sqrt+0x54>
 80087be:	2200      	movs	r2, #0
 80087c0:	2300      	movs	r3, #0
 80087c2:	4620      	mov	r0, r4
 80087c4:	4629      	mov	r1, r5
 80087c6:	f7f8 f94d 	bl	8000a64 <__aeabi_dcmplt>
 80087ca:	b158      	cbz	r0, 80087e4 <sqrt+0x54>
 80087cc:	f7ff fe5a 	bl	8008484 <__errno>
 80087d0:	2321      	movs	r3, #33	; 0x21
 80087d2:	6003      	str	r3, [r0, #0]
 80087d4:	2200      	movs	r2, #0
 80087d6:	2300      	movs	r3, #0
 80087d8:	4610      	mov	r0, r2
 80087da:	4619      	mov	r1, r3
 80087dc:	f7f7 fffa 	bl	80007d4 <__aeabi_ddiv>
 80087e0:	ec41 0b18 	vmov	d8, r0, r1
 80087e4:	eeb0 0a48 	vmov.f32	s0, s16
 80087e8:	eef0 0a68 	vmov.f32	s1, s17
 80087ec:	ecbd 8b02 	vpop	{d8}
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop
 80087f4:	200000b0 	.word	0x200000b0

080087f8 <__ieee754_atan2>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	ec57 6b11 	vmov	r6, r7, d1
 8008800:	4273      	negs	r3, r6
 8008802:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008988 <__ieee754_atan2+0x190>
 8008806:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800880a:	4333      	orrs	r3, r6
 800880c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008810:	4573      	cmp	r3, lr
 8008812:	ec51 0b10 	vmov	r0, r1, d0
 8008816:	ee11 8a10 	vmov	r8, s2
 800881a:	d80a      	bhi.n	8008832 <__ieee754_atan2+0x3a>
 800881c:	4244      	negs	r4, r0
 800881e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008822:	4304      	orrs	r4, r0
 8008824:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008828:	4574      	cmp	r4, lr
 800882a:	ee10 9a10 	vmov	r9, s0
 800882e:	468c      	mov	ip, r1
 8008830:	d907      	bls.n	8008842 <__ieee754_atan2+0x4a>
 8008832:	4632      	mov	r2, r6
 8008834:	463b      	mov	r3, r7
 8008836:	f7f7 fced 	bl	8000214 <__adddf3>
 800883a:	ec41 0b10 	vmov	d0, r0, r1
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008846:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800884a:	4334      	orrs	r4, r6
 800884c:	d103      	bne.n	8008856 <__ieee754_atan2+0x5e>
 800884e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008852:	f001 bd49 	b.w	800a2e8 <atan>
 8008856:	17bc      	asrs	r4, r7, #30
 8008858:	f004 0402 	and.w	r4, r4, #2
 800885c:	ea53 0909 	orrs.w	r9, r3, r9
 8008860:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008864:	d107      	bne.n	8008876 <__ieee754_atan2+0x7e>
 8008866:	2c02      	cmp	r4, #2
 8008868:	d060      	beq.n	800892c <__ieee754_atan2+0x134>
 800886a:	2c03      	cmp	r4, #3
 800886c:	d1e5      	bne.n	800883a <__ieee754_atan2+0x42>
 800886e:	a142      	add	r1, pc, #264	; (adr r1, 8008978 <__ieee754_atan2+0x180>)
 8008870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008874:	e7e1      	b.n	800883a <__ieee754_atan2+0x42>
 8008876:	ea52 0808 	orrs.w	r8, r2, r8
 800887a:	d106      	bne.n	800888a <__ieee754_atan2+0x92>
 800887c:	f1bc 0f00 	cmp.w	ip, #0
 8008880:	da5f      	bge.n	8008942 <__ieee754_atan2+0x14a>
 8008882:	a13f      	add	r1, pc, #252	; (adr r1, 8008980 <__ieee754_atan2+0x188>)
 8008884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008888:	e7d7      	b.n	800883a <__ieee754_atan2+0x42>
 800888a:	4572      	cmp	r2, lr
 800888c:	d10f      	bne.n	80088ae <__ieee754_atan2+0xb6>
 800888e:	4293      	cmp	r3, r2
 8008890:	f104 34ff 	add.w	r4, r4, #4294967295
 8008894:	d107      	bne.n	80088a6 <__ieee754_atan2+0xae>
 8008896:	2c02      	cmp	r4, #2
 8008898:	d84c      	bhi.n	8008934 <__ieee754_atan2+0x13c>
 800889a:	4b35      	ldr	r3, [pc, #212]	; (8008970 <__ieee754_atan2+0x178>)
 800889c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80088a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80088a4:	e7c9      	b.n	800883a <__ieee754_atan2+0x42>
 80088a6:	2c02      	cmp	r4, #2
 80088a8:	d848      	bhi.n	800893c <__ieee754_atan2+0x144>
 80088aa:	4b32      	ldr	r3, [pc, #200]	; (8008974 <__ieee754_atan2+0x17c>)
 80088ac:	e7f6      	b.n	800889c <__ieee754_atan2+0xa4>
 80088ae:	4573      	cmp	r3, lr
 80088b0:	d0e4      	beq.n	800887c <__ieee754_atan2+0x84>
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80088b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088bc:	da1e      	bge.n	80088fc <__ieee754_atan2+0x104>
 80088be:	2f00      	cmp	r7, #0
 80088c0:	da01      	bge.n	80088c6 <__ieee754_atan2+0xce>
 80088c2:	323c      	adds	r2, #60	; 0x3c
 80088c4:	db1e      	blt.n	8008904 <__ieee754_atan2+0x10c>
 80088c6:	4632      	mov	r2, r6
 80088c8:	463b      	mov	r3, r7
 80088ca:	f7f7 ff83 	bl	80007d4 <__aeabi_ddiv>
 80088ce:	ec41 0b10 	vmov	d0, r0, r1
 80088d2:	f001 fea9 	bl	800a628 <fabs>
 80088d6:	f001 fd07 	bl	800a2e8 <atan>
 80088da:	ec51 0b10 	vmov	r0, r1, d0
 80088de:	2c01      	cmp	r4, #1
 80088e0:	d013      	beq.n	800890a <__ieee754_atan2+0x112>
 80088e2:	2c02      	cmp	r4, #2
 80088e4:	d015      	beq.n	8008912 <__ieee754_atan2+0x11a>
 80088e6:	2c00      	cmp	r4, #0
 80088e8:	d0a7      	beq.n	800883a <__ieee754_atan2+0x42>
 80088ea:	a319      	add	r3, pc, #100	; (adr r3, 8008950 <__ieee754_atan2+0x158>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fc8e 	bl	8000210 <__aeabi_dsub>
 80088f4:	a318      	add	r3, pc, #96	; (adr r3, 8008958 <__ieee754_atan2+0x160>)
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	e014      	b.n	8008926 <__ieee754_atan2+0x12e>
 80088fc:	a118      	add	r1, pc, #96	; (adr r1, 8008960 <__ieee754_atan2+0x168>)
 80088fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008902:	e7ec      	b.n	80088de <__ieee754_atan2+0xe6>
 8008904:	2000      	movs	r0, #0
 8008906:	2100      	movs	r1, #0
 8008908:	e7e9      	b.n	80088de <__ieee754_atan2+0xe6>
 800890a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800890e:	4619      	mov	r1, r3
 8008910:	e793      	b.n	800883a <__ieee754_atan2+0x42>
 8008912:	a30f      	add	r3, pc, #60	; (adr r3, 8008950 <__ieee754_atan2+0x158>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	f7f7 fc7a 	bl	8000210 <__aeabi_dsub>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	a10d      	add	r1, pc, #52	; (adr r1, 8008958 <__ieee754_atan2+0x160>)
 8008922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008926:	f7f7 fc73 	bl	8000210 <__aeabi_dsub>
 800892a:	e786      	b.n	800883a <__ieee754_atan2+0x42>
 800892c:	a10a      	add	r1, pc, #40	; (adr r1, 8008958 <__ieee754_atan2+0x160>)
 800892e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008932:	e782      	b.n	800883a <__ieee754_atan2+0x42>
 8008934:	a10c      	add	r1, pc, #48	; (adr r1, 8008968 <__ieee754_atan2+0x170>)
 8008936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800893a:	e77e      	b.n	800883a <__ieee754_atan2+0x42>
 800893c:	2000      	movs	r0, #0
 800893e:	2100      	movs	r1, #0
 8008940:	e77b      	b.n	800883a <__ieee754_atan2+0x42>
 8008942:	a107      	add	r1, pc, #28	; (adr r1, 8008960 <__ieee754_atan2+0x168>)
 8008944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008948:	e777      	b.n	800883a <__ieee754_atan2+0x42>
 800894a:	bf00      	nop
 800894c:	f3af 8000 	nop.w
 8008950:	33145c07 	.word	0x33145c07
 8008954:	3ca1a626 	.word	0x3ca1a626
 8008958:	54442d18 	.word	0x54442d18
 800895c:	400921fb 	.word	0x400921fb
 8008960:	54442d18 	.word	0x54442d18
 8008964:	3ff921fb 	.word	0x3ff921fb
 8008968:	54442d18 	.word	0x54442d18
 800896c:	3fe921fb 	.word	0x3fe921fb
 8008970:	0800a9b8 	.word	0x0800a9b8
 8008974:	0800a9d0 	.word	0x0800a9d0
 8008978:	54442d18 	.word	0x54442d18
 800897c:	c00921fb 	.word	0xc00921fb
 8008980:	54442d18 	.word	0x54442d18
 8008984:	bff921fb 	.word	0xbff921fb
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	00000000 	.word	0x00000000

08008990 <__ieee754_pow>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	ed2d 8b06 	vpush	{d8-d10}
 8008998:	b08d      	sub	sp, #52	; 0x34
 800899a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800899e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80089a2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80089a6:	ea56 0100 	orrs.w	r1, r6, r0
 80089aa:	ec53 2b10 	vmov	r2, r3, d0
 80089ae:	f000 84d1 	beq.w	8009354 <__ieee754_pow+0x9c4>
 80089b2:	497f      	ldr	r1, [pc, #508]	; (8008bb0 <__ieee754_pow+0x220>)
 80089b4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80089b8:	428c      	cmp	r4, r1
 80089ba:	ee10 8a10 	vmov	r8, s0
 80089be:	4699      	mov	r9, r3
 80089c0:	dc09      	bgt.n	80089d6 <__ieee754_pow+0x46>
 80089c2:	d103      	bne.n	80089cc <__ieee754_pow+0x3c>
 80089c4:	b97a      	cbnz	r2, 80089e6 <__ieee754_pow+0x56>
 80089c6:	42a6      	cmp	r6, r4
 80089c8:	dd02      	ble.n	80089d0 <__ieee754_pow+0x40>
 80089ca:	e00c      	b.n	80089e6 <__ieee754_pow+0x56>
 80089cc:	428e      	cmp	r6, r1
 80089ce:	dc02      	bgt.n	80089d6 <__ieee754_pow+0x46>
 80089d0:	428e      	cmp	r6, r1
 80089d2:	d110      	bne.n	80089f6 <__ieee754_pow+0x66>
 80089d4:	b178      	cbz	r0, 80089f6 <__ieee754_pow+0x66>
 80089d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80089da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80089de:	ea54 0308 	orrs.w	r3, r4, r8
 80089e2:	f000 84b7 	beq.w	8009354 <__ieee754_pow+0x9c4>
 80089e6:	4873      	ldr	r0, [pc, #460]	; (8008bb4 <__ieee754_pow+0x224>)
 80089e8:	b00d      	add	sp, #52	; 0x34
 80089ea:	ecbd 8b06 	vpop	{d8-d10}
 80089ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f2:	f001 bead 	b.w	800a750 <nan>
 80089f6:	f1b9 0f00 	cmp.w	r9, #0
 80089fa:	da36      	bge.n	8008a6a <__ieee754_pow+0xda>
 80089fc:	496e      	ldr	r1, [pc, #440]	; (8008bb8 <__ieee754_pow+0x228>)
 80089fe:	428e      	cmp	r6, r1
 8008a00:	dc51      	bgt.n	8008aa6 <__ieee754_pow+0x116>
 8008a02:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008a06:	428e      	cmp	r6, r1
 8008a08:	f340 84af 	ble.w	800936a <__ieee754_pow+0x9da>
 8008a0c:	1531      	asrs	r1, r6, #20
 8008a0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008a12:	2914      	cmp	r1, #20
 8008a14:	dd0f      	ble.n	8008a36 <__ieee754_pow+0xa6>
 8008a16:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008a1a:	fa20 fc01 	lsr.w	ip, r0, r1
 8008a1e:	fa0c f101 	lsl.w	r1, ip, r1
 8008a22:	4281      	cmp	r1, r0
 8008a24:	f040 84a1 	bne.w	800936a <__ieee754_pow+0x9da>
 8008a28:	f00c 0c01 	and.w	ip, ip, #1
 8008a2c:	f1cc 0102 	rsb	r1, ip, #2
 8008a30:	9100      	str	r1, [sp, #0]
 8008a32:	b180      	cbz	r0, 8008a56 <__ieee754_pow+0xc6>
 8008a34:	e059      	b.n	8008aea <__ieee754_pow+0x15a>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d155      	bne.n	8008ae6 <__ieee754_pow+0x156>
 8008a3a:	f1c1 0114 	rsb	r1, r1, #20
 8008a3e:	fa46 fc01 	asr.w	ip, r6, r1
 8008a42:	fa0c f101 	lsl.w	r1, ip, r1
 8008a46:	42b1      	cmp	r1, r6
 8008a48:	f040 848c 	bne.w	8009364 <__ieee754_pow+0x9d4>
 8008a4c:	f00c 0c01 	and.w	ip, ip, #1
 8008a50:	f1cc 0102 	rsb	r1, ip, #2
 8008a54:	9100      	str	r1, [sp, #0]
 8008a56:	4959      	ldr	r1, [pc, #356]	; (8008bbc <__ieee754_pow+0x22c>)
 8008a58:	428e      	cmp	r6, r1
 8008a5a:	d12d      	bne.n	8008ab8 <__ieee754_pow+0x128>
 8008a5c:	2f00      	cmp	r7, #0
 8008a5e:	da79      	bge.n	8008b54 <__ieee754_pow+0x1c4>
 8008a60:	4956      	ldr	r1, [pc, #344]	; (8008bbc <__ieee754_pow+0x22c>)
 8008a62:	2000      	movs	r0, #0
 8008a64:	f7f7 feb6 	bl	80007d4 <__aeabi_ddiv>
 8008a68:	e016      	b.n	8008a98 <__ieee754_pow+0x108>
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	9100      	str	r1, [sp, #0]
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d13b      	bne.n	8008aea <__ieee754_pow+0x15a>
 8008a72:	494f      	ldr	r1, [pc, #316]	; (8008bb0 <__ieee754_pow+0x220>)
 8008a74:	428e      	cmp	r6, r1
 8008a76:	d1ee      	bne.n	8008a56 <__ieee754_pow+0xc6>
 8008a78:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008a7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008a80:	ea53 0308 	orrs.w	r3, r3, r8
 8008a84:	f000 8466 	beq.w	8009354 <__ieee754_pow+0x9c4>
 8008a88:	4b4d      	ldr	r3, [pc, #308]	; (8008bc0 <__ieee754_pow+0x230>)
 8008a8a:	429c      	cmp	r4, r3
 8008a8c:	dd0d      	ble.n	8008aaa <__ieee754_pow+0x11a>
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	f280 8464 	bge.w	800935c <__ieee754_pow+0x9cc>
 8008a94:	2000      	movs	r0, #0
 8008a96:	2100      	movs	r1, #0
 8008a98:	ec41 0b10 	vmov	d0, r0, r1
 8008a9c:	b00d      	add	sp, #52	; 0x34
 8008a9e:	ecbd 8b06 	vpop	{d8-d10}
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	e7e0      	b.n	8008a6c <__ieee754_pow+0xdc>
 8008aaa:	2f00      	cmp	r7, #0
 8008aac:	daf2      	bge.n	8008a94 <__ieee754_pow+0x104>
 8008aae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008ab2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ab6:	e7ef      	b.n	8008a98 <__ieee754_pow+0x108>
 8008ab8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008abc:	d104      	bne.n	8008ac8 <__ieee754_pow+0x138>
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f7f7 fd5d 	bl	8000580 <__aeabi_dmul>
 8008ac6:	e7e7      	b.n	8008a98 <__ieee754_pow+0x108>
 8008ac8:	493e      	ldr	r1, [pc, #248]	; (8008bc4 <__ieee754_pow+0x234>)
 8008aca:	428f      	cmp	r7, r1
 8008acc:	d10d      	bne.n	8008aea <__ieee754_pow+0x15a>
 8008ace:	f1b9 0f00 	cmp.w	r9, #0
 8008ad2:	db0a      	blt.n	8008aea <__ieee754_pow+0x15a>
 8008ad4:	ec43 2b10 	vmov	d0, r2, r3
 8008ad8:	b00d      	add	sp, #52	; 0x34
 8008ada:	ecbd 8b06 	vpop	{d8-d10}
 8008ade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae2:	f000 be83 	b.w	80097ec <__ieee754_sqrt>
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	9100      	str	r1, [sp, #0]
 8008aea:	ec43 2b10 	vmov	d0, r2, r3
 8008aee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008af2:	f001 fd99 	bl	800a628 <fabs>
 8008af6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008afa:	ec51 0b10 	vmov	r0, r1, d0
 8008afe:	f1b8 0f00 	cmp.w	r8, #0
 8008b02:	d12a      	bne.n	8008b5a <__ieee754_pow+0x1ca>
 8008b04:	b12c      	cbz	r4, 8008b12 <__ieee754_pow+0x182>
 8008b06:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008bbc <__ieee754_pow+0x22c>
 8008b0a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008b0e:	45e6      	cmp	lr, ip
 8008b10:	d123      	bne.n	8008b5a <__ieee754_pow+0x1ca>
 8008b12:	2f00      	cmp	r7, #0
 8008b14:	da05      	bge.n	8008b22 <__ieee754_pow+0x192>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	4927      	ldr	r1, [pc, #156]	; (8008bbc <__ieee754_pow+0x22c>)
 8008b1e:	f7f7 fe59 	bl	80007d4 <__aeabi_ddiv>
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	dab7      	bge.n	8008a98 <__ieee754_pow+0x108>
 8008b28:	9b00      	ldr	r3, [sp, #0]
 8008b2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008b2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b32:	4323      	orrs	r3, r4
 8008b34:	d108      	bne.n	8008b48 <__ieee754_pow+0x1b8>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f7f7 fb67 	bl	8000210 <__aeabi_dsub>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	e78d      	b.n	8008a64 <__ieee754_pow+0xd4>
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d1a4      	bne.n	8008a98 <__ieee754_pow+0x108>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	e79e      	b.n	8008a98 <__ieee754_pow+0x108>
 8008b5a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008b5e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008b62:	950a      	str	r5, [sp, #40]	; 0x28
 8008b64:	9d00      	ldr	r5, [sp, #0]
 8008b66:	46ac      	mov	ip, r5
 8008b68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b6a:	ea5c 0505 	orrs.w	r5, ip, r5
 8008b6e:	d0e4      	beq.n	8008b3a <__ieee754_pow+0x1aa>
 8008b70:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <__ieee754_pow+0x238>)
 8008b72:	429e      	cmp	r6, r3
 8008b74:	f340 80fc 	ble.w	8008d70 <__ieee754_pow+0x3e0>
 8008b78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008b7c:	429e      	cmp	r6, r3
 8008b7e:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <__ieee754_pow+0x230>)
 8008b80:	dd07      	ble.n	8008b92 <__ieee754_pow+0x202>
 8008b82:	429c      	cmp	r4, r3
 8008b84:	dc0a      	bgt.n	8008b9c <__ieee754_pow+0x20c>
 8008b86:	2f00      	cmp	r7, #0
 8008b88:	da84      	bge.n	8008a94 <__ieee754_pow+0x104>
 8008b8a:	a307      	add	r3, pc, #28	; (adr r3, 8008ba8 <__ieee754_pow+0x218>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	e795      	b.n	8008abe <__ieee754_pow+0x12e>
 8008b92:	429c      	cmp	r4, r3
 8008b94:	dbf7      	blt.n	8008b86 <__ieee754_pow+0x1f6>
 8008b96:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <__ieee754_pow+0x22c>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	dd17      	ble.n	8008bcc <__ieee754_pow+0x23c>
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	dcf4      	bgt.n	8008b8a <__ieee754_pow+0x1fa>
 8008ba0:	e778      	b.n	8008a94 <__ieee754_pow+0x104>
 8008ba2:	bf00      	nop
 8008ba4:	f3af 8000 	nop.w
 8008ba8:	8800759c 	.word	0x8800759c
 8008bac:	7e37e43c 	.word	0x7e37e43c
 8008bb0:	7ff00000 	.word	0x7ff00000
 8008bb4:	0800a9e8 	.word	0x0800a9e8
 8008bb8:	433fffff 	.word	0x433fffff
 8008bbc:	3ff00000 	.word	0x3ff00000
 8008bc0:	3fefffff 	.word	0x3fefffff
 8008bc4:	3fe00000 	.word	0x3fe00000
 8008bc8:	41e00000 	.word	0x41e00000
 8008bcc:	4b64      	ldr	r3, [pc, #400]	; (8008d60 <__ieee754_pow+0x3d0>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f7f7 fb1e 	bl	8000210 <__aeabi_dsub>
 8008bd4:	a356      	add	r3, pc, #344	; (adr r3, 8008d30 <__ieee754_pow+0x3a0>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	4604      	mov	r4, r0
 8008bdc:	460d      	mov	r5, r1
 8008bde:	f7f7 fccf 	bl	8000580 <__aeabi_dmul>
 8008be2:	a355      	add	r3, pc, #340	; (adr r3, 8008d38 <__ieee754_pow+0x3a8>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	4606      	mov	r6, r0
 8008bea:	460f      	mov	r7, r1
 8008bec:	4620      	mov	r0, r4
 8008bee:	4629      	mov	r1, r5
 8008bf0:	f7f7 fcc6 	bl	8000580 <__aeabi_dmul>
 8008bf4:	4b5b      	ldr	r3, [pc, #364]	; (8008d64 <__ieee754_pow+0x3d4>)
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	468b      	mov	fp, r1
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fcbe 	bl	8000580 <__aeabi_dmul>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	a14d      	add	r1, pc, #308	; (adr r1, 8008d40 <__ieee754_pow+0x3b0>)
 8008c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c0e:	f7f7 faff 	bl	8000210 <__aeabi_dsub>
 8008c12:	4622      	mov	r2, r4
 8008c14:	462b      	mov	r3, r5
 8008c16:	f7f7 fcb3 	bl	8000580 <__aeabi_dmul>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	2000      	movs	r0, #0
 8008c20:	4951      	ldr	r1, [pc, #324]	; (8008d68 <__ieee754_pow+0x3d8>)
 8008c22:	f7f7 faf5 	bl	8000210 <__aeabi_dsub>
 8008c26:	4622      	mov	r2, r4
 8008c28:	4680      	mov	r8, r0
 8008c2a:	4689      	mov	r9, r1
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fca5 	bl	8000580 <__aeabi_dmul>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	f7f7 fc9f 	bl	8000580 <__aeabi_dmul>
 8008c42:	a341      	add	r3, pc, #260	; (adr r3, 8008d48 <__ieee754_pow+0x3b8>)
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f7f7 fc9a 	bl	8000580 <__aeabi_dmul>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4650      	mov	r0, sl
 8008c52:	4659      	mov	r1, fp
 8008c54:	f7f7 fadc 	bl	8000210 <__aeabi_dsub>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	4689      	mov	r9, r1
 8008c60:	4630      	mov	r0, r6
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 fad6 	bl	8000214 <__adddf3>
 8008c68:	2400      	movs	r4, #0
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	463b      	mov	r3, r7
 8008c6e:	4620      	mov	r0, r4
 8008c70:	460d      	mov	r5, r1
 8008c72:	f7f7 facd 	bl	8000210 <__aeabi_dsub>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	f7f7 fac7 	bl	8000210 <__aeabi_dsub>
 8008c82:	9b00      	ldr	r3, [sp, #0]
 8008c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	4682      	mov	sl, r0
 8008c8c:	468b      	mov	fp, r1
 8008c8e:	f040 81f1 	bne.w	8009074 <__ieee754_pow+0x6e4>
 8008c92:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008d50 <__ieee754_pow+0x3c0>
 8008c96:	eeb0 8a47 	vmov.f32	s16, s14
 8008c9a:	eef0 8a67 	vmov.f32	s17, s15
 8008c9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cac:	f7f7 fab0 	bl	8000210 <__aeabi_dsub>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	462b      	mov	r3, r5
 8008cb4:	f7f7 fc64 	bl	8000580 <__aeabi_dmul>
 8008cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	4689      	mov	r9, r1
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	4659      	mov	r1, fp
 8008cc4:	f7f7 fc5c 	bl	8000580 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4649      	mov	r1, r9
 8008cd0:	f7f7 faa0 	bl	8000214 <__adddf3>
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	4680      	mov	r8, r0
 8008cda:	4689      	mov	r9, r1
 8008cdc:	4620      	mov	r0, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f7f7 fc4e 	bl	8000580 <__aeabi_dmul>
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	460d      	mov	r5, r1
 8008cea:	4602      	mov	r2, r0
 8008cec:	4649      	mov	r1, r9
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f7f7 fa90 	bl	8000214 <__adddf3>
 8008cf4:	4b1d      	ldr	r3, [pc, #116]	; (8008d6c <__ieee754_pow+0x3dc>)
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	ec45 4b19 	vmov	d9, r4, r5
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	460f      	mov	r7, r1
 8008d00:	468b      	mov	fp, r1
 8008d02:	f340 82fe 	ble.w	8009302 <__ieee754_pow+0x972>
 8008d06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008d0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d0e:	4303      	orrs	r3, r0
 8008d10:	f000 81f0 	beq.w	80090f4 <__ieee754_pow+0x764>
 8008d14:	a310      	add	r3, pc, #64	; (adr r3, 8008d58 <__ieee754_pow+0x3c8>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	ec51 0b18 	vmov	r0, r1, d8
 8008d1e:	f7f7 fc2f 	bl	8000580 <__aeabi_dmul>
 8008d22:	a30d      	add	r3, pc, #52	; (adr r3, 8008d58 <__ieee754_pow+0x3c8>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	e6cb      	b.n	8008ac2 <__ieee754_pow+0x132>
 8008d2a:	bf00      	nop
 8008d2c:	f3af 8000 	nop.w
 8008d30:	60000000 	.word	0x60000000
 8008d34:	3ff71547 	.word	0x3ff71547
 8008d38:	f85ddf44 	.word	0xf85ddf44
 8008d3c:	3e54ae0b 	.word	0x3e54ae0b
 8008d40:	55555555 	.word	0x55555555
 8008d44:	3fd55555 	.word	0x3fd55555
 8008d48:	652b82fe 	.word	0x652b82fe
 8008d4c:	3ff71547 	.word	0x3ff71547
 8008d50:	00000000 	.word	0x00000000
 8008d54:	bff00000 	.word	0xbff00000
 8008d58:	8800759c 	.word	0x8800759c
 8008d5c:	7e37e43c 	.word	0x7e37e43c
 8008d60:	3ff00000 	.word	0x3ff00000
 8008d64:	3fd00000 	.word	0x3fd00000
 8008d68:	3fe00000 	.word	0x3fe00000
 8008d6c:	408fffff 	.word	0x408fffff
 8008d70:	4bd7      	ldr	r3, [pc, #860]	; (80090d0 <__ieee754_pow+0x740>)
 8008d72:	ea03 0309 	and.w	r3, r3, r9
 8008d76:	2200      	movs	r2, #0
 8008d78:	b92b      	cbnz	r3, 8008d86 <__ieee754_pow+0x3f6>
 8008d7a:	4bd6      	ldr	r3, [pc, #856]	; (80090d4 <__ieee754_pow+0x744>)
 8008d7c:	f7f7 fc00 	bl	8000580 <__aeabi_dmul>
 8008d80:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008d84:	460c      	mov	r4, r1
 8008d86:	1523      	asrs	r3, r4, #20
 8008d88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d8c:	4413      	add	r3, r2
 8008d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d90:	4bd1      	ldr	r3, [pc, #836]	; (80090d8 <__ieee754_pow+0x748>)
 8008d92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008d9a:	429c      	cmp	r4, r3
 8008d9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008da0:	dd08      	ble.n	8008db4 <__ieee754_pow+0x424>
 8008da2:	4bce      	ldr	r3, [pc, #824]	; (80090dc <__ieee754_pow+0x74c>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	f340 8163 	ble.w	8009070 <__ieee754_pow+0x6e0>
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	3301      	adds	r3, #1
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008db4:	2400      	movs	r4, #0
 8008db6:	00e3      	lsls	r3, r4, #3
 8008db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dba:	4bc9      	ldr	r3, [pc, #804]	; (80090e0 <__ieee754_pow+0x750>)
 8008dbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dc0:	ed93 7b00 	vldr	d7, [r3]
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	ec53 2b17 	vmov	r2, r3, d7
 8008dca:	eeb0 8a47 	vmov.f32	s16, s14
 8008dce:	eef0 8a67 	vmov.f32	s17, s15
 8008dd2:	4682      	mov	sl, r0
 8008dd4:	f7f7 fa1c 	bl	8000210 <__aeabi_dsub>
 8008dd8:	4652      	mov	r2, sl
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460f      	mov	r7, r1
 8008dde:	462b      	mov	r3, r5
 8008de0:	ec51 0b18 	vmov	r0, r1, d8
 8008de4:	f7f7 fa16 	bl	8000214 <__adddf3>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	2000      	movs	r0, #0
 8008dee:	49bd      	ldr	r1, [pc, #756]	; (80090e4 <__ieee754_pow+0x754>)
 8008df0:	f7f7 fcf0 	bl	80007d4 <__aeabi_ddiv>
 8008df4:	ec41 0b19 	vmov	d9, r0, r1
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fbbe 	bl	8000580 <__aeabi_dmul>
 8008e04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e10:	2300      	movs	r3, #0
 8008e12:	9304      	str	r3, [sp, #16]
 8008e14:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e18:	46ab      	mov	fp, r5
 8008e1a:	106d      	asrs	r5, r5, #1
 8008e1c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008e20:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008e24:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	4614      	mov	r4, r2
 8008e30:	461d      	mov	r5, r3
 8008e32:	f7f7 fba5 	bl	8000580 <__aeabi_dmul>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 f9e7 	bl	8000210 <__aeabi_dsub>
 8008e42:	ec53 2b18 	vmov	r2, r3, d8
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 f9df 	bl	8000210 <__aeabi_dsub>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4650      	mov	r0, sl
 8008e58:	4659      	mov	r1, fp
 8008e5a:	f7f7 f9d9 	bl	8000210 <__aeabi_dsub>
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	f7f7 fb8d 	bl	8000580 <__aeabi_dmul>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	f7f7 f9cf 	bl	8000210 <__aeabi_dsub>
 8008e72:	ec53 2b19 	vmov	r2, r3, d9
 8008e76:	f7f7 fb83 	bl	8000580 <__aeabi_dmul>
 8008e7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e7e:	ec41 0b18 	vmov	d8, r0, r1
 8008e82:	4610      	mov	r0, r2
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7f7 fb7b 	bl	8000580 <__aeabi_dmul>
 8008e8a:	a37d      	add	r3, pc, #500	; (adr r3, 8009080 <__ieee754_pow+0x6f0>)
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	4604      	mov	r4, r0
 8008e92:	460d      	mov	r5, r1
 8008e94:	f7f7 fb74 	bl	8000580 <__aeabi_dmul>
 8008e98:	a37b      	add	r3, pc, #492	; (adr r3, 8009088 <__ieee754_pow+0x6f8>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 f9b9 	bl	8000214 <__adddf3>
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	462b      	mov	r3, r5
 8008ea6:	f7f7 fb6b 	bl	8000580 <__aeabi_dmul>
 8008eaa:	a379      	add	r3, pc, #484	; (adr r3, 8009090 <__ieee754_pow+0x700>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 f9b0 	bl	8000214 <__adddf3>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	f7f7 fb62 	bl	8000580 <__aeabi_dmul>
 8008ebc:	a376      	add	r3, pc, #472	; (adr r3, 8009098 <__ieee754_pow+0x708>)
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 f9a7 	bl	8000214 <__adddf3>
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	462b      	mov	r3, r5
 8008eca:	f7f7 fb59 	bl	8000580 <__aeabi_dmul>
 8008ece:	a374      	add	r3, pc, #464	; (adr r3, 80090a0 <__ieee754_pow+0x710>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f7f7 f99e 	bl	8000214 <__adddf3>
 8008ed8:	4622      	mov	r2, r4
 8008eda:	462b      	mov	r3, r5
 8008edc:	f7f7 fb50 	bl	8000580 <__aeabi_dmul>
 8008ee0:	a371      	add	r3, pc, #452	; (adr r3, 80090a8 <__ieee754_pow+0x718>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 f995 	bl	8000214 <__adddf3>
 8008eea:	4622      	mov	r2, r4
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 fb43 	bl	8000580 <__aeabi_dmul>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 fb3d 	bl	8000580 <__aeabi_dmul>
 8008f06:	4642      	mov	r2, r8
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	464b      	mov	r3, r9
 8008f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f12:	f7f7 f97f 	bl	8000214 <__adddf3>
 8008f16:	ec53 2b18 	vmov	r2, r3, d8
 8008f1a:	f7f7 fb31 	bl	8000580 <__aeabi_dmul>
 8008f1e:	4622      	mov	r2, r4
 8008f20:	462b      	mov	r3, r5
 8008f22:	f7f7 f977 	bl	8000214 <__adddf3>
 8008f26:	4642      	mov	r2, r8
 8008f28:	4682      	mov	sl, r0
 8008f2a:	468b      	mov	fp, r1
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4649      	mov	r1, r9
 8008f32:	f7f7 fb25 	bl	8000580 <__aeabi_dmul>
 8008f36:	4b6c      	ldr	r3, [pc, #432]	; (80090e8 <__ieee754_pow+0x758>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	f7f7 f969 	bl	8000214 <__adddf3>
 8008f42:	4652      	mov	r2, sl
 8008f44:	465b      	mov	r3, fp
 8008f46:	f7f7 f965 	bl	8000214 <__adddf3>
 8008f4a:	9c04      	ldr	r4, [sp, #16]
 8008f4c:	460d      	mov	r5, r1
 8008f4e:	4622      	mov	r2, r4
 8008f50:	460b      	mov	r3, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 fb13 	bl	8000580 <__aeabi_dmul>
 8008f5a:	4b63      	ldr	r3, [pc, #396]	; (80090e8 <__ieee754_pow+0x758>)
 8008f5c:	4680      	mov	r8, r0
 8008f5e:	4689      	mov	r9, r1
 8008f60:	2200      	movs	r2, #0
 8008f62:	4620      	mov	r0, r4
 8008f64:	4629      	mov	r1, r5
 8008f66:	f7f7 f953 	bl	8000210 <__aeabi_dsub>
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	f7f7 f94f 	bl	8000210 <__aeabi_dsub>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4650      	mov	r0, sl
 8008f78:	4659      	mov	r1, fp
 8008f7a:	f7f7 f949 	bl	8000210 <__aeabi_dsub>
 8008f7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f82:	f7f7 fafd 	bl	8000580 <__aeabi_dmul>
 8008f86:	4622      	mov	r2, r4
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	462b      	mov	r3, r5
 8008f8e:	ec51 0b18 	vmov	r0, r1, d8
 8008f92:	f7f7 faf5 	bl	8000580 <__aeabi_dmul>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 f939 	bl	8000214 <__adddf3>
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4640      	mov	r0, r8
 8008fac:	4649      	mov	r1, r9
 8008fae:	f7f7 f931 	bl	8000214 <__adddf3>
 8008fb2:	9c04      	ldr	r4, [sp, #16]
 8008fb4:	a33e      	add	r3, pc, #248	; (adr r3, 80090b0 <__ieee754_pow+0x720>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	4620      	mov	r0, r4
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	f7f7 fadf 	bl	8000580 <__aeabi_dmul>
 8008fc2:	4642      	mov	r2, r8
 8008fc4:	ec41 0b18 	vmov	d8, r0, r1
 8008fc8:	464b      	mov	r3, r9
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 f91f 	bl	8000210 <__aeabi_dsub>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	f7f7 f919 	bl	8000210 <__aeabi_dsub>
 8008fde:	a336      	add	r3, pc, #216	; (adr r3, 80090b8 <__ieee754_pow+0x728>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 facc 	bl	8000580 <__aeabi_dmul>
 8008fe8:	a335      	add	r3, pc, #212	; (adr r3, 80090c0 <__ieee754_pow+0x730>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7f7 fac3 	bl	8000580 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	f7f7 f907 	bl	8000214 <__adddf3>
 8009006:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009008:	4b38      	ldr	r3, [pc, #224]	; (80090ec <__ieee754_pow+0x75c>)
 800900a:	4413      	add	r3, r2
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f7f7 f900 	bl	8000214 <__adddf3>
 8009014:	4682      	mov	sl, r0
 8009016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009018:	468b      	mov	fp, r1
 800901a:	f7f7 fa47 	bl	80004ac <__aeabi_i2d>
 800901e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009020:	4b33      	ldr	r3, [pc, #204]	; (80090f0 <__ieee754_pow+0x760>)
 8009022:	4413      	add	r3, r2
 8009024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009028:	4606      	mov	r6, r0
 800902a:	460f      	mov	r7, r1
 800902c:	4652      	mov	r2, sl
 800902e:	465b      	mov	r3, fp
 8009030:	ec51 0b18 	vmov	r0, r1, d8
 8009034:	f7f7 f8ee 	bl	8000214 <__adddf3>
 8009038:	4642      	mov	r2, r8
 800903a:	464b      	mov	r3, r9
 800903c:	f7f7 f8ea 	bl	8000214 <__adddf3>
 8009040:	4632      	mov	r2, r6
 8009042:	463b      	mov	r3, r7
 8009044:	f7f7 f8e6 	bl	8000214 <__adddf3>
 8009048:	9c04      	ldr	r4, [sp, #16]
 800904a:	4632      	mov	r2, r6
 800904c:	463b      	mov	r3, r7
 800904e:	4620      	mov	r0, r4
 8009050:	460d      	mov	r5, r1
 8009052:	f7f7 f8dd 	bl	8000210 <__aeabi_dsub>
 8009056:	4642      	mov	r2, r8
 8009058:	464b      	mov	r3, r9
 800905a:	f7f7 f8d9 	bl	8000210 <__aeabi_dsub>
 800905e:	ec53 2b18 	vmov	r2, r3, d8
 8009062:	f7f7 f8d5 	bl	8000210 <__aeabi_dsub>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4650      	mov	r0, sl
 800906c:	4659      	mov	r1, fp
 800906e:	e606      	b.n	8008c7e <__ieee754_pow+0x2ee>
 8009070:	2401      	movs	r4, #1
 8009072:	e6a0      	b.n	8008db6 <__ieee754_pow+0x426>
 8009074:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80090c8 <__ieee754_pow+0x738>
 8009078:	e60d      	b.n	8008c96 <__ieee754_pow+0x306>
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w
 8009080:	4a454eef 	.word	0x4a454eef
 8009084:	3fca7e28 	.word	0x3fca7e28
 8009088:	93c9db65 	.word	0x93c9db65
 800908c:	3fcd864a 	.word	0x3fcd864a
 8009090:	a91d4101 	.word	0xa91d4101
 8009094:	3fd17460 	.word	0x3fd17460
 8009098:	518f264d 	.word	0x518f264d
 800909c:	3fd55555 	.word	0x3fd55555
 80090a0:	db6fabff 	.word	0xdb6fabff
 80090a4:	3fdb6db6 	.word	0x3fdb6db6
 80090a8:	33333303 	.word	0x33333303
 80090ac:	3fe33333 	.word	0x3fe33333
 80090b0:	e0000000 	.word	0xe0000000
 80090b4:	3feec709 	.word	0x3feec709
 80090b8:	dc3a03fd 	.word	0xdc3a03fd
 80090bc:	3feec709 	.word	0x3feec709
 80090c0:	145b01f5 	.word	0x145b01f5
 80090c4:	be3e2fe0 	.word	0xbe3e2fe0
 80090c8:	00000000 	.word	0x00000000
 80090cc:	3ff00000 	.word	0x3ff00000
 80090d0:	7ff00000 	.word	0x7ff00000
 80090d4:	43400000 	.word	0x43400000
 80090d8:	0003988e 	.word	0x0003988e
 80090dc:	000bb679 	.word	0x000bb679
 80090e0:	0800a9f0 	.word	0x0800a9f0
 80090e4:	3ff00000 	.word	0x3ff00000
 80090e8:	40080000 	.word	0x40080000
 80090ec:	0800aa10 	.word	0x0800aa10
 80090f0:	0800aa00 	.word	0x0800aa00
 80090f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80093cc <__ieee754_pow+0xa3c>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	4640      	mov	r0, r8
 80090fc:	4649      	mov	r1, r9
 80090fe:	f7f7 f889 	bl	8000214 <__adddf3>
 8009102:	4622      	mov	r2, r4
 8009104:	ec41 0b1a 	vmov	d10, r0, r1
 8009108:	462b      	mov	r3, r5
 800910a:	4630      	mov	r0, r6
 800910c:	4639      	mov	r1, r7
 800910e:	f7f7 f87f 	bl	8000210 <__aeabi_dsub>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	ec51 0b1a 	vmov	r0, r1, d10
 800911a:	f7f7 fcc1 	bl	8000aa0 <__aeabi_dcmpgt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f47f adf8 	bne.w	8008d14 <__ieee754_pow+0x384>
 8009124:	4aa4      	ldr	r2, [pc, #656]	; (80093b8 <__ieee754_pow+0xa28>)
 8009126:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800912a:	4293      	cmp	r3, r2
 800912c:	f340 810b 	ble.w	8009346 <__ieee754_pow+0x9b6>
 8009130:	151b      	asrs	r3, r3, #20
 8009132:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009136:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800913a:	fa4a f303 	asr.w	r3, sl, r3
 800913e:	445b      	add	r3, fp
 8009140:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009144:	4e9d      	ldr	r6, [pc, #628]	; (80093bc <__ieee754_pow+0xa2c>)
 8009146:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800914a:	4116      	asrs	r6, r2
 800914c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009150:	2000      	movs	r0, #0
 8009152:	ea23 0106 	bic.w	r1, r3, r6
 8009156:	f1c2 0214 	rsb	r2, r2, #20
 800915a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800915e:	fa4a fa02 	asr.w	sl, sl, r2
 8009162:	f1bb 0f00 	cmp.w	fp, #0
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4620      	mov	r0, r4
 800916c:	4629      	mov	r1, r5
 800916e:	bfb8      	it	lt
 8009170:	f1ca 0a00 	rsblt	sl, sl, #0
 8009174:	f7f7 f84c 	bl	8000210 <__aeabi_dsub>
 8009178:	ec41 0b19 	vmov	d9, r0, r1
 800917c:	4642      	mov	r2, r8
 800917e:	464b      	mov	r3, r9
 8009180:	ec51 0b19 	vmov	r0, r1, d9
 8009184:	f7f7 f846 	bl	8000214 <__adddf3>
 8009188:	2400      	movs	r4, #0
 800918a:	a379      	add	r3, pc, #484	; (adr r3, 8009370 <__ieee754_pow+0x9e0>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	4620      	mov	r0, r4
 8009192:	460d      	mov	r5, r1
 8009194:	f7f7 f9f4 	bl	8000580 <__aeabi_dmul>
 8009198:	ec53 2b19 	vmov	r2, r3, d9
 800919c:	4606      	mov	r6, r0
 800919e:	460f      	mov	r7, r1
 80091a0:	4620      	mov	r0, r4
 80091a2:	4629      	mov	r1, r5
 80091a4:	f7f7 f834 	bl	8000210 <__aeabi_dsub>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4640      	mov	r0, r8
 80091ae:	4649      	mov	r1, r9
 80091b0:	f7f7 f82e 	bl	8000210 <__aeabi_dsub>
 80091b4:	a370      	add	r3, pc, #448	; (adr r3, 8009378 <__ieee754_pow+0x9e8>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f9e1 	bl	8000580 <__aeabi_dmul>
 80091be:	a370      	add	r3, pc, #448	; (adr r3, 8009380 <__ieee754_pow+0x9f0>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	4620      	mov	r0, r4
 80091ca:	4629      	mov	r1, r5
 80091cc:	f7f7 f9d8 	bl	8000580 <__aeabi_dmul>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4640      	mov	r0, r8
 80091d6:	4649      	mov	r1, r9
 80091d8:	f7f7 f81c 	bl	8000214 <__adddf3>
 80091dc:	4604      	mov	r4, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 f814 	bl	8000214 <__adddf3>
 80091ec:	4632      	mov	r2, r6
 80091ee:	463b      	mov	r3, r7
 80091f0:	4680      	mov	r8, r0
 80091f2:	4689      	mov	r9, r1
 80091f4:	f7f7 f80c 	bl	8000210 <__aeabi_dsub>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 f806 	bl	8000210 <__aeabi_dsub>
 8009204:	4642      	mov	r2, r8
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	464b      	mov	r3, r9
 800920c:	4640      	mov	r0, r8
 800920e:	4649      	mov	r1, r9
 8009210:	f7f7 f9b6 	bl	8000580 <__aeabi_dmul>
 8009214:	a35c      	add	r3, pc, #368	; (adr r3, 8009388 <__ieee754_pow+0x9f8>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	4604      	mov	r4, r0
 800921c:	460d      	mov	r5, r1
 800921e:	f7f7 f9af 	bl	8000580 <__aeabi_dmul>
 8009222:	a35b      	add	r3, pc, #364	; (adr r3, 8009390 <__ieee754_pow+0xa00>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f6 fff2 	bl	8000210 <__aeabi_dsub>
 800922c:	4622      	mov	r2, r4
 800922e:	462b      	mov	r3, r5
 8009230:	f7f7 f9a6 	bl	8000580 <__aeabi_dmul>
 8009234:	a358      	add	r3, pc, #352	; (adr r3, 8009398 <__ieee754_pow+0xa08>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f6 ffeb 	bl	8000214 <__adddf3>
 800923e:	4622      	mov	r2, r4
 8009240:	462b      	mov	r3, r5
 8009242:	f7f7 f99d 	bl	8000580 <__aeabi_dmul>
 8009246:	a356      	add	r3, pc, #344	; (adr r3, 80093a0 <__ieee754_pow+0xa10>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	f7f6 ffe0 	bl	8000210 <__aeabi_dsub>
 8009250:	4622      	mov	r2, r4
 8009252:	462b      	mov	r3, r5
 8009254:	f7f7 f994 	bl	8000580 <__aeabi_dmul>
 8009258:	a353      	add	r3, pc, #332	; (adr r3, 80093a8 <__ieee754_pow+0xa18>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f6 ffd9 	bl	8000214 <__adddf3>
 8009262:	4622      	mov	r2, r4
 8009264:	462b      	mov	r3, r5
 8009266:	f7f7 f98b 	bl	8000580 <__aeabi_dmul>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f6 ffcd 	bl	8000210 <__aeabi_dsub>
 8009276:	4604      	mov	r4, r0
 8009278:	460d      	mov	r5, r1
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4640      	mov	r0, r8
 8009280:	4649      	mov	r1, r9
 8009282:	f7f7 f97d 	bl	8000580 <__aeabi_dmul>
 8009286:	2200      	movs	r2, #0
 8009288:	ec41 0b19 	vmov	d9, r0, r1
 800928c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f6 ffbc 	bl	8000210 <__aeabi_dsub>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	ec51 0b19 	vmov	r0, r1, d9
 80092a0:	f7f7 fa98 	bl	80007d4 <__aeabi_ddiv>
 80092a4:	4632      	mov	r2, r6
 80092a6:	4604      	mov	r4, r0
 80092a8:	460d      	mov	r5, r1
 80092aa:	463b      	mov	r3, r7
 80092ac:	4640      	mov	r0, r8
 80092ae:	4649      	mov	r1, r9
 80092b0:	f7f7 f966 	bl	8000580 <__aeabi_dmul>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	f7f6 ffac 	bl	8000214 <__adddf3>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4620      	mov	r0, r4
 80092c2:	4629      	mov	r1, r5
 80092c4:	f7f6 ffa4 	bl	8000210 <__aeabi_dsub>
 80092c8:	4642      	mov	r2, r8
 80092ca:	464b      	mov	r3, r9
 80092cc:	f7f6 ffa0 	bl	8000210 <__aeabi_dsub>
 80092d0:	460b      	mov	r3, r1
 80092d2:	4602      	mov	r2, r0
 80092d4:	493a      	ldr	r1, [pc, #232]	; (80093c0 <__ieee754_pow+0xa30>)
 80092d6:	2000      	movs	r0, #0
 80092d8:	f7f6 ff9a 	bl	8000210 <__aeabi_dsub>
 80092dc:	e9cd 0100 	strd	r0, r1, [sp]
 80092e0:	9b01      	ldr	r3, [sp, #4]
 80092e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80092e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ea:	da2f      	bge.n	800934c <__ieee754_pow+0x9bc>
 80092ec:	4650      	mov	r0, sl
 80092ee:	ed9d 0b00 	vldr	d0, [sp]
 80092f2:	f001 fac1 	bl	800a878 <scalbn>
 80092f6:	ec51 0b10 	vmov	r0, r1, d0
 80092fa:	ec53 2b18 	vmov	r2, r3, d8
 80092fe:	f7ff bbe0 	b.w	8008ac2 <__ieee754_pow+0x132>
 8009302:	4b30      	ldr	r3, [pc, #192]	; (80093c4 <__ieee754_pow+0xa34>)
 8009304:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009308:	429e      	cmp	r6, r3
 800930a:	f77f af0b 	ble.w	8009124 <__ieee754_pow+0x794>
 800930e:	4b2e      	ldr	r3, [pc, #184]	; (80093c8 <__ieee754_pow+0xa38>)
 8009310:	440b      	add	r3, r1
 8009312:	4303      	orrs	r3, r0
 8009314:	d00b      	beq.n	800932e <__ieee754_pow+0x99e>
 8009316:	a326      	add	r3, pc, #152	; (adr r3, 80093b0 <__ieee754_pow+0xa20>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	ec51 0b18 	vmov	r0, r1, d8
 8009320:	f7f7 f92e 	bl	8000580 <__aeabi_dmul>
 8009324:	a322      	add	r3, pc, #136	; (adr r3, 80093b0 <__ieee754_pow+0xa20>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7ff bbca 	b.w	8008ac2 <__ieee754_pow+0x132>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f6 ff6d 	bl	8000210 <__aeabi_dsub>
 8009336:	4642      	mov	r2, r8
 8009338:	464b      	mov	r3, r9
 800933a:	f7f7 fba7 	bl	8000a8c <__aeabi_dcmpge>
 800933e:	2800      	cmp	r0, #0
 8009340:	f43f aef0 	beq.w	8009124 <__ieee754_pow+0x794>
 8009344:	e7e7      	b.n	8009316 <__ieee754_pow+0x986>
 8009346:	f04f 0a00 	mov.w	sl, #0
 800934a:	e717      	b.n	800917c <__ieee754_pow+0x7ec>
 800934c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009350:	4619      	mov	r1, r3
 8009352:	e7d2      	b.n	80092fa <__ieee754_pow+0x96a>
 8009354:	491a      	ldr	r1, [pc, #104]	; (80093c0 <__ieee754_pow+0xa30>)
 8009356:	2000      	movs	r0, #0
 8009358:	f7ff bb9e 	b.w	8008a98 <__ieee754_pow+0x108>
 800935c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009360:	f7ff bb9a 	b.w	8008a98 <__ieee754_pow+0x108>
 8009364:	9000      	str	r0, [sp, #0]
 8009366:	f7ff bb76 	b.w	8008a56 <__ieee754_pow+0xc6>
 800936a:	2100      	movs	r1, #0
 800936c:	f7ff bb60 	b.w	8008a30 <__ieee754_pow+0xa0>
 8009370:	00000000 	.word	0x00000000
 8009374:	3fe62e43 	.word	0x3fe62e43
 8009378:	fefa39ef 	.word	0xfefa39ef
 800937c:	3fe62e42 	.word	0x3fe62e42
 8009380:	0ca86c39 	.word	0x0ca86c39
 8009384:	be205c61 	.word	0xbe205c61
 8009388:	72bea4d0 	.word	0x72bea4d0
 800938c:	3e663769 	.word	0x3e663769
 8009390:	c5d26bf1 	.word	0xc5d26bf1
 8009394:	3ebbbd41 	.word	0x3ebbbd41
 8009398:	af25de2c 	.word	0xaf25de2c
 800939c:	3f11566a 	.word	0x3f11566a
 80093a0:	16bebd93 	.word	0x16bebd93
 80093a4:	3f66c16c 	.word	0x3f66c16c
 80093a8:	5555553e 	.word	0x5555553e
 80093ac:	3fc55555 	.word	0x3fc55555
 80093b0:	c2f8f359 	.word	0xc2f8f359
 80093b4:	01a56e1f 	.word	0x01a56e1f
 80093b8:	3fe00000 	.word	0x3fe00000
 80093bc:	000fffff 	.word	0x000fffff
 80093c0:	3ff00000 	.word	0x3ff00000
 80093c4:	4090cbff 	.word	0x4090cbff
 80093c8:	3f6f3400 	.word	0x3f6f3400
 80093cc:	652b82fe 	.word	0x652b82fe
 80093d0:	3c971547 	.word	0x3c971547
 80093d4:	00000000 	.word	0x00000000

080093d8 <__ieee754_rem_pio2>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	ed2d 8b02 	vpush	{d8}
 80093e0:	ec55 4b10 	vmov	r4, r5, d0
 80093e4:	4bca      	ldr	r3, [pc, #808]	; (8009710 <__ieee754_rem_pio2+0x338>)
 80093e6:	b08b      	sub	sp, #44	; 0x2c
 80093e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80093ec:	4598      	cmp	r8, r3
 80093ee:	4682      	mov	sl, r0
 80093f0:	9502      	str	r5, [sp, #8]
 80093f2:	dc08      	bgt.n	8009406 <__ieee754_rem_pio2+0x2e>
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	ed80 0b00 	vstr	d0, [r0]
 80093fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009400:	f04f 0b00 	mov.w	fp, #0
 8009404:	e028      	b.n	8009458 <__ieee754_rem_pio2+0x80>
 8009406:	4bc3      	ldr	r3, [pc, #780]	; (8009714 <__ieee754_rem_pio2+0x33c>)
 8009408:	4598      	cmp	r8, r3
 800940a:	dc78      	bgt.n	80094fe <__ieee754_rem_pio2+0x126>
 800940c:	9b02      	ldr	r3, [sp, #8]
 800940e:	4ec2      	ldr	r6, [pc, #776]	; (8009718 <__ieee754_rem_pio2+0x340>)
 8009410:	2b00      	cmp	r3, #0
 8009412:	ee10 0a10 	vmov	r0, s0
 8009416:	a3b0      	add	r3, pc, #704	; (adr r3, 80096d8 <__ieee754_rem_pio2+0x300>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	4629      	mov	r1, r5
 800941e:	dd39      	ble.n	8009494 <__ieee754_rem_pio2+0xbc>
 8009420:	f7f6 fef6 	bl	8000210 <__aeabi_dsub>
 8009424:	45b0      	cmp	r8, r6
 8009426:	4604      	mov	r4, r0
 8009428:	460d      	mov	r5, r1
 800942a:	d01b      	beq.n	8009464 <__ieee754_rem_pio2+0x8c>
 800942c:	a3ac      	add	r3, pc, #688	; (adr r3, 80096e0 <__ieee754_rem_pio2+0x308>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 feed 	bl	8000210 <__aeabi_dsub>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	e9ca 2300 	strd	r2, r3, [sl]
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f6 fee5 	bl	8000210 <__aeabi_dsub>
 8009446:	a3a6      	add	r3, pc, #664	; (adr r3, 80096e0 <__ieee754_rem_pio2+0x308>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 fee0 	bl	8000210 <__aeabi_dsub>
 8009450:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009454:	f04f 0b01 	mov.w	fp, #1
 8009458:	4658      	mov	r0, fp
 800945a:	b00b      	add	sp, #44	; 0x2c
 800945c:	ecbd 8b02 	vpop	{d8}
 8009460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009464:	a3a0      	add	r3, pc, #640	; (adr r3, 80096e8 <__ieee754_rem_pio2+0x310>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f6 fed1 	bl	8000210 <__aeabi_dsub>
 800946e:	a3a0      	add	r3, pc, #640	; (adr r3, 80096f0 <__ieee754_rem_pio2+0x318>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	4604      	mov	r4, r0
 8009476:	460d      	mov	r5, r1
 8009478:	f7f6 feca 	bl	8000210 <__aeabi_dsub>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	e9ca 2300 	strd	r2, r3, [sl]
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f7f6 fec2 	bl	8000210 <__aeabi_dsub>
 800948c:	a398      	add	r3, pc, #608	; (adr r3, 80096f0 <__ieee754_rem_pio2+0x318>)
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	e7db      	b.n	800944c <__ieee754_rem_pio2+0x74>
 8009494:	f7f6 febe 	bl	8000214 <__adddf3>
 8009498:	45b0      	cmp	r8, r6
 800949a:	4604      	mov	r4, r0
 800949c:	460d      	mov	r5, r1
 800949e:	d016      	beq.n	80094ce <__ieee754_rem_pio2+0xf6>
 80094a0:	a38f      	add	r3, pc, #572	; (adr r3, 80096e0 <__ieee754_rem_pio2+0x308>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7f6 feb5 	bl	8000214 <__adddf3>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	e9ca 2300 	strd	r2, r3, [sl]
 80094b2:	4620      	mov	r0, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	f7f6 feab 	bl	8000210 <__aeabi_dsub>
 80094ba:	a389      	add	r3, pc, #548	; (adr r3, 80096e0 <__ieee754_rem_pio2+0x308>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f6 fea8 	bl	8000214 <__adddf3>
 80094c4:	f04f 3bff 	mov.w	fp, #4294967295
 80094c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80094cc:	e7c4      	b.n	8009458 <__ieee754_rem_pio2+0x80>
 80094ce:	a386      	add	r3, pc, #536	; (adr r3, 80096e8 <__ieee754_rem_pio2+0x310>)
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f6 fe9e 	bl	8000214 <__adddf3>
 80094d8:	a385      	add	r3, pc, #532	; (adr r3, 80096f0 <__ieee754_rem_pio2+0x318>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	f7f6 fe97 	bl	8000214 <__adddf3>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	e9ca 2300 	strd	r2, r3, [sl]
 80094ee:	4620      	mov	r0, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	f7f6 fe8d 	bl	8000210 <__aeabi_dsub>
 80094f6:	a37e      	add	r3, pc, #504	; (adr r3, 80096f0 <__ieee754_rem_pio2+0x318>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	e7e0      	b.n	80094c0 <__ieee754_rem_pio2+0xe8>
 80094fe:	4b87      	ldr	r3, [pc, #540]	; (800971c <__ieee754_rem_pio2+0x344>)
 8009500:	4598      	cmp	r8, r3
 8009502:	f300 80d9 	bgt.w	80096b8 <__ieee754_rem_pio2+0x2e0>
 8009506:	f001 f88f 	bl	800a628 <fabs>
 800950a:	ec55 4b10 	vmov	r4, r5, d0
 800950e:	ee10 0a10 	vmov	r0, s0
 8009512:	a379      	add	r3, pc, #484	; (adr r3, 80096f8 <__ieee754_rem_pio2+0x320>)
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	4629      	mov	r1, r5
 800951a:	f7f7 f831 	bl	8000580 <__aeabi_dmul>
 800951e:	4b80      	ldr	r3, [pc, #512]	; (8009720 <__ieee754_rem_pio2+0x348>)
 8009520:	2200      	movs	r2, #0
 8009522:	f7f6 fe77 	bl	8000214 <__adddf3>
 8009526:	f7f7 fadb 	bl	8000ae0 <__aeabi_d2iz>
 800952a:	4683      	mov	fp, r0
 800952c:	f7f6 ffbe 	bl	80004ac <__aeabi_i2d>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	ec43 2b18 	vmov	d8, r2, r3
 8009538:	a367      	add	r3, pc, #412	; (adr r3, 80096d8 <__ieee754_rem_pio2+0x300>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f81f 	bl	8000580 <__aeabi_dmul>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f6 fe61 	bl	8000210 <__aeabi_dsub>
 800954e:	a364      	add	r3, pc, #400	; (adr r3, 80096e0 <__ieee754_rem_pio2+0x308>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	ec51 0b18 	vmov	r0, r1, d8
 800955c:	f7f7 f810 	bl	8000580 <__aeabi_dmul>
 8009560:	f1bb 0f1f 	cmp.w	fp, #31
 8009564:	4604      	mov	r4, r0
 8009566:	460d      	mov	r5, r1
 8009568:	dc0d      	bgt.n	8009586 <__ieee754_rem_pio2+0x1ae>
 800956a:	4b6e      	ldr	r3, [pc, #440]	; (8009724 <__ieee754_rem_pio2+0x34c>)
 800956c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009574:	4543      	cmp	r3, r8
 8009576:	d006      	beq.n	8009586 <__ieee754_rem_pio2+0x1ae>
 8009578:	4622      	mov	r2, r4
 800957a:	462b      	mov	r3, r5
 800957c:	4630      	mov	r0, r6
 800957e:	4639      	mov	r1, r7
 8009580:	f7f6 fe46 	bl	8000210 <__aeabi_dsub>
 8009584:	e00f      	b.n	80095a6 <__ieee754_rem_pio2+0x1ce>
 8009586:	462b      	mov	r3, r5
 8009588:	4622      	mov	r2, r4
 800958a:	4630      	mov	r0, r6
 800958c:	4639      	mov	r1, r7
 800958e:	f7f6 fe3f 	bl	8000210 <__aeabi_dsub>
 8009592:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800959c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80095a0:	f1b8 0f10 	cmp.w	r8, #16
 80095a4:	dc02      	bgt.n	80095ac <__ieee754_rem_pio2+0x1d4>
 80095a6:	e9ca 0100 	strd	r0, r1, [sl]
 80095aa:	e039      	b.n	8009620 <__ieee754_rem_pio2+0x248>
 80095ac:	a34e      	add	r3, pc, #312	; (adr r3, 80096e8 <__ieee754_rem_pio2+0x310>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	ec51 0b18 	vmov	r0, r1, d8
 80095b6:	f7f6 ffe3 	bl	8000580 <__aeabi_dmul>
 80095ba:	4604      	mov	r4, r0
 80095bc:	460d      	mov	r5, r1
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4630      	mov	r0, r6
 80095c4:	4639      	mov	r1, r7
 80095c6:	f7f6 fe23 	bl	8000210 <__aeabi_dsub>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4680      	mov	r8, r0
 80095d0:	4689      	mov	r9, r1
 80095d2:	4630      	mov	r0, r6
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f6 fe1b 	bl	8000210 <__aeabi_dsub>
 80095da:	4622      	mov	r2, r4
 80095dc:	462b      	mov	r3, r5
 80095de:	f7f6 fe17 	bl	8000210 <__aeabi_dsub>
 80095e2:	a343      	add	r3, pc, #268	; (adr r3, 80096f0 <__ieee754_rem_pio2+0x318>)
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	4604      	mov	r4, r0
 80095ea:	460d      	mov	r5, r1
 80095ec:	ec51 0b18 	vmov	r0, r1, d8
 80095f0:	f7f6 ffc6 	bl	8000580 <__aeabi_dmul>
 80095f4:	4622      	mov	r2, r4
 80095f6:	462b      	mov	r3, r5
 80095f8:	f7f6 fe0a 	bl	8000210 <__aeabi_dsub>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4604      	mov	r4, r0
 8009602:	460d      	mov	r5, r1
 8009604:	4640      	mov	r0, r8
 8009606:	4649      	mov	r1, r9
 8009608:	f7f6 fe02 	bl	8000210 <__aeabi_dsub>
 800960c:	9a03      	ldr	r2, [sp, #12]
 800960e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	2b31      	cmp	r3, #49	; 0x31
 8009616:	dc24      	bgt.n	8009662 <__ieee754_rem_pio2+0x28a>
 8009618:	e9ca 0100 	strd	r0, r1, [sl]
 800961c:	4646      	mov	r6, r8
 800961e:	464f      	mov	r7, r9
 8009620:	e9da 8900 	ldrd	r8, r9, [sl]
 8009624:	4630      	mov	r0, r6
 8009626:	4642      	mov	r2, r8
 8009628:	464b      	mov	r3, r9
 800962a:	4639      	mov	r1, r7
 800962c:	f7f6 fdf0 	bl	8000210 <__aeabi_dsub>
 8009630:	462b      	mov	r3, r5
 8009632:	4622      	mov	r2, r4
 8009634:	f7f6 fdec 	bl	8000210 <__aeabi_dsub>
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009640:	f6bf af0a 	bge.w	8009458 <__ieee754_rem_pio2+0x80>
 8009644:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009648:	f8ca 3004 	str.w	r3, [sl, #4]
 800964c:	f8ca 8000 	str.w	r8, [sl]
 8009650:	f8ca 0008 	str.w	r0, [sl, #8]
 8009654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009658:	f8ca 300c 	str.w	r3, [sl, #12]
 800965c:	f1cb 0b00 	rsb	fp, fp, #0
 8009660:	e6fa      	b.n	8009458 <__ieee754_rem_pio2+0x80>
 8009662:	a327      	add	r3, pc, #156	; (adr r3, 8009700 <__ieee754_rem_pio2+0x328>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	ec51 0b18 	vmov	r0, r1, d8
 800966c:	f7f6 ff88 	bl	8000580 <__aeabi_dmul>
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f6 fdc8 	bl	8000210 <__aeabi_dsub>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4606      	mov	r6, r0
 8009686:	460f      	mov	r7, r1
 8009688:	4640      	mov	r0, r8
 800968a:	4649      	mov	r1, r9
 800968c:	f7f6 fdc0 	bl	8000210 <__aeabi_dsub>
 8009690:	4622      	mov	r2, r4
 8009692:	462b      	mov	r3, r5
 8009694:	f7f6 fdbc 	bl	8000210 <__aeabi_dsub>
 8009698:	a31b      	add	r3, pc, #108	; (adr r3, 8009708 <__ieee754_rem_pio2+0x330>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	4604      	mov	r4, r0
 80096a0:	460d      	mov	r5, r1
 80096a2:	ec51 0b18 	vmov	r0, r1, d8
 80096a6:	f7f6 ff6b 	bl	8000580 <__aeabi_dmul>
 80096aa:	4622      	mov	r2, r4
 80096ac:	462b      	mov	r3, r5
 80096ae:	f7f6 fdaf 	bl	8000210 <__aeabi_dsub>
 80096b2:	4604      	mov	r4, r0
 80096b4:	460d      	mov	r5, r1
 80096b6:	e75f      	b.n	8009578 <__ieee754_rem_pio2+0x1a0>
 80096b8:	4b1b      	ldr	r3, [pc, #108]	; (8009728 <__ieee754_rem_pio2+0x350>)
 80096ba:	4598      	cmp	r8, r3
 80096bc:	dd36      	ble.n	800972c <__ieee754_rem_pio2+0x354>
 80096be:	ee10 2a10 	vmov	r2, s0
 80096c2:	462b      	mov	r3, r5
 80096c4:	4620      	mov	r0, r4
 80096c6:	4629      	mov	r1, r5
 80096c8:	f7f6 fda2 	bl	8000210 <__aeabi_dsub>
 80096cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80096d0:	e9ca 0100 	strd	r0, r1, [sl]
 80096d4:	e694      	b.n	8009400 <__ieee754_rem_pio2+0x28>
 80096d6:	bf00      	nop
 80096d8:	54400000 	.word	0x54400000
 80096dc:	3ff921fb 	.word	0x3ff921fb
 80096e0:	1a626331 	.word	0x1a626331
 80096e4:	3dd0b461 	.word	0x3dd0b461
 80096e8:	1a600000 	.word	0x1a600000
 80096ec:	3dd0b461 	.word	0x3dd0b461
 80096f0:	2e037073 	.word	0x2e037073
 80096f4:	3ba3198a 	.word	0x3ba3198a
 80096f8:	6dc9c883 	.word	0x6dc9c883
 80096fc:	3fe45f30 	.word	0x3fe45f30
 8009700:	2e000000 	.word	0x2e000000
 8009704:	3ba3198a 	.word	0x3ba3198a
 8009708:	252049c1 	.word	0x252049c1
 800970c:	397b839a 	.word	0x397b839a
 8009710:	3fe921fb 	.word	0x3fe921fb
 8009714:	4002d97b 	.word	0x4002d97b
 8009718:	3ff921fb 	.word	0x3ff921fb
 800971c:	413921fb 	.word	0x413921fb
 8009720:	3fe00000 	.word	0x3fe00000
 8009724:	0800aa20 	.word	0x0800aa20
 8009728:	7fefffff 	.word	0x7fefffff
 800972c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009730:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009734:	ee10 0a10 	vmov	r0, s0
 8009738:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800973c:	ee10 6a10 	vmov	r6, s0
 8009740:	460f      	mov	r7, r1
 8009742:	f7f7 f9cd 	bl	8000ae0 <__aeabi_d2iz>
 8009746:	f7f6 feb1 	bl	80004ac <__aeabi_i2d>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009756:	f7f6 fd5b 	bl	8000210 <__aeabi_dsub>
 800975a:	4b22      	ldr	r3, [pc, #136]	; (80097e4 <__ieee754_rem_pio2+0x40c>)
 800975c:	2200      	movs	r2, #0
 800975e:	f7f6 ff0f 	bl	8000580 <__aeabi_dmul>
 8009762:	460f      	mov	r7, r1
 8009764:	4606      	mov	r6, r0
 8009766:	f7f7 f9bb 	bl	8000ae0 <__aeabi_d2iz>
 800976a:	f7f6 fe9f 	bl	80004ac <__aeabi_i2d>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4630      	mov	r0, r6
 8009774:	4639      	mov	r1, r7
 8009776:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800977a:	f7f6 fd49 	bl	8000210 <__aeabi_dsub>
 800977e:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <__ieee754_rem_pio2+0x40c>)
 8009780:	2200      	movs	r2, #0
 8009782:	f7f6 fefd 	bl	8000580 <__aeabi_dmul>
 8009786:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800978a:	ad04      	add	r5, sp, #16
 800978c:	f04f 0803 	mov.w	r8, #3
 8009790:	46a9      	mov	r9, r5
 8009792:	2600      	movs	r6, #0
 8009794:	2700      	movs	r7, #0
 8009796:	4632      	mov	r2, r6
 8009798:	463b      	mov	r3, r7
 800979a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800979e:	46c3      	mov	fp, r8
 80097a0:	3d08      	subs	r5, #8
 80097a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80097a6:	f7f7 f953 	bl	8000a50 <__aeabi_dcmpeq>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d1f3      	bne.n	8009796 <__ieee754_rem_pio2+0x3be>
 80097ae:	4b0e      	ldr	r3, [pc, #56]	; (80097e8 <__ieee754_rem_pio2+0x410>)
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	2302      	movs	r3, #2
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	4622      	mov	r2, r4
 80097b8:	465b      	mov	r3, fp
 80097ba:	4651      	mov	r1, sl
 80097bc:	4648      	mov	r0, r9
 80097be:	f000 f993 	bl	8009ae8 <__kernel_rem_pio2>
 80097c2:	9b02      	ldr	r3, [sp, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	4683      	mov	fp, r0
 80097c8:	f6bf ae46 	bge.w	8009458 <__ieee754_rem_pio2+0x80>
 80097cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80097d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80097d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80097d8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80097dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80097e0:	e73a      	b.n	8009658 <__ieee754_rem_pio2+0x280>
 80097e2:	bf00      	nop
 80097e4:	41700000 	.word	0x41700000
 80097e8:	0800aaa0 	.word	0x0800aaa0

080097ec <__ieee754_sqrt>:
 80097ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f0:	ec55 4b10 	vmov	r4, r5, d0
 80097f4:	4e56      	ldr	r6, [pc, #344]	; (8009950 <__ieee754_sqrt+0x164>)
 80097f6:	43ae      	bics	r6, r5
 80097f8:	ee10 0a10 	vmov	r0, s0
 80097fc:	ee10 3a10 	vmov	r3, s0
 8009800:	4629      	mov	r1, r5
 8009802:	462a      	mov	r2, r5
 8009804:	d110      	bne.n	8009828 <__ieee754_sqrt+0x3c>
 8009806:	ee10 2a10 	vmov	r2, s0
 800980a:	462b      	mov	r3, r5
 800980c:	f7f6 feb8 	bl	8000580 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f6 fcfc 	bl	8000214 <__adddf3>
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	ec45 4b10 	vmov	d0, r4, r5
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	2d00      	cmp	r5, #0
 800982a:	dc10      	bgt.n	800984e <__ieee754_sqrt+0x62>
 800982c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009830:	4330      	orrs	r0, r6
 8009832:	d0f5      	beq.n	8009820 <__ieee754_sqrt+0x34>
 8009834:	b15d      	cbz	r5, 800984e <__ieee754_sqrt+0x62>
 8009836:	ee10 2a10 	vmov	r2, s0
 800983a:	462b      	mov	r3, r5
 800983c:	ee10 0a10 	vmov	r0, s0
 8009840:	f7f6 fce6 	bl	8000210 <__aeabi_dsub>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	f7f6 ffc4 	bl	80007d4 <__aeabi_ddiv>
 800984c:	e7e6      	b.n	800981c <__ieee754_sqrt+0x30>
 800984e:	1509      	asrs	r1, r1, #20
 8009850:	d076      	beq.n	8009940 <__ieee754_sqrt+0x154>
 8009852:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009856:	07ce      	lsls	r6, r1, #31
 8009858:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800985c:	bf5e      	ittt	pl
 800985e:	0fda      	lsrpl	r2, r3, #31
 8009860:	005b      	lslpl	r3, r3, #1
 8009862:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009866:	0fda      	lsrs	r2, r3, #31
 8009868:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800986c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009870:	2000      	movs	r0, #0
 8009872:	106d      	asrs	r5, r5, #1
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	f04f 0e16 	mov.w	lr, #22
 800987a:	4684      	mov	ip, r0
 800987c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009880:	eb0c 0401 	add.w	r4, ip, r1
 8009884:	4294      	cmp	r4, r2
 8009886:	bfde      	ittt	le
 8009888:	1b12      	suble	r2, r2, r4
 800988a:	eb04 0c01 	addle.w	ip, r4, r1
 800988e:	1840      	addle	r0, r0, r1
 8009890:	0052      	lsls	r2, r2, #1
 8009892:	f1be 0e01 	subs.w	lr, lr, #1
 8009896:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800989a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800989e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098a2:	d1ed      	bne.n	8009880 <__ieee754_sqrt+0x94>
 80098a4:	4671      	mov	r1, lr
 80098a6:	2720      	movs	r7, #32
 80098a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80098ac:	4562      	cmp	r2, ip
 80098ae:	eb04 060e 	add.w	r6, r4, lr
 80098b2:	dc02      	bgt.n	80098ba <__ieee754_sqrt+0xce>
 80098b4:	d113      	bne.n	80098de <__ieee754_sqrt+0xf2>
 80098b6:	429e      	cmp	r6, r3
 80098b8:	d811      	bhi.n	80098de <__ieee754_sqrt+0xf2>
 80098ba:	2e00      	cmp	r6, #0
 80098bc:	eb06 0e04 	add.w	lr, r6, r4
 80098c0:	da43      	bge.n	800994a <__ieee754_sqrt+0x15e>
 80098c2:	f1be 0f00 	cmp.w	lr, #0
 80098c6:	db40      	blt.n	800994a <__ieee754_sqrt+0x15e>
 80098c8:	f10c 0801 	add.w	r8, ip, #1
 80098cc:	eba2 020c 	sub.w	r2, r2, ip
 80098d0:	429e      	cmp	r6, r3
 80098d2:	bf88      	it	hi
 80098d4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80098d8:	1b9b      	subs	r3, r3, r6
 80098da:	4421      	add	r1, r4
 80098dc:	46c4      	mov	ip, r8
 80098de:	0052      	lsls	r2, r2, #1
 80098e0:	3f01      	subs	r7, #1
 80098e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80098e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80098ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098ee:	d1dd      	bne.n	80098ac <__ieee754_sqrt+0xc0>
 80098f0:	4313      	orrs	r3, r2
 80098f2:	d006      	beq.n	8009902 <__ieee754_sqrt+0x116>
 80098f4:	1c4c      	adds	r4, r1, #1
 80098f6:	bf13      	iteet	ne
 80098f8:	3101      	addne	r1, #1
 80098fa:	3001      	addeq	r0, #1
 80098fc:	4639      	moveq	r1, r7
 80098fe:	f021 0101 	bicne.w	r1, r1, #1
 8009902:	1043      	asrs	r3, r0, #1
 8009904:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009908:	0849      	lsrs	r1, r1, #1
 800990a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800990e:	07c2      	lsls	r2, r0, #31
 8009910:	bf48      	it	mi
 8009912:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009916:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800991a:	460c      	mov	r4, r1
 800991c:	463d      	mov	r5, r7
 800991e:	e77f      	b.n	8009820 <__ieee754_sqrt+0x34>
 8009920:	0ada      	lsrs	r2, r3, #11
 8009922:	3815      	subs	r0, #21
 8009924:	055b      	lsls	r3, r3, #21
 8009926:	2a00      	cmp	r2, #0
 8009928:	d0fa      	beq.n	8009920 <__ieee754_sqrt+0x134>
 800992a:	02d7      	lsls	r7, r2, #11
 800992c:	d50a      	bpl.n	8009944 <__ieee754_sqrt+0x158>
 800992e:	f1c1 0420 	rsb	r4, r1, #32
 8009932:	fa23 f404 	lsr.w	r4, r3, r4
 8009936:	1e4d      	subs	r5, r1, #1
 8009938:	408b      	lsls	r3, r1
 800993a:	4322      	orrs	r2, r4
 800993c:	1b41      	subs	r1, r0, r5
 800993e:	e788      	b.n	8009852 <__ieee754_sqrt+0x66>
 8009940:	4608      	mov	r0, r1
 8009942:	e7f0      	b.n	8009926 <__ieee754_sqrt+0x13a>
 8009944:	0052      	lsls	r2, r2, #1
 8009946:	3101      	adds	r1, #1
 8009948:	e7ef      	b.n	800992a <__ieee754_sqrt+0x13e>
 800994a:	46e0      	mov	r8, ip
 800994c:	e7be      	b.n	80098cc <__ieee754_sqrt+0xe0>
 800994e:	bf00      	nop
 8009950:	7ff00000 	.word	0x7ff00000
 8009954:	00000000 	.word	0x00000000

08009958 <__kernel_cos>:
 8009958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	ec57 6b10 	vmov	r6, r7, d0
 8009960:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009964:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009968:	ed8d 1b00 	vstr	d1, [sp]
 800996c:	da07      	bge.n	800997e <__kernel_cos+0x26>
 800996e:	ee10 0a10 	vmov	r0, s0
 8009972:	4639      	mov	r1, r7
 8009974:	f7f7 f8b4 	bl	8000ae0 <__aeabi_d2iz>
 8009978:	2800      	cmp	r0, #0
 800997a:	f000 8088 	beq.w	8009a8e <__kernel_cos+0x136>
 800997e:	4632      	mov	r2, r6
 8009980:	463b      	mov	r3, r7
 8009982:	4630      	mov	r0, r6
 8009984:	4639      	mov	r1, r7
 8009986:	f7f6 fdfb 	bl	8000580 <__aeabi_dmul>
 800998a:	4b51      	ldr	r3, [pc, #324]	; (8009ad0 <__kernel_cos+0x178>)
 800998c:	2200      	movs	r2, #0
 800998e:	4604      	mov	r4, r0
 8009990:	460d      	mov	r5, r1
 8009992:	f7f6 fdf5 	bl	8000580 <__aeabi_dmul>
 8009996:	a340      	add	r3, pc, #256	; (adr r3, 8009a98 <__kernel_cos+0x140>)
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	4682      	mov	sl, r0
 800999e:	468b      	mov	fp, r1
 80099a0:	4620      	mov	r0, r4
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7f6 fdec 	bl	8000580 <__aeabi_dmul>
 80099a8:	a33d      	add	r3, pc, #244	; (adr r3, 8009aa0 <__kernel_cos+0x148>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fc31 	bl	8000214 <__adddf3>
 80099b2:	4622      	mov	r2, r4
 80099b4:	462b      	mov	r3, r5
 80099b6:	f7f6 fde3 	bl	8000580 <__aeabi_dmul>
 80099ba:	a33b      	add	r3, pc, #236	; (adr r3, 8009aa8 <__kernel_cos+0x150>)
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f7f6 fc26 	bl	8000210 <__aeabi_dsub>
 80099c4:	4622      	mov	r2, r4
 80099c6:	462b      	mov	r3, r5
 80099c8:	f7f6 fdda 	bl	8000580 <__aeabi_dmul>
 80099cc:	a338      	add	r3, pc, #224	; (adr r3, 8009ab0 <__kernel_cos+0x158>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	f7f6 fc1f 	bl	8000214 <__adddf3>
 80099d6:	4622      	mov	r2, r4
 80099d8:	462b      	mov	r3, r5
 80099da:	f7f6 fdd1 	bl	8000580 <__aeabi_dmul>
 80099de:	a336      	add	r3, pc, #216	; (adr r3, 8009ab8 <__kernel_cos+0x160>)
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	f7f6 fc14 	bl	8000210 <__aeabi_dsub>
 80099e8:	4622      	mov	r2, r4
 80099ea:	462b      	mov	r3, r5
 80099ec:	f7f6 fdc8 	bl	8000580 <__aeabi_dmul>
 80099f0:	a333      	add	r3, pc, #204	; (adr r3, 8009ac0 <__kernel_cos+0x168>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f7f6 fc0d 	bl	8000214 <__adddf3>
 80099fa:	4622      	mov	r2, r4
 80099fc:	462b      	mov	r3, r5
 80099fe:	f7f6 fdbf 	bl	8000580 <__aeabi_dmul>
 8009a02:	4622      	mov	r2, r4
 8009a04:	462b      	mov	r3, r5
 8009a06:	f7f6 fdbb 	bl	8000580 <__aeabi_dmul>
 8009a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a0e:	4604      	mov	r4, r0
 8009a10:	460d      	mov	r5, r1
 8009a12:	4630      	mov	r0, r6
 8009a14:	4639      	mov	r1, r7
 8009a16:	f7f6 fdb3 	bl	8000580 <__aeabi_dmul>
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4620      	mov	r0, r4
 8009a22:	f7f6 fbf5 	bl	8000210 <__aeabi_dsub>
 8009a26:	4b2b      	ldr	r3, [pc, #172]	; (8009ad4 <__kernel_cos+0x17c>)
 8009a28:	4598      	cmp	r8, r3
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	dc10      	bgt.n	8009a52 <__kernel_cos+0xfa>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4650      	mov	r0, sl
 8009a36:	4659      	mov	r1, fp
 8009a38:	f7f6 fbea 	bl	8000210 <__aeabi_dsub>
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4926      	ldr	r1, [pc, #152]	; (8009ad8 <__kernel_cos+0x180>)
 8009a40:	4602      	mov	r2, r0
 8009a42:	2000      	movs	r0, #0
 8009a44:	f7f6 fbe4 	bl	8000210 <__aeabi_dsub>
 8009a48:	ec41 0b10 	vmov	d0, r0, r1
 8009a4c:	b003      	add	sp, #12
 8009a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a52:	4b22      	ldr	r3, [pc, #136]	; (8009adc <__kernel_cos+0x184>)
 8009a54:	4920      	ldr	r1, [pc, #128]	; (8009ad8 <__kernel_cos+0x180>)
 8009a56:	4598      	cmp	r8, r3
 8009a58:	bfcc      	ite	gt
 8009a5a:	4d21      	ldrgt	r5, [pc, #132]	; (8009ae0 <__kernel_cos+0x188>)
 8009a5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009a60:	2400      	movs	r4, #0
 8009a62:	4622      	mov	r2, r4
 8009a64:	462b      	mov	r3, r5
 8009a66:	2000      	movs	r0, #0
 8009a68:	f7f6 fbd2 	bl	8000210 <__aeabi_dsub>
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4680      	mov	r8, r0
 8009a70:	4689      	mov	r9, r1
 8009a72:	462b      	mov	r3, r5
 8009a74:	4650      	mov	r0, sl
 8009a76:	4659      	mov	r1, fp
 8009a78:	f7f6 fbca 	bl	8000210 <__aeabi_dsub>
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	463b      	mov	r3, r7
 8009a80:	f7f6 fbc6 	bl	8000210 <__aeabi_dsub>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	e7da      	b.n	8009a44 <__kernel_cos+0xec>
 8009a8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009ac8 <__kernel_cos+0x170>
 8009a92:	e7db      	b.n	8009a4c <__kernel_cos+0xf4>
 8009a94:	f3af 8000 	nop.w
 8009a98:	be8838d4 	.word	0xbe8838d4
 8009a9c:	bda8fae9 	.word	0xbda8fae9
 8009aa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009aa4:	3e21ee9e 	.word	0x3e21ee9e
 8009aa8:	809c52ad 	.word	0x809c52ad
 8009aac:	3e927e4f 	.word	0x3e927e4f
 8009ab0:	19cb1590 	.word	0x19cb1590
 8009ab4:	3efa01a0 	.word	0x3efa01a0
 8009ab8:	16c15177 	.word	0x16c15177
 8009abc:	3f56c16c 	.word	0x3f56c16c
 8009ac0:	5555554c 	.word	0x5555554c
 8009ac4:	3fa55555 	.word	0x3fa55555
 8009ac8:	00000000 	.word	0x00000000
 8009acc:	3ff00000 	.word	0x3ff00000
 8009ad0:	3fe00000 	.word	0x3fe00000
 8009ad4:	3fd33332 	.word	0x3fd33332
 8009ad8:	3ff00000 	.word	0x3ff00000
 8009adc:	3fe90000 	.word	0x3fe90000
 8009ae0:	3fd20000 	.word	0x3fd20000
 8009ae4:	00000000 	.word	0x00000000

08009ae8 <__kernel_rem_pio2>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	ed2d 8b02 	vpush	{d8}
 8009af0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009af4:	f112 0f14 	cmn.w	r2, #20
 8009af8:	9308      	str	r3, [sp, #32]
 8009afa:	9101      	str	r1, [sp, #4]
 8009afc:	4bc6      	ldr	r3, [pc, #792]	; (8009e18 <__kernel_rem_pio2+0x330>)
 8009afe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009b00:	9009      	str	r0, [sp, #36]	; 0x24
 8009b02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9b08      	ldr	r3, [sp, #32]
 8009b0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b0e:	bfa8      	it	ge
 8009b10:	1ed4      	subge	r4, r2, #3
 8009b12:	9306      	str	r3, [sp, #24]
 8009b14:	bfb2      	itee	lt
 8009b16:	2400      	movlt	r4, #0
 8009b18:	2318      	movge	r3, #24
 8009b1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009b1e:	f06f 0317 	mvn.w	r3, #23
 8009b22:	fb04 3303 	mla	r3, r4, r3, r3
 8009b26:	eb03 0a02 	add.w	sl, r3, r2
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	9a06      	ldr	r2, [sp, #24]
 8009b2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009e08 <__kernel_rem_pio2+0x320>
 8009b32:	eb03 0802 	add.w	r8, r3, r2
 8009b36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009b38:	1aa7      	subs	r7, r4, r2
 8009b3a:	ae20      	add	r6, sp, #128	; 0x80
 8009b3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009b40:	2500      	movs	r5, #0
 8009b42:	4545      	cmp	r5, r8
 8009b44:	dd18      	ble.n	8009b78 <__kernel_rem_pio2+0x90>
 8009b46:	9b08      	ldr	r3, [sp, #32]
 8009b48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009b4c:	aa20      	add	r2, sp, #128	; 0x80
 8009b4e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009e08 <__kernel_rem_pio2+0x320>
 8009b52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009b56:	f1c3 0301 	rsb	r3, r3, #1
 8009b5a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	9b07      	ldr	r3, [sp, #28]
 8009b62:	9a04      	ldr	r2, [sp, #16]
 8009b64:	4443      	add	r3, r8
 8009b66:	429a      	cmp	r2, r3
 8009b68:	db2f      	blt.n	8009bca <__kernel_rem_pio2+0xe2>
 8009b6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009b72:	462f      	mov	r7, r5
 8009b74:	2600      	movs	r6, #0
 8009b76:	e01b      	b.n	8009bb0 <__kernel_rem_pio2+0xc8>
 8009b78:	42ef      	cmn	r7, r5
 8009b7a:	d407      	bmi.n	8009b8c <__kernel_rem_pio2+0xa4>
 8009b7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009b80:	f7f6 fc94 	bl	80004ac <__aeabi_i2d>
 8009b84:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7da      	b.n	8009b42 <__kernel_rem_pio2+0x5a>
 8009b8c:	ec51 0b18 	vmov	r0, r1, d8
 8009b90:	e7f8      	b.n	8009b84 <__kernel_rem_pio2+0x9c>
 8009b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b96:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009b9a:	f7f6 fcf1 	bl	8000580 <__aeabi_dmul>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba6:	f7f6 fb35 	bl	8000214 <__adddf3>
 8009baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bae:	3601      	adds	r6, #1
 8009bb0:	9b06      	ldr	r3, [sp, #24]
 8009bb2:	429e      	cmp	r6, r3
 8009bb4:	f1a7 0708 	sub.w	r7, r7, #8
 8009bb8:	ddeb      	ble.n	8009b92 <__kernel_rem_pio2+0xaa>
 8009bba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bbe:	3508      	adds	r5, #8
 8009bc0:	ecab 7b02 	vstmia	fp!, {d7}
 8009bc4:	f108 0801 	add.w	r8, r8, #1
 8009bc8:	e7ca      	b.n	8009b60 <__kernel_rem_pio2+0x78>
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	aa0c      	add	r2, sp, #48	; 0x30
 8009bce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009bd6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009bda:	9c04      	ldr	r4, [sp, #16]
 8009bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8009bde:	ab98      	add	r3, sp, #608	; 0x260
 8009be0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009be4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009be8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009bec:	f8cd b008 	str.w	fp, [sp, #8]
 8009bf0:	4625      	mov	r5, r4
 8009bf2:	2d00      	cmp	r5, #0
 8009bf4:	dc78      	bgt.n	8009ce8 <__kernel_rem_pio2+0x200>
 8009bf6:	ec47 6b10 	vmov	d0, r6, r7
 8009bfa:	4650      	mov	r0, sl
 8009bfc:	f000 fe3c 	bl	800a878 <scalbn>
 8009c00:	ec57 6b10 	vmov	r6, r7, d0
 8009c04:	2200      	movs	r2, #0
 8009c06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009c0a:	ee10 0a10 	vmov	r0, s0
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f7f6 fcb6 	bl	8000580 <__aeabi_dmul>
 8009c14:	ec41 0b10 	vmov	d0, r0, r1
 8009c18:	f000 fd1a 	bl	800a650 <floor>
 8009c1c:	4b7f      	ldr	r3, [pc, #508]	; (8009e1c <__kernel_rem_pio2+0x334>)
 8009c1e:	ec51 0b10 	vmov	r0, r1, d0
 8009c22:	2200      	movs	r2, #0
 8009c24:	f7f6 fcac 	bl	8000580 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 faee 	bl	8000210 <__aeabi_dsub>
 8009c34:	460f      	mov	r7, r1
 8009c36:	4606      	mov	r6, r0
 8009c38:	f7f6 ff52 	bl	8000ae0 <__aeabi_d2iz>
 8009c3c:	9007      	str	r0, [sp, #28]
 8009c3e:	f7f6 fc35 	bl	80004ac <__aeabi_i2d>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4630      	mov	r0, r6
 8009c48:	4639      	mov	r1, r7
 8009c4a:	f7f6 fae1 	bl	8000210 <__aeabi_dsub>
 8009c4e:	f1ba 0f00 	cmp.w	sl, #0
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	dd70      	ble.n	8009d3a <__kernel_rem_pio2+0x252>
 8009c58:	1e62      	subs	r2, r4, #1
 8009c5a:	ab0c      	add	r3, sp, #48	; 0x30
 8009c5c:	9d07      	ldr	r5, [sp, #28]
 8009c5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009c62:	f1ca 0118 	rsb	r1, sl, #24
 8009c66:	fa40 f301 	asr.w	r3, r0, r1
 8009c6a:	441d      	add	r5, r3
 8009c6c:	408b      	lsls	r3, r1
 8009c6e:	1ac0      	subs	r0, r0, r3
 8009c70:	ab0c      	add	r3, sp, #48	; 0x30
 8009c72:	9507      	str	r5, [sp, #28]
 8009c74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009c78:	f1ca 0317 	rsb	r3, sl, #23
 8009c7c:	fa40 f303 	asr.w	r3, r0, r3
 8009c80:	9302      	str	r3, [sp, #8]
 8009c82:	9b02      	ldr	r3, [sp, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dd66      	ble.n	8009d56 <__kernel_rem_pio2+0x26e>
 8009c88:	9b07      	ldr	r3, [sp, #28]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	9307      	str	r3, [sp, #28]
 8009c90:	4615      	mov	r5, r2
 8009c92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009c96:	4294      	cmp	r4, r2
 8009c98:	f300 8099 	bgt.w	8009dce <__kernel_rem_pio2+0x2e6>
 8009c9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ca0:	dd07      	ble.n	8009cb2 <__kernel_rem_pio2+0x1ca>
 8009ca2:	f1ba 0f01 	cmp.w	sl, #1
 8009ca6:	f000 80a5 	beq.w	8009df4 <__kernel_rem_pio2+0x30c>
 8009caa:	f1ba 0f02 	cmp.w	sl, #2
 8009cae:	f000 80c1 	beq.w	8009e34 <__kernel_rem_pio2+0x34c>
 8009cb2:	9b02      	ldr	r3, [sp, #8]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d14e      	bne.n	8009d56 <__kernel_rem_pio2+0x26e>
 8009cb8:	4632      	mov	r2, r6
 8009cba:	463b      	mov	r3, r7
 8009cbc:	4958      	ldr	r1, [pc, #352]	; (8009e20 <__kernel_rem_pio2+0x338>)
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	f7f6 faa6 	bl	8000210 <__aeabi_dsub>
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	2d00      	cmp	r5, #0
 8009cca:	d044      	beq.n	8009d56 <__kernel_rem_pio2+0x26e>
 8009ccc:	4650      	mov	r0, sl
 8009cce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009e10 <__kernel_rem_pio2+0x328>
 8009cd2:	f000 fdd1 	bl	800a878 <scalbn>
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	4639      	mov	r1, r7
 8009cda:	ec53 2b10 	vmov	r2, r3, d0
 8009cde:	f7f6 fa97 	bl	8000210 <__aeabi_dsub>
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	e036      	b.n	8009d56 <__kernel_rem_pio2+0x26e>
 8009ce8:	4b4e      	ldr	r3, [pc, #312]	; (8009e24 <__kernel_rem_pio2+0x33c>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f7f6 fc46 	bl	8000580 <__aeabi_dmul>
 8009cf4:	f7f6 fef4 	bl	8000ae0 <__aeabi_d2iz>
 8009cf8:	f7f6 fbd8 	bl	80004ac <__aeabi_i2d>
 8009cfc:	4b4a      	ldr	r3, [pc, #296]	; (8009e28 <__kernel_rem_pio2+0x340>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	4680      	mov	r8, r0
 8009d02:	4689      	mov	r9, r1
 8009d04:	f7f6 fc3c 	bl	8000580 <__aeabi_dmul>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7f6 fa7e 	bl	8000210 <__aeabi_dsub>
 8009d14:	f7f6 fee4 	bl	8000ae0 <__aeabi_d2iz>
 8009d18:	9b02      	ldr	r3, [sp, #8]
 8009d1a:	f843 0b04 	str.w	r0, [r3], #4
 8009d1e:	3d01      	subs	r5, #1
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	ab70      	add	r3, sp, #448	; 0x1c0
 8009d24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 fa70 	bl	8000214 <__adddf3>
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	e75b      	b.n	8009bf2 <__kernel_rem_pio2+0x10a>
 8009d3a:	d105      	bne.n	8009d48 <__kernel_rem_pio2+0x260>
 8009d3c:	1e63      	subs	r3, r4, #1
 8009d3e:	aa0c      	add	r2, sp, #48	; 0x30
 8009d40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009d44:	15c3      	asrs	r3, r0, #23
 8009d46:	e79b      	b.n	8009c80 <__kernel_rem_pio2+0x198>
 8009d48:	4b38      	ldr	r3, [pc, #224]	; (8009e2c <__kernel_rem_pio2+0x344>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f7f6 fe9e 	bl	8000a8c <__aeabi_dcmpge>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d139      	bne.n	8009dc8 <__kernel_rem_pio2+0x2e0>
 8009d54:	9002      	str	r0, [sp, #8]
 8009d56:	2200      	movs	r2, #0
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	f7f6 fe77 	bl	8000a50 <__aeabi_dcmpeq>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	f000 80b4 	beq.w	8009ed0 <__kernel_rem_pio2+0x3e8>
 8009d68:	f104 3bff 	add.w	fp, r4, #4294967295
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	2200      	movs	r2, #0
 8009d70:	9904      	ldr	r1, [sp, #16]
 8009d72:	428b      	cmp	r3, r1
 8009d74:	da65      	bge.n	8009e42 <__kernel_rem_pio2+0x35a>
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	d07b      	beq.n	8009e72 <__kernel_rem_pio2+0x38a>
 8009d7a:	ab0c      	add	r3, sp, #48	; 0x30
 8009d7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009d80:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80a0 	beq.w	8009eca <__kernel_rem_pio2+0x3e2>
 8009d8a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009e10 <__kernel_rem_pio2+0x328>
 8009d8e:	4650      	mov	r0, sl
 8009d90:	f000 fd72 	bl	800a878 <scalbn>
 8009d94:	4f23      	ldr	r7, [pc, #140]	; (8009e24 <__kernel_rem_pio2+0x33c>)
 8009d96:	ec55 4b10 	vmov	r4, r5, d0
 8009d9a:	46d8      	mov	r8, fp
 8009d9c:	2600      	movs	r6, #0
 8009d9e:	f1b8 0f00 	cmp.w	r8, #0
 8009da2:	f280 80cf 	bge.w	8009f44 <__kernel_rem_pio2+0x45c>
 8009da6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009e08 <__kernel_rem_pio2+0x320>
 8009daa:	465f      	mov	r7, fp
 8009dac:	f04f 0800 	mov.w	r8, #0
 8009db0:	2f00      	cmp	r7, #0
 8009db2:	f2c0 80fd 	blt.w	8009fb0 <__kernel_rem_pio2+0x4c8>
 8009db6:	ab70      	add	r3, sp, #448	; 0x1c0
 8009db8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009e30 <__kernel_rem_pio2+0x348>
 8009dbc:	ec55 4b18 	vmov	r4, r5, d8
 8009dc0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009dc4:	2600      	movs	r6, #0
 8009dc6:	e0e5      	b.n	8009f94 <__kernel_rem_pio2+0x4ac>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	9302      	str	r3, [sp, #8]
 8009dcc:	e75c      	b.n	8009c88 <__kernel_rem_pio2+0x1a0>
 8009dce:	f8db 3000 	ldr.w	r3, [fp]
 8009dd2:	b955      	cbnz	r5, 8009dea <__kernel_rem_pio2+0x302>
 8009dd4:	b123      	cbz	r3, 8009de0 <__kernel_rem_pio2+0x2f8>
 8009dd6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009dda:	f8cb 3000 	str.w	r3, [fp]
 8009dde:	2301      	movs	r3, #1
 8009de0:	3201      	adds	r2, #1
 8009de2:	f10b 0b04 	add.w	fp, fp, #4
 8009de6:	461d      	mov	r5, r3
 8009de8:	e755      	b.n	8009c96 <__kernel_rem_pio2+0x1ae>
 8009dea:	1acb      	subs	r3, r1, r3
 8009dec:	f8cb 3000 	str.w	r3, [fp]
 8009df0:	462b      	mov	r3, r5
 8009df2:	e7f5      	b.n	8009de0 <__kernel_rem_pio2+0x2f8>
 8009df4:	1e62      	subs	r2, r4, #1
 8009df6:	ab0c      	add	r3, sp, #48	; 0x30
 8009df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e00:	a90c      	add	r1, sp, #48	; 0x30
 8009e02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009e06:	e754      	b.n	8009cb2 <__kernel_rem_pio2+0x1ca>
	...
 8009e14:	3ff00000 	.word	0x3ff00000
 8009e18:	0800abe8 	.word	0x0800abe8
 8009e1c:	40200000 	.word	0x40200000
 8009e20:	3ff00000 	.word	0x3ff00000
 8009e24:	3e700000 	.word	0x3e700000
 8009e28:	41700000 	.word	0x41700000
 8009e2c:	3fe00000 	.word	0x3fe00000
 8009e30:	0800aba8 	.word	0x0800aba8
 8009e34:	1e62      	subs	r2, r4, #1
 8009e36:	ab0c      	add	r3, sp, #48	; 0x30
 8009e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e40:	e7de      	b.n	8009e00 <__kernel_rem_pio2+0x318>
 8009e42:	a90c      	add	r1, sp, #48	; 0x30
 8009e44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	e790      	b.n	8009d70 <__kernel_rem_pio2+0x288>
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009e54:	2900      	cmp	r1, #0
 8009e56:	d0fa      	beq.n	8009e4e <__kernel_rem_pio2+0x366>
 8009e58:	9a08      	ldr	r2, [sp, #32]
 8009e5a:	18e3      	adds	r3, r4, r3
 8009e5c:	18a6      	adds	r6, r4, r2
 8009e5e:	aa20      	add	r2, sp, #128	; 0x80
 8009e60:	1c65      	adds	r5, r4, #1
 8009e62:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009e66:	9302      	str	r3, [sp, #8]
 8009e68:	9b02      	ldr	r3, [sp, #8]
 8009e6a:	42ab      	cmp	r3, r5
 8009e6c:	da04      	bge.n	8009e78 <__kernel_rem_pio2+0x390>
 8009e6e:	461c      	mov	r4, r3
 8009e70:	e6b5      	b.n	8009bde <__kernel_rem_pio2+0xf6>
 8009e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e74:	2301      	movs	r3, #1
 8009e76:	e7eb      	b.n	8009e50 <__kernel_rem_pio2+0x368>
 8009e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e7e:	f7f6 fb15 	bl	80004ac <__aeabi_i2d>
 8009e82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e88:	46b3      	mov	fp, r6
 8009e8a:	461c      	mov	r4, r3
 8009e8c:	2700      	movs	r7, #0
 8009e8e:	f04f 0800 	mov.w	r8, #0
 8009e92:	f04f 0900 	mov.w	r9, #0
 8009e96:	9b06      	ldr	r3, [sp, #24]
 8009e98:	429f      	cmp	r7, r3
 8009e9a:	dd06      	ble.n	8009eaa <__kernel_rem_pio2+0x3c2>
 8009e9c:	ab70      	add	r3, sp, #448	; 0x1c0
 8009e9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009ea2:	e9c3 8900 	strd	r8, r9, [r3]
 8009ea6:	3501      	adds	r5, #1
 8009ea8:	e7de      	b.n	8009e68 <__kernel_rem_pio2+0x380>
 8009eaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009eae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009eb2:	f7f6 fb65 	bl	8000580 <__aeabi_dmul>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4640      	mov	r0, r8
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	f7f6 f9a9 	bl	8000214 <__adddf3>
 8009ec2:	3701      	adds	r7, #1
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	e7e5      	b.n	8009e96 <__kernel_rem_pio2+0x3ae>
 8009eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ece:	e754      	b.n	8009d7a <__kernel_rem_pio2+0x292>
 8009ed0:	ec47 6b10 	vmov	d0, r6, r7
 8009ed4:	f1ca 0000 	rsb	r0, sl, #0
 8009ed8:	f000 fcce 	bl	800a878 <scalbn>
 8009edc:	ec57 6b10 	vmov	r6, r7, d0
 8009ee0:	4b9f      	ldr	r3, [pc, #636]	; (800a160 <__kernel_rem_pio2+0x678>)
 8009ee2:	ee10 0a10 	vmov	r0, s0
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 fdcf 	bl	8000a8c <__aeabi_dcmpge>
 8009eee:	b300      	cbz	r0, 8009f32 <__kernel_rem_pio2+0x44a>
 8009ef0:	4b9c      	ldr	r3, [pc, #624]	; (800a164 <__kernel_rem_pio2+0x67c>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fb42 	bl	8000580 <__aeabi_dmul>
 8009efc:	f7f6 fdf0 	bl	8000ae0 <__aeabi_d2iz>
 8009f00:	4605      	mov	r5, r0
 8009f02:	f7f6 fad3 	bl	80004ac <__aeabi_i2d>
 8009f06:	4b96      	ldr	r3, [pc, #600]	; (800a160 <__kernel_rem_pio2+0x678>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f7f6 fb39 	bl	8000580 <__aeabi_dmul>
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4602      	mov	r2, r0
 8009f12:	4639      	mov	r1, r7
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7f6 f97b 	bl	8000210 <__aeabi_dsub>
 8009f1a:	f7f6 fde1 	bl	8000ae0 <__aeabi_d2iz>
 8009f1e:	f104 0b01 	add.w	fp, r4, #1
 8009f22:	ab0c      	add	r3, sp, #48	; 0x30
 8009f24:	f10a 0a18 	add.w	sl, sl, #24
 8009f28:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009f2c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009f30:	e72b      	b.n	8009d8a <__kernel_rem_pio2+0x2a2>
 8009f32:	4630      	mov	r0, r6
 8009f34:	4639      	mov	r1, r7
 8009f36:	f7f6 fdd3 	bl	8000ae0 <__aeabi_d2iz>
 8009f3a:	ab0c      	add	r3, sp, #48	; 0x30
 8009f3c:	46a3      	mov	fp, r4
 8009f3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009f42:	e722      	b.n	8009d8a <__kernel_rem_pio2+0x2a2>
 8009f44:	ab70      	add	r3, sp, #448	; 0x1c0
 8009f46:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009f4a:	ab0c      	add	r3, sp, #48	; 0x30
 8009f4c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009f50:	f7f6 faac 	bl	80004ac <__aeabi_i2d>
 8009f54:	4622      	mov	r2, r4
 8009f56:	462b      	mov	r3, r5
 8009f58:	f7f6 fb12 	bl	8000580 <__aeabi_dmul>
 8009f5c:	4632      	mov	r2, r6
 8009f5e:	e9c9 0100 	strd	r0, r1, [r9]
 8009f62:	463b      	mov	r3, r7
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 fb0a 	bl	8000580 <__aeabi_dmul>
 8009f6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f70:	4604      	mov	r4, r0
 8009f72:	460d      	mov	r5, r1
 8009f74:	e713      	b.n	8009d9e <__kernel_rem_pio2+0x2b6>
 8009f76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009f7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009f7e:	f7f6 faff 	bl	8000580 <__aeabi_dmul>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4620      	mov	r0, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f7f6 f943 	bl	8000214 <__adddf3>
 8009f8e:	3601      	adds	r6, #1
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	429e      	cmp	r6, r3
 8009f98:	dc01      	bgt.n	8009f9e <__kernel_rem_pio2+0x4b6>
 8009f9a:	45b0      	cmp	r8, r6
 8009f9c:	daeb      	bge.n	8009f76 <__kernel_rem_pio2+0x48e>
 8009f9e:	ab48      	add	r3, sp, #288	; 0x120
 8009fa0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009fa4:	e9c3 4500 	strd	r4, r5, [r3]
 8009fa8:	3f01      	subs	r7, #1
 8009faa:	f108 0801 	add.w	r8, r8, #1
 8009fae:	e6ff      	b.n	8009db0 <__kernel_rem_pio2+0x2c8>
 8009fb0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	dc0b      	bgt.n	8009fce <__kernel_rem_pio2+0x4e6>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dc6e      	bgt.n	800a098 <__kernel_rem_pio2+0x5b0>
 8009fba:	d045      	beq.n	800a048 <__kernel_rem_pio2+0x560>
 8009fbc:	9b07      	ldr	r3, [sp, #28]
 8009fbe:	f003 0007 	and.w	r0, r3, #7
 8009fc2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009fc6:	ecbd 8b02 	vpop	{d8}
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d1f3      	bne.n	8009fbc <__kernel_rem_pio2+0x4d4>
 8009fd4:	ab48      	add	r3, sp, #288	; 0x120
 8009fd6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009fda:	46d0      	mov	r8, sl
 8009fdc:	46d9      	mov	r9, fp
 8009fde:	f1b9 0f00 	cmp.w	r9, #0
 8009fe2:	f1a8 0808 	sub.w	r8, r8, #8
 8009fe6:	dc64      	bgt.n	800a0b2 <__kernel_rem_pio2+0x5ca>
 8009fe8:	465c      	mov	r4, fp
 8009fea:	2c01      	cmp	r4, #1
 8009fec:	f1aa 0a08 	sub.w	sl, sl, #8
 8009ff0:	dc7e      	bgt.n	800a0f0 <__kernel_rem_pio2+0x608>
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	f1bb 0f01 	cmp.w	fp, #1
 8009ffa:	f300 8097 	bgt.w	800a12c <__kernel_rem_pio2+0x644>
 8009ffe:	9b02      	ldr	r3, [sp, #8]
 800a000:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800a004:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f040 8099 	bne.w	800a140 <__kernel_rem_pio2+0x658>
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	e9c3 5600 	strd	r5, r6, [r3]
 800a014:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a018:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a01c:	e7ce      	b.n	8009fbc <__kernel_rem_pio2+0x4d4>
 800a01e:	ab48      	add	r3, sp, #288	; 0x120
 800a020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f7f6 f8f4 	bl	8000214 <__adddf3>
 800a02c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a030:	f1bb 0f00 	cmp.w	fp, #0
 800a034:	daf3      	bge.n	800a01e <__kernel_rem_pio2+0x536>
 800a036:	9b02      	ldr	r3, [sp, #8]
 800a038:	b113      	cbz	r3, 800a040 <__kernel_rem_pio2+0x558>
 800a03a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a03e:	4619      	mov	r1, r3
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	e9c3 0100 	strd	r0, r1, [r3]
 800a046:	e7b9      	b.n	8009fbc <__kernel_rem_pio2+0x4d4>
 800a048:	2000      	movs	r0, #0
 800a04a:	2100      	movs	r1, #0
 800a04c:	e7f0      	b.n	800a030 <__kernel_rem_pio2+0x548>
 800a04e:	ab48      	add	r3, sp, #288	; 0x120
 800a050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	f7f6 f8dc 	bl	8000214 <__adddf3>
 800a05c:	3c01      	subs	r4, #1
 800a05e:	2c00      	cmp	r4, #0
 800a060:	daf5      	bge.n	800a04e <__kernel_rem_pio2+0x566>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	b1e3      	cbz	r3, 800a0a0 <__kernel_rem_pio2+0x5b8>
 800a066:	4602      	mov	r2, r0
 800a068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a06c:	9c01      	ldr	r4, [sp, #4]
 800a06e:	e9c4 2300 	strd	r2, r3, [r4]
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a07a:	f7f6 f8c9 	bl	8000210 <__aeabi_dsub>
 800a07e:	ad4a      	add	r5, sp, #296	; 0x128
 800a080:	2401      	movs	r4, #1
 800a082:	45a3      	cmp	fp, r4
 800a084:	da0f      	bge.n	800a0a6 <__kernel_rem_pio2+0x5be>
 800a086:	9b02      	ldr	r3, [sp, #8]
 800a088:	b113      	cbz	r3, 800a090 <__kernel_rem_pio2+0x5a8>
 800a08a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a08e:	4619      	mov	r1, r3
 800a090:	9b01      	ldr	r3, [sp, #4]
 800a092:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a096:	e791      	b.n	8009fbc <__kernel_rem_pio2+0x4d4>
 800a098:	465c      	mov	r4, fp
 800a09a:	2000      	movs	r0, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	e7de      	b.n	800a05e <__kernel_rem_pio2+0x576>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	e7e2      	b.n	800a06c <__kernel_rem_pio2+0x584>
 800a0a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a0aa:	f7f6 f8b3 	bl	8000214 <__adddf3>
 800a0ae:	3401      	adds	r4, #1
 800a0b0:	e7e7      	b.n	800a082 <__kernel_rem_pio2+0x59a>
 800a0b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800a0b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	4632      	mov	r2, r6
 800a0be:	463b      	mov	r3, r7
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 f8a7 	bl	8000214 <__adddf3>
 800a0c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 f89d 	bl	8000210 <__aeabi_dsub>
 800a0d6:	4632      	mov	r2, r6
 800a0d8:	463b      	mov	r3, r7
 800a0da:	f7f6 f89b 	bl	8000214 <__adddf3>
 800a0de:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a0e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800a0e6:	ed88 7b00 	vstr	d7, [r8]
 800a0ea:	f109 39ff 	add.w	r9, r9, #4294967295
 800a0ee:	e776      	b.n	8009fde <__kernel_rem_pio2+0x4f6>
 800a0f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a0f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f6 f888 	bl	8000214 <__adddf3>
 800a104:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	f7f6 f87e 	bl	8000210 <__aeabi_dsub>
 800a114:	4632      	mov	r2, r6
 800a116:	463b      	mov	r3, r7
 800a118:	f7f6 f87c 	bl	8000214 <__adddf3>
 800a11c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a120:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a124:	ed8a 7b00 	vstr	d7, [sl]
 800a128:	3c01      	subs	r4, #1
 800a12a:	e75e      	b.n	8009fea <__kernel_rem_pio2+0x502>
 800a12c:	ab48      	add	r3, sp, #288	; 0x120
 800a12e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f86d 	bl	8000214 <__adddf3>
 800a13a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a13e:	e75a      	b.n	8009ff6 <__kernel_rem_pio2+0x50e>
 800a140:	9b01      	ldr	r3, [sp, #4]
 800a142:	9a01      	ldr	r2, [sp, #4]
 800a144:	601d      	str	r5, [r3, #0]
 800a146:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a14a:	605c      	str	r4, [r3, #4]
 800a14c:	609f      	str	r7, [r3, #8]
 800a14e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a152:	60d3      	str	r3, [r2, #12]
 800a154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a158:	6110      	str	r0, [r2, #16]
 800a15a:	6153      	str	r3, [r2, #20]
 800a15c:	e72e      	b.n	8009fbc <__kernel_rem_pio2+0x4d4>
 800a15e:	bf00      	nop
 800a160:	41700000 	.word	0x41700000
 800a164:	3e700000 	.word	0x3e700000

0800a168 <__kernel_sin>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	ed2d 8b04 	vpush	{d8-d9}
 800a170:	eeb0 8a41 	vmov.f32	s16, s2
 800a174:	eef0 8a61 	vmov.f32	s17, s3
 800a178:	ec55 4b10 	vmov	r4, r5, d0
 800a17c:	b083      	sub	sp, #12
 800a17e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a182:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a186:	9001      	str	r0, [sp, #4]
 800a188:	da06      	bge.n	800a198 <__kernel_sin+0x30>
 800a18a:	ee10 0a10 	vmov	r0, s0
 800a18e:	4629      	mov	r1, r5
 800a190:	f7f6 fca6 	bl	8000ae0 <__aeabi_d2iz>
 800a194:	2800      	cmp	r0, #0
 800a196:	d051      	beq.n	800a23c <__kernel_sin+0xd4>
 800a198:	4622      	mov	r2, r4
 800a19a:	462b      	mov	r3, r5
 800a19c:	4620      	mov	r0, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7f6 f9ee 	bl	8000580 <__aeabi_dmul>
 800a1a4:	4682      	mov	sl, r0
 800a1a6:	468b      	mov	fp, r1
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 f9e6 	bl	8000580 <__aeabi_dmul>
 800a1b4:	a341      	add	r3, pc, #260	; (adr r3, 800a2bc <__kernel_sin+0x154>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	4680      	mov	r8, r0
 800a1bc:	4689      	mov	r9, r1
 800a1be:	4650      	mov	r0, sl
 800a1c0:	4659      	mov	r1, fp
 800a1c2:	f7f6 f9dd 	bl	8000580 <__aeabi_dmul>
 800a1c6:	a33f      	add	r3, pc, #252	; (adr r3, 800a2c4 <__kernel_sin+0x15c>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f7f6 f820 	bl	8000210 <__aeabi_dsub>
 800a1d0:	4652      	mov	r2, sl
 800a1d2:	465b      	mov	r3, fp
 800a1d4:	f7f6 f9d4 	bl	8000580 <__aeabi_dmul>
 800a1d8:	a33c      	add	r3, pc, #240	; (adr r3, 800a2cc <__kernel_sin+0x164>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 f819 	bl	8000214 <__adddf3>
 800a1e2:	4652      	mov	r2, sl
 800a1e4:	465b      	mov	r3, fp
 800a1e6:	f7f6 f9cb 	bl	8000580 <__aeabi_dmul>
 800a1ea:	a33a      	add	r3, pc, #232	; (adr r3, 800a2d4 <__kernel_sin+0x16c>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f7f6 f80e 	bl	8000210 <__aeabi_dsub>
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	465b      	mov	r3, fp
 800a1f8:	f7f6 f9c2 	bl	8000580 <__aeabi_dmul>
 800a1fc:	a337      	add	r3, pc, #220	; (adr r3, 800a2dc <__kernel_sin+0x174>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f7f6 f807 	bl	8000214 <__adddf3>
 800a206:	9b01      	ldr	r3, [sp, #4]
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	b9eb      	cbnz	r3, 800a24a <__kernel_sin+0xe2>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4650      	mov	r0, sl
 800a214:	4659      	mov	r1, fp
 800a216:	f7f6 f9b3 	bl	8000580 <__aeabi_dmul>
 800a21a:	a325      	add	r3, pc, #148	; (adr r3, 800a2b0 <__kernel_sin+0x148>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f5 fff6 	bl	8000210 <__aeabi_dsub>
 800a224:	4642      	mov	r2, r8
 800a226:	464b      	mov	r3, r9
 800a228:	f7f6 f9aa 	bl	8000580 <__aeabi_dmul>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4620      	mov	r0, r4
 800a232:	4629      	mov	r1, r5
 800a234:	f7f5 ffee 	bl	8000214 <__adddf3>
 800a238:	4604      	mov	r4, r0
 800a23a:	460d      	mov	r5, r1
 800a23c:	ec45 4b10 	vmov	d0, r4, r5
 800a240:	b003      	add	sp, #12
 800a242:	ecbd 8b04 	vpop	{d8-d9}
 800a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24a:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <__kernel_sin+0x150>)
 800a24c:	ec51 0b18 	vmov	r0, r1, d8
 800a250:	2200      	movs	r2, #0
 800a252:	f7f6 f995 	bl	8000580 <__aeabi_dmul>
 800a256:	4632      	mov	r2, r6
 800a258:	ec41 0b19 	vmov	d9, r0, r1
 800a25c:	463b      	mov	r3, r7
 800a25e:	4640      	mov	r0, r8
 800a260:	4649      	mov	r1, r9
 800a262:	f7f6 f98d 	bl	8000580 <__aeabi_dmul>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	ec51 0b19 	vmov	r0, r1, d9
 800a26e:	f7f5 ffcf 	bl	8000210 <__aeabi_dsub>
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	f7f6 f983 	bl	8000580 <__aeabi_dmul>
 800a27a:	ec53 2b18 	vmov	r2, r3, d8
 800a27e:	f7f5 ffc7 	bl	8000210 <__aeabi_dsub>
 800a282:	a30b      	add	r3, pc, #44	; (adr r3, 800a2b0 <__kernel_sin+0x148>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4640      	mov	r0, r8
 800a28e:	4649      	mov	r1, r9
 800a290:	f7f6 f976 	bl	8000580 <__aeabi_dmul>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f5 ffba 	bl	8000214 <__adddf3>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	f7f5 ffb2 	bl	8000210 <__aeabi_dsub>
 800a2ac:	e7c4      	b.n	800a238 <__kernel_sin+0xd0>
 800a2ae:	bf00      	nop
 800a2b0:	55555549 	.word	0x55555549
 800a2b4:	3fc55555 	.word	0x3fc55555
 800a2b8:	3fe00000 	.word	0x3fe00000
 800a2bc:	5acfd57c 	.word	0x5acfd57c
 800a2c0:	3de5d93a 	.word	0x3de5d93a
 800a2c4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a2c8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a2cc:	57b1fe7d 	.word	0x57b1fe7d
 800a2d0:	3ec71de3 	.word	0x3ec71de3
 800a2d4:	19c161d5 	.word	0x19c161d5
 800a2d8:	3f2a01a0 	.word	0x3f2a01a0
 800a2dc:	1110f8a6 	.word	0x1110f8a6
 800a2e0:	3f811111 	.word	0x3f811111
 800a2e4:	00000000 	.word	0x00000000

0800a2e8 <atan>:
 800a2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	ec55 4b10 	vmov	r4, r5, d0
 800a2f0:	4bc3      	ldr	r3, [pc, #780]	; (800a600 <atan+0x318>)
 800a2f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	46ab      	mov	fp, r5
 800a2fa:	dd18      	ble.n	800a32e <atan+0x46>
 800a2fc:	4bc1      	ldr	r3, [pc, #772]	; (800a604 <atan+0x31c>)
 800a2fe:	429e      	cmp	r6, r3
 800a300:	dc01      	bgt.n	800a306 <atan+0x1e>
 800a302:	d109      	bne.n	800a318 <atan+0x30>
 800a304:	b144      	cbz	r4, 800a318 <atan+0x30>
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	4629      	mov	r1, r5
 800a30e:	f7f5 ff81 	bl	8000214 <__adddf3>
 800a312:	4604      	mov	r4, r0
 800a314:	460d      	mov	r5, r1
 800a316:	e006      	b.n	800a326 <atan+0x3e>
 800a318:	f1bb 0f00 	cmp.w	fp, #0
 800a31c:	f300 8131 	bgt.w	800a582 <atan+0x29a>
 800a320:	a59b      	add	r5, pc, #620	; (adr r5, 800a590 <atan+0x2a8>)
 800a322:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a326:	ec45 4b10 	vmov	d0, r4, r5
 800a32a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	4bb6      	ldr	r3, [pc, #728]	; (800a608 <atan+0x320>)
 800a330:	429e      	cmp	r6, r3
 800a332:	dc14      	bgt.n	800a35e <atan+0x76>
 800a334:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a338:	429e      	cmp	r6, r3
 800a33a:	dc0d      	bgt.n	800a358 <atan+0x70>
 800a33c:	a396      	add	r3, pc, #600	; (adr r3, 800a598 <atan+0x2b0>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	ee10 0a10 	vmov	r0, s0
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ff64 	bl	8000214 <__adddf3>
 800a34c:	4baf      	ldr	r3, [pc, #700]	; (800a60c <atan+0x324>)
 800a34e:	2200      	movs	r2, #0
 800a350:	f7f6 fba6 	bl	8000aa0 <__aeabi_dcmpgt>
 800a354:	2800      	cmp	r0, #0
 800a356:	d1e6      	bne.n	800a326 <atan+0x3e>
 800a358:	f04f 3aff 	mov.w	sl, #4294967295
 800a35c:	e02b      	b.n	800a3b6 <atan+0xce>
 800a35e:	f000 f963 	bl	800a628 <fabs>
 800a362:	4bab      	ldr	r3, [pc, #684]	; (800a610 <atan+0x328>)
 800a364:	429e      	cmp	r6, r3
 800a366:	ec55 4b10 	vmov	r4, r5, d0
 800a36a:	f300 80bf 	bgt.w	800a4ec <atan+0x204>
 800a36e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a372:	429e      	cmp	r6, r3
 800a374:	f300 80a0 	bgt.w	800a4b8 <atan+0x1d0>
 800a378:	ee10 2a10 	vmov	r2, s0
 800a37c:	ee10 0a10 	vmov	r0, s0
 800a380:	462b      	mov	r3, r5
 800a382:	4629      	mov	r1, r5
 800a384:	f7f5 ff46 	bl	8000214 <__adddf3>
 800a388:	4ba0      	ldr	r3, [pc, #640]	; (800a60c <atan+0x324>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	f7f5 ff40 	bl	8000210 <__aeabi_dsub>
 800a390:	2200      	movs	r2, #0
 800a392:	4606      	mov	r6, r0
 800a394:	460f      	mov	r7, r1
 800a396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a39a:	4620      	mov	r0, r4
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7f5 ff39 	bl	8000214 <__adddf3>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	f7f6 fa13 	bl	80007d4 <__aeabi_ddiv>
 800a3ae:	f04f 0a00 	mov.w	sl, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	460d      	mov	r5, r1
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7f6 f8df 	bl	8000580 <__aeabi_dmul>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4680      	mov	r8, r0
 800a3c8:	4689      	mov	r9, r1
 800a3ca:	f7f6 f8d9 	bl	8000580 <__aeabi_dmul>
 800a3ce:	a374      	add	r3, pc, #464	; (adr r3, 800a5a0 <atan+0x2b8>)
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	f7f6 f8d2 	bl	8000580 <__aeabi_dmul>
 800a3dc:	a372      	add	r3, pc, #456	; (adr r3, 800a5a8 <atan+0x2c0>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f5 ff17 	bl	8000214 <__adddf3>
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	463b      	mov	r3, r7
 800a3ea:	f7f6 f8c9 	bl	8000580 <__aeabi_dmul>
 800a3ee:	a370      	add	r3, pc, #448	; (adr r3, 800a5b0 <atan+0x2c8>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f5 ff0e 	bl	8000214 <__adddf3>
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	f7f6 f8c0 	bl	8000580 <__aeabi_dmul>
 800a400:	a36d      	add	r3, pc, #436	; (adr r3, 800a5b8 <atan+0x2d0>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7f5 ff05 	bl	8000214 <__adddf3>
 800a40a:	4632      	mov	r2, r6
 800a40c:	463b      	mov	r3, r7
 800a40e:	f7f6 f8b7 	bl	8000580 <__aeabi_dmul>
 800a412:	a36b      	add	r3, pc, #428	; (adr r3, 800a5c0 <atan+0x2d8>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 fefc 	bl	8000214 <__adddf3>
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	f7f6 f8ae 	bl	8000580 <__aeabi_dmul>
 800a424:	a368      	add	r3, pc, #416	; (adr r3, 800a5c8 <atan+0x2e0>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 fef3 	bl	8000214 <__adddf3>
 800a42e:	4642      	mov	r2, r8
 800a430:	464b      	mov	r3, r9
 800a432:	f7f6 f8a5 	bl	8000580 <__aeabi_dmul>
 800a436:	a366      	add	r3, pc, #408	; (adr r3, 800a5d0 <atan+0x2e8>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	4680      	mov	r8, r0
 800a43e:	4689      	mov	r9, r1
 800a440:	4630      	mov	r0, r6
 800a442:	4639      	mov	r1, r7
 800a444:	f7f6 f89c 	bl	8000580 <__aeabi_dmul>
 800a448:	a363      	add	r3, pc, #396	; (adr r3, 800a5d8 <atan+0x2f0>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f5 fedf 	bl	8000210 <__aeabi_dsub>
 800a452:	4632      	mov	r2, r6
 800a454:	463b      	mov	r3, r7
 800a456:	f7f6 f893 	bl	8000580 <__aeabi_dmul>
 800a45a:	a361      	add	r3, pc, #388	; (adr r3, 800a5e0 <atan+0x2f8>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f5 fed6 	bl	8000210 <__aeabi_dsub>
 800a464:	4632      	mov	r2, r6
 800a466:	463b      	mov	r3, r7
 800a468:	f7f6 f88a 	bl	8000580 <__aeabi_dmul>
 800a46c:	a35e      	add	r3, pc, #376	; (adr r3, 800a5e8 <atan+0x300>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f5 fecd 	bl	8000210 <__aeabi_dsub>
 800a476:	4632      	mov	r2, r6
 800a478:	463b      	mov	r3, r7
 800a47a:	f7f6 f881 	bl	8000580 <__aeabi_dmul>
 800a47e:	a35c      	add	r3, pc, #368	; (adr r3, 800a5f0 <atan+0x308>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f5 fec4 	bl	8000210 <__aeabi_dsub>
 800a488:	4632      	mov	r2, r6
 800a48a:	463b      	mov	r3, r7
 800a48c:	f7f6 f878 	bl	8000580 <__aeabi_dmul>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4640      	mov	r0, r8
 800a496:	4649      	mov	r1, r9
 800a498:	f7f5 febc 	bl	8000214 <__adddf3>
 800a49c:	4622      	mov	r2, r4
 800a49e:	462b      	mov	r3, r5
 800a4a0:	f7f6 f86e 	bl	8000580 <__aeabi_dmul>
 800a4a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	d14b      	bne.n	800a546 <atan+0x25e>
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f5 fead 	bl	8000210 <__aeabi_dsub>
 800a4b6:	e72c      	b.n	800a312 <atan+0x2a>
 800a4b8:	ee10 0a10 	vmov	r0, s0
 800a4bc:	4b53      	ldr	r3, [pc, #332]	; (800a60c <atan+0x324>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f5 fea5 	bl	8000210 <__aeabi_dsub>
 800a4c6:	4b51      	ldr	r3, [pc, #324]	; (800a60c <atan+0x324>)
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	460f      	mov	r7, r1
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7f5 fe9f 	bl	8000214 <__adddf3>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4639      	mov	r1, r7
 800a4de:	f7f6 f979 	bl	80007d4 <__aeabi_ddiv>
 800a4e2:	f04f 0a01 	mov.w	sl, #1
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	e764      	b.n	800a3b6 <atan+0xce>
 800a4ec:	4b49      	ldr	r3, [pc, #292]	; (800a614 <atan+0x32c>)
 800a4ee:	429e      	cmp	r6, r3
 800a4f0:	da1d      	bge.n	800a52e <atan+0x246>
 800a4f2:	ee10 0a10 	vmov	r0, s0
 800a4f6:	4b48      	ldr	r3, [pc, #288]	; (800a618 <atan+0x330>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f7f5 fe88 	bl	8000210 <__aeabi_dsub>
 800a500:	4b45      	ldr	r3, [pc, #276]	; (800a618 <atan+0x330>)
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	2200      	movs	r2, #0
 800a508:	4620      	mov	r0, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	f7f6 f838 	bl	8000580 <__aeabi_dmul>
 800a510:	4b3e      	ldr	r3, [pc, #248]	; (800a60c <atan+0x324>)
 800a512:	2200      	movs	r2, #0
 800a514:	f7f5 fe7e 	bl	8000214 <__adddf3>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f6 f958 	bl	80007d4 <__aeabi_ddiv>
 800a524:	f04f 0a02 	mov.w	sl, #2
 800a528:	4604      	mov	r4, r0
 800a52a:	460d      	mov	r5, r1
 800a52c:	e743      	b.n	800a3b6 <atan+0xce>
 800a52e:	462b      	mov	r3, r5
 800a530:	ee10 2a10 	vmov	r2, s0
 800a534:	4939      	ldr	r1, [pc, #228]	; (800a61c <atan+0x334>)
 800a536:	2000      	movs	r0, #0
 800a538:	f7f6 f94c 	bl	80007d4 <__aeabi_ddiv>
 800a53c:	f04f 0a03 	mov.w	sl, #3
 800a540:	4604      	mov	r4, r0
 800a542:	460d      	mov	r5, r1
 800a544:	e737      	b.n	800a3b6 <atan+0xce>
 800a546:	4b36      	ldr	r3, [pc, #216]	; (800a620 <atan+0x338>)
 800a548:	4e36      	ldr	r6, [pc, #216]	; (800a624 <atan+0x33c>)
 800a54a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a54e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a552:	e9da 2300 	ldrd	r2, r3, [sl]
 800a556:	f7f5 fe5b 	bl	8000210 <__aeabi_dsub>
 800a55a:	4622      	mov	r2, r4
 800a55c:	462b      	mov	r3, r5
 800a55e:	f7f5 fe57 	bl	8000210 <__aeabi_dsub>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a56a:	f7f5 fe51 	bl	8000210 <__aeabi_dsub>
 800a56e:	f1bb 0f00 	cmp.w	fp, #0
 800a572:	4604      	mov	r4, r0
 800a574:	460d      	mov	r5, r1
 800a576:	f6bf aed6 	bge.w	800a326 <atan+0x3e>
 800a57a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a57e:	461d      	mov	r5, r3
 800a580:	e6d1      	b.n	800a326 <atan+0x3e>
 800a582:	a51d      	add	r5, pc, #116	; (adr r5, 800a5f8 <atan+0x310>)
 800a584:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a588:	e6cd      	b.n	800a326 <atan+0x3e>
 800a58a:	bf00      	nop
 800a58c:	f3af 8000 	nop.w
 800a590:	54442d18 	.word	0x54442d18
 800a594:	bff921fb 	.word	0xbff921fb
 800a598:	8800759c 	.word	0x8800759c
 800a59c:	7e37e43c 	.word	0x7e37e43c
 800a5a0:	e322da11 	.word	0xe322da11
 800a5a4:	3f90ad3a 	.word	0x3f90ad3a
 800a5a8:	24760deb 	.word	0x24760deb
 800a5ac:	3fa97b4b 	.word	0x3fa97b4b
 800a5b0:	a0d03d51 	.word	0xa0d03d51
 800a5b4:	3fb10d66 	.word	0x3fb10d66
 800a5b8:	c54c206e 	.word	0xc54c206e
 800a5bc:	3fb745cd 	.word	0x3fb745cd
 800a5c0:	920083ff 	.word	0x920083ff
 800a5c4:	3fc24924 	.word	0x3fc24924
 800a5c8:	5555550d 	.word	0x5555550d
 800a5cc:	3fd55555 	.word	0x3fd55555
 800a5d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a5d4:	bfa2b444 	.word	0xbfa2b444
 800a5d8:	52defd9a 	.word	0x52defd9a
 800a5dc:	3fadde2d 	.word	0x3fadde2d
 800a5e0:	af749a6d 	.word	0xaf749a6d
 800a5e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a5e8:	fe231671 	.word	0xfe231671
 800a5ec:	3fbc71c6 	.word	0x3fbc71c6
 800a5f0:	9998ebc4 	.word	0x9998ebc4
 800a5f4:	3fc99999 	.word	0x3fc99999
 800a5f8:	54442d18 	.word	0x54442d18
 800a5fc:	3ff921fb 	.word	0x3ff921fb
 800a600:	440fffff 	.word	0x440fffff
 800a604:	7ff00000 	.word	0x7ff00000
 800a608:	3fdbffff 	.word	0x3fdbffff
 800a60c:	3ff00000 	.word	0x3ff00000
 800a610:	3ff2ffff 	.word	0x3ff2ffff
 800a614:	40038000 	.word	0x40038000
 800a618:	3ff80000 	.word	0x3ff80000
 800a61c:	bff00000 	.word	0xbff00000
 800a620:	0800ac18 	.word	0x0800ac18
 800a624:	0800abf8 	.word	0x0800abf8

0800a628 <fabs>:
 800a628:	ec51 0b10 	vmov	r0, r1, d0
 800a62c:	ee10 2a10 	vmov	r2, s0
 800a630:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a634:	ec43 2b10 	vmov	d0, r2, r3
 800a638:	4770      	bx	lr

0800a63a <finite>:
 800a63a:	b082      	sub	sp, #8
 800a63c:	ed8d 0b00 	vstr	d0, [sp]
 800a640:	9801      	ldr	r0, [sp, #4]
 800a642:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a646:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a64a:	0fc0      	lsrs	r0, r0, #31
 800a64c:	b002      	add	sp, #8
 800a64e:	4770      	bx	lr

0800a650 <floor>:
 800a650:	ec51 0b10 	vmov	r0, r1, d0
 800a654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a658:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a65c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a660:	2e13      	cmp	r6, #19
 800a662:	ee10 5a10 	vmov	r5, s0
 800a666:	ee10 8a10 	vmov	r8, s0
 800a66a:	460c      	mov	r4, r1
 800a66c:	dc32      	bgt.n	800a6d4 <floor+0x84>
 800a66e:	2e00      	cmp	r6, #0
 800a670:	da14      	bge.n	800a69c <floor+0x4c>
 800a672:	a333      	add	r3, pc, #204	; (adr r3, 800a740 <floor+0xf0>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 fdcc 	bl	8000214 <__adddf3>
 800a67c:	2200      	movs	r2, #0
 800a67e:	2300      	movs	r3, #0
 800a680:	f7f6 fa0e 	bl	8000aa0 <__aeabi_dcmpgt>
 800a684:	b138      	cbz	r0, 800a696 <floor+0x46>
 800a686:	2c00      	cmp	r4, #0
 800a688:	da57      	bge.n	800a73a <floor+0xea>
 800a68a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a68e:	431d      	orrs	r5, r3
 800a690:	d001      	beq.n	800a696 <floor+0x46>
 800a692:	4c2d      	ldr	r4, [pc, #180]	; (800a748 <floor+0xf8>)
 800a694:	2500      	movs	r5, #0
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	e025      	b.n	800a6e8 <floor+0x98>
 800a69c:	4f2b      	ldr	r7, [pc, #172]	; (800a74c <floor+0xfc>)
 800a69e:	4137      	asrs	r7, r6
 800a6a0:	ea01 0307 	and.w	r3, r1, r7
 800a6a4:	4303      	orrs	r3, r0
 800a6a6:	d01f      	beq.n	800a6e8 <floor+0x98>
 800a6a8:	a325      	add	r3, pc, #148	; (adr r3, 800a740 <floor+0xf0>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f7f5 fdb1 	bl	8000214 <__adddf3>
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f7f6 f9f3 	bl	8000aa0 <__aeabi_dcmpgt>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0eb      	beq.n	800a696 <floor+0x46>
 800a6be:	2c00      	cmp	r4, #0
 800a6c0:	bfbe      	ittt	lt
 800a6c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a6c6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a6ca:	19a4      	addlt	r4, r4, r6
 800a6cc:	ea24 0407 	bic.w	r4, r4, r7
 800a6d0:	2500      	movs	r5, #0
 800a6d2:	e7e0      	b.n	800a696 <floor+0x46>
 800a6d4:	2e33      	cmp	r6, #51	; 0x33
 800a6d6:	dd0b      	ble.n	800a6f0 <floor+0xa0>
 800a6d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a6dc:	d104      	bne.n	800a6e8 <floor+0x98>
 800a6de:	ee10 2a10 	vmov	r2, s0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	f7f5 fd96 	bl	8000214 <__adddf3>
 800a6e8:	ec41 0b10 	vmov	d0, r0, r1
 800a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f8:	fa23 f707 	lsr.w	r7, r3, r7
 800a6fc:	4207      	tst	r7, r0
 800a6fe:	d0f3      	beq.n	800a6e8 <floor+0x98>
 800a700:	a30f      	add	r3, pc, #60	; (adr r3, 800a740 <floor+0xf0>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 fd85 	bl	8000214 <__adddf3>
 800a70a:	2200      	movs	r2, #0
 800a70c:	2300      	movs	r3, #0
 800a70e:	f7f6 f9c7 	bl	8000aa0 <__aeabi_dcmpgt>
 800a712:	2800      	cmp	r0, #0
 800a714:	d0bf      	beq.n	800a696 <floor+0x46>
 800a716:	2c00      	cmp	r4, #0
 800a718:	da02      	bge.n	800a720 <floor+0xd0>
 800a71a:	2e14      	cmp	r6, #20
 800a71c:	d103      	bne.n	800a726 <floor+0xd6>
 800a71e:	3401      	adds	r4, #1
 800a720:	ea25 0507 	bic.w	r5, r5, r7
 800a724:	e7b7      	b.n	800a696 <floor+0x46>
 800a726:	2301      	movs	r3, #1
 800a728:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a72c:	fa03 f606 	lsl.w	r6, r3, r6
 800a730:	4435      	add	r5, r6
 800a732:	4545      	cmp	r5, r8
 800a734:	bf38      	it	cc
 800a736:	18e4      	addcc	r4, r4, r3
 800a738:	e7f2      	b.n	800a720 <floor+0xd0>
 800a73a:	2500      	movs	r5, #0
 800a73c:	462c      	mov	r4, r5
 800a73e:	e7aa      	b.n	800a696 <floor+0x46>
 800a740:	8800759c 	.word	0x8800759c
 800a744:	7e37e43c 	.word	0x7e37e43c
 800a748:	bff00000 	.word	0xbff00000
 800a74c:	000fffff 	.word	0x000fffff

0800a750 <nan>:
 800a750:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a758 <nan+0x8>
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	00000000 	.word	0x00000000
 800a75c:	7ff80000 	.word	0x7ff80000

0800a760 <rint>:
 800a760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a762:	ec51 0b10 	vmov	r0, r1, d0
 800a766:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a76a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a76e:	2e13      	cmp	r6, #19
 800a770:	ee10 4a10 	vmov	r4, s0
 800a774:	460b      	mov	r3, r1
 800a776:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a77a:	dc58      	bgt.n	800a82e <rint+0xce>
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	da2b      	bge.n	800a7d8 <rint+0x78>
 800a780:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a784:	4302      	orrs	r2, r0
 800a786:	d023      	beq.n	800a7d0 <rint+0x70>
 800a788:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a78c:	4302      	orrs	r2, r0
 800a78e:	4254      	negs	r4, r2
 800a790:	4314      	orrs	r4, r2
 800a792:	0c4b      	lsrs	r3, r1, #17
 800a794:	0b24      	lsrs	r4, r4, #12
 800a796:	045b      	lsls	r3, r3, #17
 800a798:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a79c:	ea44 0103 	orr.w	r1, r4, r3
 800a7a0:	4b32      	ldr	r3, [pc, #200]	; (800a86c <rint+0x10c>)
 800a7a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7a6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	f7f5 fd2f 	bl	8000214 <__adddf3>
 800a7b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	f7f5 fd25 	bl	8000210 <__aeabi_dsub>
 800a7c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	ec41 0b10 	vmov	d0, r0, r1
 800a7d4:	b003      	add	sp, #12
 800a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d8:	4a25      	ldr	r2, [pc, #148]	; (800a870 <rint+0x110>)
 800a7da:	4132      	asrs	r2, r6
 800a7dc:	ea01 0702 	and.w	r7, r1, r2
 800a7e0:	4307      	orrs	r7, r0
 800a7e2:	d0f5      	beq.n	800a7d0 <rint+0x70>
 800a7e4:	0851      	lsrs	r1, r2, #1
 800a7e6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a7ea:	4314      	orrs	r4, r2
 800a7ec:	d00c      	beq.n	800a808 <rint+0xa8>
 800a7ee:	ea23 0201 	bic.w	r2, r3, r1
 800a7f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7f6:	2e13      	cmp	r6, #19
 800a7f8:	fa43 f606 	asr.w	r6, r3, r6
 800a7fc:	bf0c      	ite	eq
 800a7fe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a802:	2400      	movne	r4, #0
 800a804:	ea42 0306 	orr.w	r3, r2, r6
 800a808:	4918      	ldr	r1, [pc, #96]	; (800a86c <rint+0x10c>)
 800a80a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a80e:	4622      	mov	r2, r4
 800a810:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a814:	4620      	mov	r0, r4
 800a816:	4629      	mov	r1, r5
 800a818:	f7f5 fcfc 	bl	8000214 <__adddf3>
 800a81c:	e9cd 0100 	strd	r0, r1, [sp]
 800a820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a824:	4622      	mov	r2, r4
 800a826:	462b      	mov	r3, r5
 800a828:	f7f5 fcf2 	bl	8000210 <__aeabi_dsub>
 800a82c:	e7d0      	b.n	800a7d0 <rint+0x70>
 800a82e:	2e33      	cmp	r6, #51	; 0x33
 800a830:	dd07      	ble.n	800a842 <rint+0xe2>
 800a832:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a836:	d1cb      	bne.n	800a7d0 <rint+0x70>
 800a838:	ee10 2a10 	vmov	r2, s0
 800a83c:	f7f5 fcea 	bl	8000214 <__adddf3>
 800a840:	e7c6      	b.n	800a7d0 <rint+0x70>
 800a842:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a846:	f04f 36ff 	mov.w	r6, #4294967295
 800a84a:	40d6      	lsrs	r6, r2
 800a84c:	4230      	tst	r0, r6
 800a84e:	d0bf      	beq.n	800a7d0 <rint+0x70>
 800a850:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a854:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a858:	bf1f      	itttt	ne
 800a85a:	ea24 0101 	bicne.w	r1, r4, r1
 800a85e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a862:	fa44 f202 	asrne.w	r2, r4, r2
 800a866:	ea41 0402 	orrne.w	r4, r1, r2
 800a86a:	e7cd      	b.n	800a808 <rint+0xa8>
 800a86c:	0800ac38 	.word	0x0800ac38
 800a870:	000fffff 	.word	0x000fffff
 800a874:	00000000 	.word	0x00000000

0800a878 <scalbn>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	ec55 4b10 	vmov	r4, r5, d0
 800a87e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a882:	4606      	mov	r6, r0
 800a884:	462b      	mov	r3, r5
 800a886:	b99a      	cbnz	r2, 800a8b0 <scalbn+0x38>
 800a888:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a88c:	4323      	orrs	r3, r4
 800a88e:	d036      	beq.n	800a8fe <scalbn+0x86>
 800a890:	4b39      	ldr	r3, [pc, #228]	; (800a978 <scalbn+0x100>)
 800a892:	4629      	mov	r1, r5
 800a894:	ee10 0a10 	vmov	r0, s0
 800a898:	2200      	movs	r2, #0
 800a89a:	f7f5 fe71 	bl	8000580 <__aeabi_dmul>
 800a89e:	4b37      	ldr	r3, [pc, #220]	; (800a97c <scalbn+0x104>)
 800a8a0:	429e      	cmp	r6, r3
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	da10      	bge.n	800a8ca <scalbn+0x52>
 800a8a8:	a32b      	add	r3, pc, #172	; (adr r3, 800a958 <scalbn+0xe0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	e03a      	b.n	800a926 <scalbn+0xae>
 800a8b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a8b4:	428a      	cmp	r2, r1
 800a8b6:	d10c      	bne.n	800a8d2 <scalbn+0x5a>
 800a8b8:	ee10 2a10 	vmov	r2, s0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fca8 	bl	8000214 <__adddf3>
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	e019      	b.n	800a8fe <scalbn+0x86>
 800a8ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	3a36      	subs	r2, #54	; 0x36
 800a8d2:	4432      	add	r2, r6
 800a8d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8d8:	428a      	cmp	r2, r1
 800a8da:	dd08      	ble.n	800a8ee <scalbn+0x76>
 800a8dc:	2d00      	cmp	r5, #0
 800a8de:	a120      	add	r1, pc, #128	; (adr r1, 800a960 <scalbn+0xe8>)
 800a8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e4:	da1c      	bge.n	800a920 <scalbn+0xa8>
 800a8e6:	a120      	add	r1, pc, #128	; (adr r1, 800a968 <scalbn+0xf0>)
 800a8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ec:	e018      	b.n	800a920 <scalbn+0xa8>
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	dd08      	ble.n	800a904 <scalbn+0x8c>
 800a8f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8fe:	ec45 4b10 	vmov	d0, r4, r5
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a908:	da19      	bge.n	800a93e <scalbn+0xc6>
 800a90a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a90e:	429e      	cmp	r6, r3
 800a910:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a914:	dd0a      	ble.n	800a92c <scalbn+0xb4>
 800a916:	a112      	add	r1, pc, #72	; (adr r1, 800a960 <scalbn+0xe8>)
 800a918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e2      	bne.n	800a8e6 <scalbn+0x6e>
 800a920:	a30f      	add	r3, pc, #60	; (adr r3, 800a960 <scalbn+0xe8>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fe2b 	bl	8000580 <__aeabi_dmul>
 800a92a:	e7cb      	b.n	800a8c4 <scalbn+0x4c>
 800a92c:	a10a      	add	r1, pc, #40	; (adr r1, 800a958 <scalbn+0xe0>)
 800a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0b8      	beq.n	800a8a8 <scalbn+0x30>
 800a936:	a10e      	add	r1, pc, #56	; (adr r1, 800a970 <scalbn+0xf8>)
 800a938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a93c:	e7b4      	b.n	800a8a8 <scalbn+0x30>
 800a93e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a942:	3236      	adds	r2, #54	; 0x36
 800a944:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a948:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a94c:	4620      	mov	r0, r4
 800a94e:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <scalbn+0x108>)
 800a950:	2200      	movs	r2, #0
 800a952:	e7e8      	b.n	800a926 <scalbn+0xae>
 800a954:	f3af 8000 	nop.w
 800a958:	c2f8f359 	.word	0xc2f8f359
 800a95c:	01a56e1f 	.word	0x01a56e1f
 800a960:	8800759c 	.word	0x8800759c
 800a964:	7e37e43c 	.word	0x7e37e43c
 800a968:	8800759c 	.word	0x8800759c
 800a96c:	fe37e43c 	.word	0xfe37e43c
 800a970:	c2f8f359 	.word	0xc2f8f359
 800a974:	81a56e1f 	.word	0x81a56e1f
 800a978:	43500000 	.word	0x43500000
 800a97c:	ffff3cb0 	.word	0xffff3cb0
 800a980:	3c900000 	.word	0x3c900000

0800a984 <_init>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr

0800a990 <_fini>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	bf00      	nop
 800a994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a996:	bc08      	pop	{r3}
 800a998:	469e      	mov	lr, r3
 800a99a:	4770      	bx	lr
