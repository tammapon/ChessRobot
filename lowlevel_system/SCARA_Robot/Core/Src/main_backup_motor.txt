/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

// #####################   Aon  Include   ################//
#include "Motor.h"
#include "string.h"
#include "Protocal.h"

// #####################   Klui Include   ################//
#include "stdio.h"
#include "AMT21.h"
#include "math.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

// #####################   Aon  typedef   ################//


// #####################   Klui typedef   ################//

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

// #####################   Aon  define   ################//


// #####################   Klui define   ################//
#define _USE_MATH_DEFINES
#define h1 130
#define h2 47
#define h3 449
#define l1 486
#define l2 290

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

// #####################   Aon  Variable   ################//
Motor motor1;
Motor motor2;
Motor motor3;
Motor motor4;

// #####################   Klui Variable   ################//
//serial gobol variable
uint8_t RX_Buffer[7]= {0};
uint8_t package[7];
uint8_t state_check;
//uint8_t state;
//uint8_t checksum[2];
//uint8_t acknowledge[5] = {0xFF, 0x01, 0x01, 0x66, 0x65};

//timer flag
uint8_t control_flag;
uint8_t read_encoder_flag;
//encode variable
AMT21 encoder_1; //j1
AMT21 encoder_2; //j2
AMT21 encoder_3; //j3
uint64_t err_count1 = 0;
uint64_t err_count2 = 0;
uint64_t err_count3 = 0;
uint16_t en1_pos;
int32_t en1_pos_old;
int64_t pos1;
int32_t diff1;
//uint16_t err_count3 = 0;
float q1; //rad
float q2; //mm
float q3; //rad
float q4; //rad
float rz;
int x;
int y;
int z;
float v_q1; //rad/s
float v_q2; //mm/s
float v_q3; //rad/s
float v_q4; //rad/s
float dq[4];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

// ##############################################################   Aon  Declare Function   ################//
long map(long x, long fromLow, long fromHigh, long toLow, long toHigh);
void Motor1_On(char Direction, char speed);
void Motor2_On(char Direction, char speed);
void Motor3_On(char Direction, char speed);
void Motor4_On(char Direction, char speed);
void Motor1_Off();
void Motor2_Off();
void Motor3_Off();
void Motor4_Off();
void Motor1_SetPWM(uint16_t speed);
void Motor2_SetPWM(uint16_t speed);
void Motor3_SetPWM(uint16_t speed);
void Motor4_SetPWM(uint16_t speed);

// ##############################################################   Klui  Declare Function   ################//

//serial protocol function
//void CheckSum(uint8_t sum);
//void clear_buffer(void);
//void package_state(void);
void jogging(void);
void linearJog(void);
void update_q(void);
//encoder test
void read_encoder(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ##############################################################   Aon  Create Function Interrupt   #######################//


// ##############################################################   Klui Create Function Interrupt   #######################//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	memcpy(package,RX_Buffer,7);
	state_check = package_state();
	HAL_UART_Receive_IT(&huart2, RX_Buffer, 7);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
// #################################   Aon  Call Timer Interrupt   ################################# //

// #################################   Klui Call Timer Interrupt   ################################# //
  if (htim == &htim6 )
  {
	  control_flag=1;
  }
  if (htim == &htim10)
  {
	  read_encoder_flag=1;
  }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_SPI2_Init();
  MX_USART3_UART_Init();
  MX_TIM6_Init();
  MX_TIM10_Init();
  MX_TIM8_Init();
  /* USER CODE BEGIN 2 */

  // #################################################################   Aon  Initialize   ################//
  Motor_Initialize(&motor1, &htim3, TIM_CHANNEL_1, DIR_M1_GPIO_Port, DIR_M1_Pin); //M1
  Motor_Initialize(&motor2, &htim4, TIM_CHANNEL_1, DIR_M2_GPIO_Port, DIR_M2_Pin); //M2
  Motor_Initialize(&motor3, &htim2, TIM_CHANNEL_3, DIR_M3_GPIO_Port, DIR_M3_Pin); //M3
  Motor_Initialize(&motor4, &htim1, TIM_CHANNEL_2, DIR_M4_GPIO_Port, DIR_M4_Pin); //M4

  // #################################################################   Klui Initialize   ################//
  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start_IT(&htim10);

  AMT21_initialize(&encoder_1, &huart3, 0x34, MAX485_CONTROL_GPIO_Port, MAX485_CONTROL_Pin);
  AMT21_initialize(&encoder_3, &huart3, 0x04, MAX485_CONTROL_GPIO_Port, MAX485_CONTROL_Pin);
//  en1_pos=encoder_1.position;
//  en1_pos_old=en1_pos;
  HAL_UART_Receive_IT(&huart2, RX_Buffer, 7);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

// #########################   Aon  Declare Function    #########################//

// #########################   Klui  Declare Function   #########################//
  pos1=0;
  q1 = -3.14/2; //rad
  q2=0; //mm
  q3=(3*3.14)/4; //rad
  q4=0; //rad

  while (1)
  {
// #########################   Aon   #########################//

// #########################   Klui  #########################//
	  if (control_flag==1) {
		  jogging();
		  control_flag=0;
	  }
	  if (read_encoder_flag==1) {
		  read_encoder();
		  read_encoder_flag=0;
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

// #########################   Aon   #########################//
long map(long x, long fromLow, long fromHigh, long toLow, long toHigh) {
  return ((x - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow);
}

void Motor1_On(char Direction, char speed) {
	HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, Direction);
}

void Motor2_On(char Direction, char speed) {
	HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, Direction);
}

void Motor3_On(char Direction, char speed) {
	HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, Direction);

}

void Motor4_On(char Direction, char speed) {
	HAL_GPIO_WritePin(DIR_M4_GPIO_Port, DIR_M4_Pin, Direction);
}

void Motor1_SetPWM (uint16_t speed) {
	if (speed > 1) {
		TIM3->ARR = (60000 / speed) -1;
		TIM3->CCR1 = (TIM4->ARR+1)/2;
	}
	else TIM3->CCR1 =0;
}

void Motor2_SetPWM (uint16_t speed) {
	TIM4->ARR = (60000 / speed) -1;
	TIM4->CCR1 = (TIM4->ARR+1)/2;
}

void Motor3_SetPWM (uint16_t speed) {
	if (speed > 1) {
		TIM2->ARR = (60000 / speed) -1;
		TIM2->CCR3 = (TIM2->ARR+1)/2;
	}
	else TIM2->CCR3 = 0;
}

void Motor4_SetPWM (uint16_t speed) {
	TIM1->ARR = (60000 / speed) -1;
	TIM1->CCR2 = (TIM1->ARR+1)/2;
}

void Motor1_Off() {
	TIM3->CCR1 = 0;
}

void Motor2_Off() {
	TIM4->CCR1 = 0;
}

void Motor3_Off() {
	TIM2->CCR3 = 0;
}

void Motor4_Off() {
	TIM1->CCR2 = 0;
}

// #########################   Klui  #########################//
void jogging (void) {
	//state_check > 1
	  if (state_check == 1) {
		switch (package[4]) {
			case 0x72 :{
				Drive_Motor(&motor1, 50);
				Motor1_SetPWM(50);
				Motor1_On(1, 30);
				break;
			}
			case 0x66 :{
				Motor1_SetPWM(50);
				Motor1_On(0, 30);
				break;
			}
			case 0x74 :{
				Motor2_SetPWM(500);
				Motor2_On(1, 150);
				break;
			}
			case 0x67 :{
				Motor2_SetPWM(500);
				Motor2_On(0, 100);
				break;
			}
			case 0x79 :{
				Motor3_SetPWM(100);
				Motor3_On(1, 50);
				break;
			}
			case 0x41 :{
				Motor3_SetPWM(100);
				Motor3_On(0, 50);
				break;
			}
			case 0x75 :{
				Motor4_SetPWM(200);
				Motor4_On(1, 50);
				break;
			}
			case 0x6a :{
				Motor4_SetPWM(200);
				Motor4_On(0, 50);
				break;
			}
			case 0x32 :{
				x=60;
				y=0;
				linearJog();
				dq[0]=v_q1*0.01;
				dq[1]=v_q2*0.01;
				dq[2]=v_q3*0.01;
				dq[3]=v_q4*0.01;
				update_q();
				break;
			}
			case 0x33 :{
				x=0;
				y=50;
				linearJog();
				dq[0]=v_q1*0.01;
				dq[1]=v_q2*0.01;
				dq[2]=v_q3*0.01;
				dq[3]=v_q4*0.01;
				update_q();
				break;
			}
			case 0x34 :{
				x=-60;
				y=0;
				linearJog();
				dq[0]=v_q1*0.01;
				dq[1]=v_q2*0.01;
				dq[2]=v_q3*0.01;
				dq[3]=v_q4*0.01;
				update_q();
				break;
			}
			case 0x35 :{
				x=0;
				y=-50;
				linearJog();
				dq[0]=v_q1*0.01;
				dq[1]=v_q2*0.01;
				dq[2]=v_q3*0.01;
				dq[3]=v_q4*0.01;
				update_q();
				break;
			}
			case 0x7a :{
				x=0;
				y=0;
				Motor1_Off();
				Motor2_Off();
				Motor3_Off();
				Motor4_Off();
				break;
			}
			default:{
				//err();
				//clear_buffer();
				x=0;
				y=0;
				Motor1_Off();
				Motor2_Off();
				Motor3_Off();
				Motor4_Off();
			}
		}
	//    } else if (state_check == 2) { case
	//
	//    } else if (state_check == 3) { case
	//
	  }
	  state_check = 0;

}

//encoder function
void read_encoder(void){
	AMT21_read_value(&encoder_1);
	HAL_StatusTypeDef rep1 = AMT21_check_value(&encoder_1);
	if (rep1 == HAL_ERROR){
		err_count1++;
	}
	else{
		en1_pos=encoder_1.position;
		diff1 = en1_pos - en1_pos_old;
		if(diff1<-2000){
			diff1 = 4095 + diff1;
		}else if(diff1>2000){
			diff1 = diff1 - 4095;
		}
		pos1 = pos1 + diff1;
		en1_pos_old=en1_pos;
//		en1_pos = encoder_1.position;
	}
//	AMT21_read_value(&encoder_3);
//	HAL_StatusTypeDef rep3 = AMT21_check_value(&encoder_3);
//	if (rep3 == HAL_ERROR){
//		err_count3++;
//	}

//	position_j3 = encoder_3.position;
}

void linearJog(void){

	v_q1 = -(x*cos(q1 + q3))/(l1*cos(q1 + q3)*sin(q1)-l1*sin(q1 + q3)*cos(q1)) - (y*sin(q1 + q3))/(l1*cos(q1 + q3)*sin(q1)-l1*sin(q1 + q3)*cos(q1));
//	v_q2 = z;
	v_q3 = (x*(l2*cos(q1 + q3) + l1*cos(q1)))/(l1*l2*cos(q1 + q3)*sin(q1) - l1*l2*sin(q1 + q3)*cos(q1)) + (y*(l2*sin(q1 + q3) + l1*sin(q1)))/(l1*l2*cos(q1 + q3)*sin(q1) - l1*l2*sin(q1 + q3)*cos(q1));
//	v_q4 = rz - (x*cos(q1))/(l2*cos(q1 + q3)*sin(q1) - l2*sin(q1 + q3)*cos(q1)) - (y*sin(q1))/(l2*cos(q1 + q3)*sin(q1) - l2*sin(q1 + q3)*cos(q1));
	if(v_q1>0){
		Motor1_SetPWM((uint16_t)(v_q1*381.97186));
		Motor1_On(0, 150);
	}else{
		Motor1_SetPWM((uint16_t)(-v_q1*381.97186));
		Motor1_On(1, 150);
	}
	if(v_q3>0){
//		v_q3 = v_q3;
		Motor3_SetPWM((uint16_t)(v_q3*381.97186));
		Motor3_On(0, 150);
	}else{
//		v_q3 = v_q3;w
		Motor3_SetPWM((uint16_t)(-v_q3*381.97186));
		Motor3_On(1, 150);
	}
//	Motor1_SetPWM((uint16_t)(v_q1*381.97186));
//	Motor3_SetPWM((uint16_t)(-v_q3*381.97186));
//	Motor1_On(0, 150);
//	Motor3_On(1, 150);
}

void update_q(){
	q1 = q1+dq[0];
	q2 = q2+dq[1];
	q3 = q3+dq[2];
	q4 = q4+dq[3];
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

